node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_contentz?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_contentg<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\223\025:<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\252\261;<\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:or\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rrk\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"uz<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?oa\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?az\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?za)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?"
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026ez_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273pj\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021jh :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<hl\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245zd\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<dd\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020= \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A<7\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\273fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=4Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\275\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Aoa\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\177\257\201\274\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\332V\232<\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\034\335\224;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\007\306\244;\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\352^]\274\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\315\025<<\256\273\320=\256\273\320=\256\273\320=\256\273\320=\256\273\320=\256\273\320=\256\273\320="
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?po\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vb?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?"
      }
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fhr\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{s\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>\246X\022>Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275Z\323\010\275E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<E\263\275<\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\2062$=\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\227\244\270\273\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\363P?:\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<\234\331\205<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341apuM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puq2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\357\260\255:\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\207O%=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\267\222:=\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331fe\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Nex\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\253V\307\275\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<\225\366\245<S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=S\207\036=u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275js\330k>s\330k>s\330k>s\330k>s\330k>s\330k>s\330k>"
      }
    }
  }
}
node {
  name: "Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "q$\331\274W\220\010\274\3577*\272.\356-\273~k\316:\244\244T<v\356\003<\270\242\201\273D\t\332\273\000e\335;W\346\376\272\237\204h\272D\234y\273k\035Y<\033Z <\265\257\027;c\003\007\274\325O\271\274\246\344\337\2739\360\262\273\304y\021<\352\212}\274\032\242I\274G\253?\274\376\315\265<*\007\247;\336\310\r\274@\346\341\273\221K\214\274\241\356\014=\246\367\275\273\245\252\374\2724&\301<\373\270\201:\346 \342\273\036@\225\273\212\n\027\274:t\271\271f\331\340<%Z\007<\312}\314\271\203\304\370:\341\247N;$[\316\273d|\256\273)\02049\253\031x\274w{\314\273O\227\035:\274\373\264<\013H\206;\220\204y<1&\021\2733\336\260\273F\360\224:\375\251i;\327\217\264;#_\221;vq\220\273\005\326B\272\312x\004<\027\264\027<\351lv\273\003\200(;b%\375\273S\237\256\273l>\207\273b\372\352;\200\031R;*P\264;\217\353\304;\177q0; n\277;NM*\274b\3663\274S\r\227\273\336t\030\274\371\233i:p\257\245;\014m\323;\265\305\036;\310\335\'\274\024\272\217\273\005\246=\272\236\264P<1\227\230\274\027p\336\273\"\3606\273\027\265,\274K><\2722\315\002<\032cu;@\340\263\272l\3729\274\236\023P\272wo\226\274\311\251\023\2732]D\273\313`\331;\262<\270\274<\2757\274\341\244\001;\\hq\273\000\r\200\273\013d\371\273X}\271\273\346\221\334;?\014\246\273\315\307\304\273H\314\326\273\217X\216\273\200\213\211\274\267cc<\213\"\201<?\225\255;T\344\251:z)\264;O\310I<\341>z\274\020\217\250\273\211\2050\274\323t\n<\342\351\227<\361\273l\273)X\007\274\2322\003\274\016\265\200<\230C\"<\017\216\037\274\334\300\034<x\200q<\345\t\341\273\315g\365\273\365\t\216;^\252\311;\017\320\021\274\337\245d\274\003\211\342:\265\014&;\315M4<8@\035\274\227\226\207\273\201\256\370;\3622M<H\021\272\273\224\003O\273v\304\370\273\003\240\260\274\200\332)\274\000\252\262<~\220\211\274\367\032\303\273~\245\223;\364\337\016<\025A\353\274T\331>\274\240\332\240\274\266\036];\207\346W=\360\341\311\274\305\317\254\274\353\250\303\273>\206H<\261hK\272\312\314e\2758\223\233;\177\272\037<\254\\\322\2749\024\371\273\023*\223\275lL\237\274\3020\021\275\320/Y\275\265mo\275!\\\272=2>\005={0\270\275\241\354\021\274\332\346\361<M\336\357<\245\357\000\274\316\205j\275]\240w\274%\033\r\275i\032r\274\t\001g=\372t\016=\016aB<\024\376i<\207\031D;\002\304\306<\265\241\252\274{Rf\275\246o\353;6\023);\346\373\000\275\'*(\275\311\251\235<\302\224O:\356\363\275\274J?\374\273\206!\002\275\025\027\217\275\371C\364;\\\373\216=\264\363\222<\274\345\250<A\022\300<R\343\213\275\253\351\245;a\037\256<\312\362\230\273q\023\276;P1B=\n\332M\273:\260\007\272\272\356\177\274J\321=\274{m\213\271]\325\005=\017\277\247;\371+\203\274\300X\013\274\312 \262\274\263\260\247\273\036\320\265\272\236\217\263;\344=\215\273\323z\234<W\036\235<\211\367\266<\306\016\375;\274t\000<N\014\340\274\022X\240\273\324\335\271\274\370\244Z\274\215~\207\273\200\326\377\274\316\373\370\273\264\0060<\006a\014\275l\333J<\374pS\273Qy\231\272\320\366\207<\010^\222;\246\026\004=\361|\234\274b\215\306\274\304y_\274?\270T<)\326\270;\232O\211\274\001r4=+\202\007<\234\370\n\275\202m&\274Eh\310\273\324\302\236;nc\016\275\231\221\215\274<\216y\273\251\212\252\274\264\277\220\274\244\207:<\2244`;\017#\343\271\346y\007\275\275\307\"\275\r\331\206\274P\317x<lV\352\274:\3650\274\362\223H\273\273\206\032=6\314\241<\001\177\267<\377\263\244<\377F\003<4\367%<C\202\313<\320{H;\313\251\344\274\211\3743=\303\366.;\033 \214\272\014x\225<@1\030\274\352\331\030\275h&O<l\330\235;/m\t=\257\014\005<\3568\210\273\262M\221\274\2260\237;\3548\017=\026\201|;\342\3451\274\203\217\2719H=\203<\201\337\031<\252\211\343\274\245\001d\273\200+\001<\270\205\010\273\022Q\245<\231\016\241\273\201|\273\273\303^\240<!\376\242;\272\246\006\273\264\277\337<\250\253\211;\315\035W<=\261\035\273x\260E<V\017B\274u\036\321\273\023g\247\274Y\263T;\203Y\223\273\365O\201<\252\030%<\177a,\272f\262\305\274\313\210\322:\277@R<]\207^\272\013\t\306:p0\244<\337\300\272<G\324x;\304Yd\274\224X\343;\273]\257;7\246\307\273\0041\255;\233\257&\273\264N\n<Wk\222\273\201\265\217\274\032\200&\274\020\265\326\273p\260\251;\254\272\3439^\242\306\2745v\310\273\017\221$<\211\2634<\221\023\266;5K\321;\207AG\273\035\306\257;\263\356\257\274\306\031X\274\326\253\032\274\001/\001\274\346\353\221;@\223\222\273\276Ux<O\241?<\237\216\275<\343\256.<\025\035\264;\007\323\026<\336\265\222;|\202\033;,0\204<\362=\265;\247\264\205;\367\t,\273\341T\006\273\210\212q<xg\302\272\036\204E<\3271b;j\302\314\272\220\362\342\272!\2111<\251\376v\273\003v\022\274\326\262\340;\262\212\251;\304o\222\273\222`\272\274d\252\246;\253\217\256;\362\313C<T%\226<kt\274;\037\2325;\313\231`\273\031\217K\272bu\215;\016\241>\274:\2267\274\017\270D\274It\200;1jF<\033\204C<uA\353;\211\262\354;\210F\232;K\025\300\272\254\272\013<\252RB<\027\220\216;\303\231\236\273\n\022h\273\345\375\304;\345\354+\273\310BO\274\020\031\360\273\026\370C<J b;\310g\334\273\203\364\203\274\203\314X\274m\0131<\305\225\213<\0252\272:\242\026\022<\260L\177;\354\033\334;\366\377c\273Q\375S<\331\266\307;!\262\260\273JU\341;(\350\031\273T\270n\273M\204\020\272\235iQ\273\245\373\005\274\"r\022\274\"\325u\274\346&%<\256S|\274I\263)\2730\302\026:\357\354\026<\360\333\'<\220\037\220;t\215\242<I\246\215;\374&\320;%\213\337\273\001\225\2579\017\013j<\322\225\3737\372\267\3738\013S\025\2747\254\315\273\235\353s<-c=\273BK\223;&\312\211\274\006\215\1779$N\205<\013/\300:3\357\202\273\374\377\343:at\340\272o\212\037\274\"2\253\2720v\023<\n.+;\353\315\273;Y\037\017\273\253`\376:\335\2058\274\270\032\213\273\312VD<~\005\203;d\365\247:\364\302\223;\235.8;\243\216\2529:k\033\273\351\362\246\273\331\343\373;\030\353\271;\365Y:;\327\245\332:\346\322[;\221\021n;1\225\020\274e\321\257;\374b\224;O\276\006\274F*\310; +\354\273b\3707\2749\351\271\274\276\363\262\272\223w\031\273\017\232\347\272rp\227\273\260V\352\273\374\210u;\213\234Q<i\245\276\270\364\320\311\274\035*B\274\017\357:;`\363\004<)\376;\273?\375\301;\177\005\2028.2n<\323\302\024<\340\304\245;\320\323@;\276x\304:\257\260\026\274`:c;\344\355\202\273l\353\236;\305\030\027<D\325\266;s\003\210:\223\322\013:&YJ<\306\243_;\301\236\257:(\314~;<[\353:\020\360s;\231\210,\273\033\311\001<\333\333\360;{N\263\271\256K\305\273\262\224\341\271n\014\371;\323\317\207\273\244\t\212;N}b\273\244\\\204;\373T\337:\355\202<\273{n\273;\312p\332;\251\321B;\337\214A\273\317+\014\272\346\355\356;\203R\177;\276O\257\272\261F\"<R/s;\364\tI\274J\267Y\273\341n\037<DR\3319\340\307\316\272\321x\006<\367\302\217:\301\256\227\274l\270\007\273\\&U<i+\035\274iE\224;]\253\234\274\356\226\006\274\177b?\275\000\365\303\272\336n\034=\025\025\217:\360\304\016<+\374\225\273\037\342\262\274\006,\262\273\271\255\343\272G\340h\274\017\343\373\274\345{T\273\277\222-;\030\204m\274\3706-<\010\337\251<\304v\213\273\035HN\274\023?&<\222\276\034<\016\357\335\274\343\346R\274\373\357\250\272\252n\273;\356>e<\251\017\032<\010<\366;\222\362K<N\272\207;z{;\271\225\306b\272n\336\004:j\320_\274\247\370\034\274\267b\\\274[\343\205\272\253@c\271\320\230\310\274\366\004b\2741\343?\274\211\346\356\271\317I\307;KY\242<\257\262~<\032\277\376;7\363\342:\226\031\203<\336\227\217\271\n\350\007\273\351\022\216\274l\316p\273i\221\256;q2\222\271d\366w<\314\206\330;\315V1<\242\345\213;\230\325\304\273\370W\215\273d\366\213\273v2\255<\t\247\233\272O\241\207;d0\233\27247\277\2731\252\374;\362D\253\273\021\254\275\274XqB\274\261\031!:S\221\215\273\362\242o<\\B/:\334\345W\274\203/\003\274\035K\333:4\277\227\274\376}\204\272\373\252\3069\017Y\225;\365\356\377\272\307\216\264\273\330,\311<[!:<\316BX<\252\261\323\273\307\230\207;\363l\323;\3257\021;T?:<\272\237*:\352\274A:|\230A:m\314\007\273\345\323!<p>Z;\017\252\203\273\356\304\374\273\363\207o<\305\246\0309\227\230\312\272\234\251\302:\216\340\2479\373\332\3449\245>\264\273\004\335w<\035\245\';\303\307i\272\257q\203;U\027!;,\265\3219\306\3141<zr\232\273eU\346:\332\036\206;W\t+\274\177_\357;\364 g;\2454\246:\203\371\310;\0372\227\273\243\335l\273\177y[;&\0321\271>k\034;\001F\310;\017D\22295\300\211<;\250\021<\026\353\371\272D\t\201\273\317|\010\273\255a\014\273\265[\005\274\222G\313\271K6\206\274\256>\246\272M\245_<\317\035\003:\301!\370\272\301b,\274\211\023=<\034\263\311\273\004i=\273\013\306\'\273\344\211\235<\336k.<\255x\226;\033.@:\350\202f;\036:\274\272\016P\244;\000>\245;U\262\200;\313,|\271\372/_\273\203\210\304:\361N\036\273<\355\035;\3349\304;\353\200^;\177\240l\272\334:\022\272np\016;vJ\000;\023I\336\272\377\203\225\272_u\022<\224\344\002:\365\262[;\231\230\214:\2618I\273t\037\370\272\316\243\230;\352\325\340;I>n:\333C\211;y{v;=\213\323\273A\207\262\273Vy\267;\353d\016;%\243\007\271\336Y\311;{0\362:\260\312-\274\t\316{\272\'Uv<\216\300\276:\232\017]\272\031\253P;rJ\005<C8<;\324#\216\272\335\373\212\272\203[\252;\344~\212;\322\303U\273\211C\314;\275\037\036;\321\302L;}2_\274n\365=\274\203\232M\273\371T(<\317\244\336;(\\\n\274\200l\261\273\".z<\325\250\222\273\331q\304\273\264\030Z;\346\373\2709X\230u\274\375\236\355:jl\254\2735\244]\274A\370;\274\'x\r<;0\n;o1J<$\202\312\272;\373y\272\t\361\031<\210\222\307;Yo\022\272\316fo:\003?(<\360\003?\272\035s\217;\034[\0359p\023\003:\274\321\373:e\\\006\273,Y\003\273\344\3006\2730\363\025\274|\227\3249\320,(\273A\234\270;\360p\033\274\333\267&;\304\226}<\225\201k;\006dQ\2704W\370;\302\377\267;\3208\216;\305{;;\001\361l:\272p\300\273\240\251\257\273\306\366\002\274\317\272\234;C\301B:\201;\377;\t\312\365\273m\316\233\271\220\301\020\273hl\261\273\326\025\257\273\036B\001<\226^\225;\267*\243\273\332?Z\274O\206\3237\254\022Z:\241\262W;v\344\275;\374\300\006<-\021R\274\212-\026\274\343\251\373\273c\005\032\274%\307\203\272\177\205\261\273\260\377\250;\226\302*\274/\344\010\273\373\315O<\204\nR\274\274(r\273\216\335[8as\333:\243\351D<VC\3469\346|(\274\305Kd\273D\nO;\366B><0\334\035<\263\213\024<\226qJ<\206\265q;\213\315\034\271\230\200><\217\305\342\273\017\343\202\274vlR\273;\335+;E\365\265\273e\201\037\271B.\353\273\227N_<\024LT;\202@\031<\025\232/;\225\364\200\273)\347=\273\365\227\212\274F\303\212\273\013O/\274RM\304\272\224*\250\274\0163\027\274r~\370\274\003P\207\274G\302-\275\317\330;;\205Qj\274e0\275<_\210\213<\267\266\202<H\276\241\273\204@6;\004*\r\2750N\236\274\020M\372\272:yw<v\250\232<\367\240\000\273\2439d\273\023\323\356<\274?\343;aa#<1j\253\273\353R\316\274\224\032\263\274X\261\356<\301^/\272/\221\306\274D\024\003\274\276\320X<\334\017Z<\341\246t<\364\000\210;\271</\274)\364\307;V\342\304\274559\275#7\202;\002\330\213<N\221\300<\017\372z\274\275\245:\273hk\216\274/\350\303\274\347\035\204\273\337=\311<\232^\214<\003\r\200;w`\313<\303)\223;\374[U<\206<\367\273\232\351\203<X\256&\274\217\213\346;!N\201\272q\211q\273\374\271\237<\240+F<W\360I\274\201\203\260:\245y\016=\252\274\310:\221\337z\274c~\n\275\260.7<\003\022a<\020\237J\2731W\220;\212]L<\332\261\327\274\005\364\241:\031\225\232<\210\241\213\273\353gB\272\232`\r\274\210\006\230\274\327\246h\273\3127\254\274\247\257\033\273S\306\177\274\322\252\301\273\322n\301<B+\261;vR\323<\343\000S<\003\250?;\326\211\351;\211\204H:41\353\271\201\016c\274\263-\004<\370!E\274\311L`\273\320\022X\2744\225I;r\n\211\273=\223\020\274z\365\200<0\246\372;\3313\036<]?\020<\354\356D;\304\343\016\274<\rF;\254\361\2129(\233\177<\027\345:\273\024e\244:\324\333\261:^A\205:j\030.<\242\265\330\272\372\030\337:\200\331\265\273a\307\370;\346\245\262;F\241\002<US$;N\202T8\352$U\273\277\262\330;\022\003\230:\026b\206\273AS\263\273\217\314Y;\212\245\022<\317\375\3379\236\037L<&:\266\271\213k\326:\244\246M;\013Y\377:\"\034\347\273\017Q\356;\"\\\023\273\351\210\233\270\037\271\226;\337I\304;\025i\266:\212\224@\273\362\025\235:\375\221\227;\027k,\272G\272\210;\335m\222\272S\357\016;\000`\245\272m\304\227\273irf\274\023g\240;\\g\"<\0355\241;7B\376\271\364$e<\013\203s;;\351\\;\205\204\225\272\256\233b;\206vq\273WE`9\332\034\001\274\216\014\243:_\232`<\363\266 :m\014\316\273\317\345|\273M\031\243;Z\005\301;\017\370\001\273ya\035\274?U5\272J\370\003\274$\305k\274\235\215M;\203\201\007<:\333\212\273`\364N\273v\375/<\253d0\271(\235\250\2730n\340:WaH\274\242\200\251;\313RL<\262O\265;N\213\203;\301<\\\273\024\001\277;\344\222\213\273f\236r\273\035\342X\274\311`\247\273\004+\347\273\306\204a\273I\214\213;2/\037\273\024\276 \274\004\346\277\2737$4\273\352\274d\274\301o\036\274\324\262\375;G\270\351;\037.\252\273\301\361\252;\005\211\036\2710\025\252;o\213\231\273\034\276\336\273z\010\210\2744\331#\274\026\304\264;\010\237\242<2m\r<\n\007\3239\025\205\277\272w\n\3069\335=\323\270\323\340\304;\020O\247;\0373\024;\244\251\035<\000\311\227\272@\312X\274g*\371\272}be\274\232\032);\253\324\006<\273:y\273Sc\314<G\037j;*\221\315;:rr\272Jp@\274\345\013\250\272\314\311y\273\342\241\233\273\016U\223\273a\260O<\351p\333:\\\205_;\tX\010<\271\210\252;\330a\375\273\252\220;\274\232\216\374\273/\212\217\272z\323u<)\203m<\373\351\274;\374/\236\273D\227\264\272Q \035\274\327\303g<\374\306\017<\223X\225;JHG\272\371\230\331:)\320\210\271\264\306\2109\002\n\n;\264\020\2729\032E\256;P\252U;\3008Q\272\306x8:\206\275Q\273\201\000\267\273\247\241\027;\r\347W;\372\273\347\272\007m?:db\341\273_\"\205;\\M\337\272\314\257q:\334\rp<\323\366\371;L\3064\273\353\202\202:\276h\027;/\3652<\303d&<\'\264\206\273X\324\270\272g\237\262:0\240+\273\324;\351\272F#|\273\377:\253\273\2120\032\274\016\221\321;om+\273@\204\233;\230Z\254\2720i0;\303\360\363;L\270\";N\262\220\273\351\312\347\273\376\324\373\273E\364\224:VM\206\273\277]|;\307\3572<\372 \235;\373\265!\272^\nW\274\347z\311\273G\377B\274\304(q\272hk^:=\233\330\272\212\\\224:p\007\375;\350\317\315\272\034,\206\273Q\350\013<V\312\236\274\354\212 \274\202*B\273[\364\212\271\273n\312\272\374\2420\274\037\361\321\273-\233Z:\002\343\211<\013G\235;\2533U;@\2577<\333\263\353\271\020\315\306\272\233\300\3068\375\326\031<\252v\r:\302\032\240\272\025\356\204\273\003\340\3058\270A1;\243*t;\364b\312:J\263\354;:1\374:k\306\311\273\220\262\246\273\026\366\004<\233\304-<2\017\246\272(\362\23495\025O\274\371\365\203\273\243\212F\273\217\021\256\27327\256\273\244<\366;k\013\351<\033\321\225:\233\3074;\230\303*\273\240\253 \273 \205W;$A\250;\233(\315:\321@V\272\003\242\2767>\274\210:=I\302;[\241\310:\371 \222;\177\030Z;\036\210\362:X\326>;%~\2728Xy8;\256\205\013\272i\2417\273R\276\363;\200\202\314\2735\263\272;\310s\2717,P\277\272\316]\305;\000\320\2549\366\034\372:\353\353\235:\266\316\345\271\277\342\211\270:O\256;^}\320\273\232l\021\274\300\234\263;\313\325\367\273Th\213\273\275>6<\362\330\207;\330f\024\273g\035\263;\336\242:<\177M\006;*\236\305:H\330N;\227eK;\222\301\353\271\210\333\021:K\336\230;_\204\236\273?\024\247\273\241v\033\273\202\341\337;\311\261\305\273_\263\200;\311\263J\272\r\376\236;\021\356e\272\212{\200;\245\000\263\272\262\230v;E\352\350\273\315\214\2638\302p\310\273\322g\313;\204\022\310;qw\037<\345\034\276;\333kg\273\n\234\201\274\3536\253;\367k3\274\244\255\270\273\345i\220;\026\355\241;&w\031<\241\215~;@k\225;~I6\273\3562\300;\177}\257:\\\344\230\273\201\030\243;\362\330$<\0169\223;\236\'f;\\b\217;\374l\253\267\010\360`:\001.\273:\266?\007<\330\300\324;\205\014\266\272\336y\277;-f8;+\3676:\tV*\273#\030!\274g\356\246\272.\026+<W\324\025\274q!\226;\251\344\035\274\257Y=\273\203\277*\271E\330;\274\312\344W\271\354Un< \236^;\257\375\013\274+]\261\273\315\314\227;DN\310:\247\361\214;\242\206\336;\324\302\352\273v\315\270\274D\351>\274\364\2400\274i\230\'<j\274\001<\273\027\006<u\237\223\273\266\360\332;\320m\366\272$\264\310\272\236\324\n<\343\006\006<Z<\333;\027+\336:\331\240\030<\341\221\230;7uV;P{%\273\026I\035;~\024\215;ij?:P\223F;k\\\355\271@\343<\273\017\007\236\272\323\326\245\271\204\350x\270jg\033:j\353\377:\334h\n<;\234\231:\250\337\2438p\302\214\273\247\335\253\273/\\a;Y2\311\272\243\374+\273\314\202\020;H\266\257\272\313\220p\274\326Q\177\273~\275\222\2731\206\355:\272]v\273\353\304\242;\306N\201;\345\016|\270\0275]\274\210Z\021\273#R\032;\255\016(\273X\376\231;\003\003\224;wj\217;\002r\233\272\232\270\014<\372\241\010<w\273\020;\210b%9L\366\032:\007\006\002<\021<\006;\363\341\016<\030Pc;\022\263)\274t,\353\273\336\'\264\272\347{/\273t\307\000;c\235\232\273\225t\267\273I\024\311;\257&n\272z\006\300\273W\326\206;I\r\231\273\320\177\031\274\212\237\214\273\307&\227<\307c\355;\372d`;IW\310\272\371\311\020<\320s\276;)\022\016<\177\347\273:O\252\242;\374\035\223\273D\366H;\204\354\201;8\301\036;\313\213\223;\303\240$\273\010\027\033\2731\306\250\271v\234N;\265\333\n\273q\235\241;\362\031\361\273s5\203;\335X\216;*#\004\273k\344\207;\001\215\366;\013}\233;\2011\210\272\276\350 \273\237\201\027\273^c\224;h\301\234;_\273\267:\370X\2079!\367\250:\3277\202:\001\367!\273~3\260\273\354\207\266\272\270Y\007\273\210\210\017<\253st;\345\2642\273\367\200\016\274\327p\313\273\354\366\315\2717\200\316;\313\365E\273\257\206\006<\317\306\275;\201\373\32396\322\272;\022\370\022;\022\277\236;\352\252\202:LZ\000\272>\333_;+\000\345\273\373\024\'\272z\361\005\273\2655\204;4\231\0308\340\037\035:r,\276:\361\033\371\273n\006\202;r&\350;\253\246=\272\022G2\273(\030\214:\321\363\270:M\234\016\274\024\022\203\274\267\362\020\274+\305`;\267-\344\273\033\324\t<\353o\262\273#\242y\274\367}\000\273\333\356\340\272\232a1<r\202X<\205Ct;~\223\033<\226\343\200;!\014N:-t\356;\226\313\035;\32087\273\360\2714:TK!;\030(\236;\271\311\215\272\262\333b9 \333\026;\341\222\216;P\330\376\2732\342l<Nd\337:\205\347\026;\022\221\0249\023>\t\273c\007\252\272\3301\201\273]\232\236\273\256\005\255\273\262\240\331;\027K\312;\2232k\273\023\343-;t\312\020\272\337\351\362\273tF$;\347\267\027\273\256\302\311\273!\320\265;\336\351\252;i\304\333;\"\003\223;\354\235\347\271\006\250\327\273\234\267a\274\202\\^\272\311\236\030<\240\3352\274\033\217R\274\211\2524;\177l\210;\tgJ<\270\177c;\245C.;H\214\262;\272\265\256\272\250o_:\225[\326\273)\003\2268\252p\302;\356$\002;+%\323:\333z\0249/\242!\273\357]b\273\036\363\3039\312\251b;\3038\344\272\361\260\013<]\210\216;c\255\213\273Ke\025\274\033\270\013:\024u\202;\333fX\273\217\177\264;\376\343h;\033\242d;\\5\317;s\273\2779\007PQ;\366\001 ;H\307\036:\"H#9\230q\267:\2137\253;\025\024\324;Q#\007;z\034\217\272"
      }
    }
  }
}
node {
  name: "Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\007h\341A\240g\256A\215\351\251A$\275\222A\005u\331A\n\267\211B`\\\237B\244\274}B\326\214\'B=\316vB\300\"WB\377\305EB*!\002B\241\214\227B\307\252\253B\371M\257B\262\377OB\230\205\233A\341MrA\002\216?A7\361&Bs:\261A\204BcA V\026A\335dWB\021\026rB\235\3570B\302\341\005BRn\214A\310:\204B.1fB\3527XB\316\206\234B+\354\235B4plB\374P=B\325\345\353Ae\343\346A\233\004\237B\226\374\250B\373\037\246B\376\331\251B\256V\260B\337rVB\326=\017B\354L\023B\361\235>A>i\006AFNBAD\373\221B~\265\232B\256+\260Bz\252\237B)\336mB\212\364yB\347v\220B@V\245B\210(\260B\370ppB\026\221^B\247\351\237BnZ\263B\373s\212B\253\036\226B5\351!B\323H\333A\253y\237AW\315TB\023\230}B<\033\231B\354{\252Bt^\260BC\253\271B\'\0345Bn\346\307A\177\352\233A\372%;A?\362\203A\n\223+Bm\330\200B\311N\215B\264\337\005B\225\035\310AVX\274A\251\035\214Bt\026\360A1\355\266A\267\200\237A\"\3458A\213G1A?&=B\267\031lBtYRB\245\306\262A.\233\250A\367\303\342@;\024\312@\265\006\246@\001\333!B\210\335_A\327O\026Aw!\205A\364\243YA3\243(A\217s\313@9\006\215@\000\341\030B\026}\332Ar\362\220A\321\344:A \035\nA$\322[@\312\3272B8\004\210B\3269\223B\020j\226B\305.\244Bhx\265B*<?B\260X\032B\2015\300A[\212=B%\263\223B&\306\200B\304\3502B/\315\367A\272\016\177B\265\375\225B&\336MBb\237\205BU\245\241B\352\242yB\215\3345B\216x_B\273;\211B\016\274(B\320\013\261A*\230\343A\363!\035B\257\336\212B\300\\(B90\006B{oeBC\316\232B\207\234jB\260)CB\010\004\363Aoa:AK\003\001A\367rUB>\t\010B\356\023\344A&c\036BTeiB\303>\270A\206\247\206A\310? A\221)\224A+O\225B\027WIB\010\366\rB\230S\374A\245\370CB1U?B%\216VA\026C\245A\347\256\023B\0273\243A#&\210Ad\214\242@R\n}@\364\215\035@\351\241\252?\005\032B?\0074JB\037#tBY\352\001B?\362\362A\031\200=B\334\227uB\331\304]B\233r\327A\365\377\262A\272\317bA\252\2117A\031\300fB\356\356\216B\210\025\227B\374\034\241B\232w\243B\216\365\262B6\201gB<\205\276A\251L\374A\225S\014B\265\025\220A\320\247\023A\202\236\001BL\320\005BT+\237A\366p\204A\230\337\001A$\276A@i\360=A\261xuB\007|\210B3e\227B+K\245B\n\365\022B?\255!B\276\221aB\020DOB\260\226hBG\360\247B\211<\236B5\002\234B;\220>BQ\372\004B\303\233\003B\300\260\231B\010\336\237B\241\251DBc\201\026B\325k\236Ac\271\207A\326@\200A[\274\022B]v\343A\214\242\216B\373\330\251B\313\202\267B\026\246\272B\t\246\275BCV.B\251A\030B\033\346\241A\343\037eA\221\266IA\266G\253@\216\215\215@\370\035\361A?\321RAp\337\005BvU\365AF\244\352A>G}B&\221\212Bn\277\261Bv\350bB)d\006B\303\365\307A\366L4B\361\357TBa\034\000B#\035\223B\242\340\232B\362\276\"B(\'\006BB\220\347A\023\217\033BYFxAIq+A\243\210\033Ax\245\260@E\350c@\027\211\341A\262k\016Bx\256\013B\357v.A\361\315\233@y\337g@\205\233\346AU\236\204A\274\311UA\003\201EA\275i~Bf\035\226BX\202\247B\253\343\261BWo\265B\225\303\271BPV\300By\360\300B4\3529B\276\334\227B>)\232B\302\334\225B\357\276\252Bx\212\201B\372!\323A\326\265-B\367$HB\037\377\232B\253{\242B\017\024\220B\261\r\'B8ZIBV\245\241B\304-\245B\356\305mBQ\367oB\326F\236Bp\242\252B\351{\023B\033D\005BB\031GB\236[5Bu\\\230B\315\244|B\267\223BB\030\340\230B\370\356\240B5\204\221BTG\265B\265\275\267B9\361\275B\327\352\253B\"\235\267B\263\240cB\035!.B\030\227\243A\037\370\352A]\215\276A\247HwB0S\224B\214\306\217Bb\352\325A\366~\370ADwnBU\reB\346YuB\205O\255B\361d\273B\320\334\274B\032\"fB\007@\206Bq\337\223B\352sZB\034C\204B\034\222_B\317.\226Bg8_B\004\260\261A\363RiA\253%/AB\035\372A\252\272\004B-\037\037A5\222\373@\201\342\034B\0307tB\345\274\212B\3178\233B\2654\202B\323\022\227B\262)\330Ah\316\207A\"\"BAh\005\017A\216]\314AlP\240A\247_wB\010u\230B\251\217\261B\210\217\267B\230`\272B\372y\276B\3270\300B\034+\301B\354\377\304B\324\253\305B,\"\306B\321G\246B\250\356\213B\265\324\261B\371^\242B\236\273\265B\363\t\271Bj\312\244B\356l\213Bu9\257B\024\356\205B\261\262\021B$8iB}\374\213B\202aMB\211\\\207A\214\256\000B\230i=B\032\361\213By\313\251B\221\205\257B\305x\262B^\334\221B\rU\211B\201\337\235B;\314\007B\177\365\224AD\241,AA3\320A:\322jB=\t\226B\267*\243B\204\240\255B\261[\263B\033\326\242B\214f\263BTS\275B\367\217\277BQ\356\215B\365\004]B\275\305\216B\332\006gB\355\016\302A\322\010\201AP\267WB*\312uB\332c&B.\t\232A\247`9A\004N\"Bi\020\205B\356\207\210B\005V\235B`\341\244B\357\346\257B\360k\215B\370\004\254B\365\217\263B\275?\204B)\364\232B\023@\204B\372AEB\221~:B\342\371\374A\331[bA1\205\355@\026;X@\006\177\026B\370\025\246A\3457\225A\033\204\252Aq\315_B/4\225B+\026\240B-\265\267B\020Y\272B\343\360\275BWc\205B0\321\206B\016\207\254B\330\223\254B\251\337\254B\352\t\033B\001\207\305A\312D\206B\352\256fB^K\210B\364/\344A\300R\353A4A\211B\t\243\215B\253\\\\B5\035sB\026\317LB\020\302\256A\346\256\234A\030\212tB\362\212\210Byr\240B\225\005\204B2\002\221B\234\320\331A8\372\240AA5xB\026\345\213B \\\221B\\\024\243B6\253\253B\316\304\254B\022\217rBSu\367A^~\206B|\230\236B\010\221\247B\230\302\254B\261\241\265B\270\374\273B\000M&B:\027uB\003\267\221B\213\223 B_ipBu0\027B1\357\241A\340}\006A[\200\377@:Q\342@ph\310@BK\212@\354\334 @D\025\325A\267I\207B\231|\206B^\337\235A2!QA\276!\264At@<BQ-!B1\300jB\356\213kBez\251B\345\312\264B\362U\271B\032\330\273B\332?\275Bja7B\362EhBu\025\'B\005\332uB\300\304\240B|\334\254B\231\002\257B\256r\260B#%\300B`\330\301B\205\212\302BlW\304B\235\005\305B\366\034\306BB\250\216BF\252\256B\004\276\271B\377=\264B\220KJB\0075ABr\313\230Bi\214SBW\335\207B\017\022CB\231q\203B4P\217B\242CGB\213m\223B\240O\253BF\377\261B\003\035\204Bk\360vBKE\247B\017\220\261B\351\320\230B\203{\265B\0232\272BL\230$B\321/\006BCH}B\312\256\200B\207\024^B\266\005\235B\247\016\241B\270\277\276A\021\232\252A\nGrB\251\"\034B\004\'MBwh\264A\017\216\204Au}\242@nA\235@F\307eB\216\267iBG\345\206BAhfB\224`\341A\254B\275Ag\303\257A\363r;A\355\026\225@\032\037\210@\367\233WA\254\314\360@\020\225\026B>Q\210B$\360lB\001\336\025B\230\316bB\253\247\213B\332/\364A\377E\256A\236\026\247An\261\027B\272\245\202B\341\000\230B\224\361\244B\326\001\263Bg\202\266B\032\217\264B)\220\247B.~\251B\036\032\307A&sdAG\301\360@\336q\344@s\311\340@\215\035\362?N\257\225?\365oI?\352\251E?L\262\336Ai$\212B\314\002\243B\327\224\253B\211\237\255B\035\311\272BQl\270B\005B\241B\271m\372A|\252\321A\266\0006B\212W2B\337\372\235Br \252Bo\210\266Bm\372\271BwP\203B\275yGB\211\372\022BN,\235BA\340\224B\027\357\237B\362Y\222B3\3173B\233\232\211B\023\014?B\207\n|A<U&A\t:KAi\331\037A\321:cB\325-iB\225\027\347A\323M\236A3\366\327A\375N-A#6%A\241\360IA\231\350 B\306\300\005B\273\t\234A5y\235B\037\331\253B\316H\266BtI\217B\353\364\230BK^\246B\320\254\252B\323:\271Bk\325\271B\203\301\272B\361\356\273B\300\302\210BW\212\262B-\352\267B\r\033}B\257W\005B\322%\217Bt\241\217B\207\007}B/I\211B\310\037\214B*2\221BHH\337A\301C\237BE\211\245B\2553\231B\245\333\250B\233.\260B\240y\261BC\373\300B\235:\205B\241\025\217B\352r\242B\347(\rBu\223mBv\n\210B\240\235\216B`!\247B\311\210aB\035,#B\201\353dB\t6`B\t\313\212B\341\276\253B\007\300\254B\254\210\301B\217\370\303B[\307\256B\212\353\202By^ZBz\327-B2\314\240A\260\331\232AY6\271@BE\253@\254\027eB;\030jB\r\275HBg\177\267A\206/mB\0030,B\256T\020BM\227\355A\023\010\231B\213\301\251BPk\257B_y\260B\221\006\266B\237\n\237B\253X\257B\250\230\270B`J\275B\354\"\270B2SiB\234\346\204BE\2664B4\274{B!j\246B\276\023\261BJ-\235B\026Y\216B\264\326\242B\333\344\256B\000\017vBgd=B\367\227\253B?;\255B\230\020\267Bi\232\271B-\333aB\344\317%BR\346\214B\303\307\253B4o\256B\r\202\270B\376\340\275B}\246HB\nG\373A!\362aBI>\200B\224\207|BX\340\244B\\\226\253B\000\273\001B\216?\357AYr\226B\371\262\232B\030\366\217BO\306\237B\307\254\264B>\330\270B\013\267\244B\217\007\216BM3\253B\377&\266B\222\363|B\006\320\240B\350+\251B\3463\262B\217s\364A\210\360\204AsW`A\231jMB\234\377\203Bv\027)BfL\373A\373C\206B\373\177ZB7\374\036B\270\212KB$\'QB[T\224A\362\241\330A\272\300\224A\367\267\006A\027\334\236@\3147\014BG7\'B\030#\213B\210d\177BlSmB\214<\240B\375o\255B\247\334\245B0*\251B\251H\274B\223\240\260BY\377\270B\312D\271BX}\272Bd\333\276B9\215{B\322\262\'B\316\312\305AO\377\002A\362\203AA\346\324\tA\364OTB\234\177\276A\256\220\026B\205\r\231B\327m\241B\303\324\240B\305\300\262BO\352\271B\211\337\275B2\023\300B\270\320\300BY\332IB\362K\364A\003\272\201A\270$$B\022_3BhC\221B\n\'(B\313\013$B\253\360\000B\205Q\220Aq\274.A\257\334QB\010L\204B\324\3123B\025K\235A|Q\236A\231A\315A\301\244@BIb\216B\321c\252B\253~\037BC\036\313A\361s\213AE\0071A\245:\'A\212\022\347@f\210\016B\210\325\223A\360$\201Aa\030tBW\300\006B\306\306\341A\220\300\343A\363]\032B\021V\227B(\345\230BC\344\017B\307\306\342AX\2121B\2626\226B/\177\252B\266D\265B\036F\275B\'\377\276B%&\275B\314\346\302B\355I\204BV|\372A_+\330A\341\t\026Bh\007\316A\312h\313A\231!VA>\204|B}\312\212B^\276\244BQ-\252B(\026~B\222\203FB3.\210A?xZAI\260\371@\306\023\345@\344\334)@\233\204\356?.9A?\206\010\002?\236)f>:\362\261@\003)~@\260\010-B\253\300sBl\252\221B^C\177Bs|\206B\033\333\302Ab\246}A:+qA\324\2029B\022\225\210BNf\200B\364{]BvD\247B\371L\255BF\345\264Be\317\223B\300\277\376AbQ\222A\266i_BO\356[B\000$\356A\\\023\302A ]@B\207\231\201B\017V\232B\304+\240BrnVB@[\177B\217\304\335A\237\317*A\210\374\212A\267(1B=e\205B\325\177?B\375\2061B\203\332\324A\215\026iA\267\'QA\215\236\\B\006w\214B)\233\222B\361\022\255B4D\260B`W\270B\323E\216B\200\244\246B\245\014nB \212\211B\214:\203B\204\306PB\302\214\243BQ\336\260B\236\370bB\343\221lB\215\r\256B\010,\257B\321\275TB\254\352\270A\272\320\037B\270\342dB\214\241PB\366\020oB\254\371\227B$\203\005B\256\241\017B\222r\203B\234\033cBoP[BN)\tBKoxA\262\270VA\203\270\302@\3415\262@\200&B@\007D\032@\241\taB\363\351|BU\243\245B\013p\257B\306\234\261B,\026\267B)\272\267B\240\315\261B\234\223\016B\334\374fB\361\237\002B%d\334A$\202gA18\325A\2728\245A\313\366@A\037\215iB\230\335\213B\221\223\240BD3\255B\224\371\260B\242i[B[4yBJh|B\034V\256B^\343\223B\022\241\230B0\271\236B\364\357\243B`\346\273B\n\254\242B\014\025\251B\244\3147B\035/\220ByM\243B\363\013\263B\321\222\266Bv\251\266BmduBy_\241B\223\335\245B\325)MB\230\246\350A\t\221DB\207\207\230B}F\232B\027y\266B\356\341\261B\3437\265B\367\346\272B*\310\275BR\001-B\032`\212B\336YdBfdbB\034\271\227Bq$\256B}\276\261B\212\252vB\025m\207Br?\246B\002\343\226B\240\335\255B\021]\222B\356W\243B[$\200B\275h\352A\332\006\007AC\377\004BS\212}B\0161\221B\027\374\213B$z\260B\270\020\265Bp\t\271B3;\247Bj4\261B\211lnB\230\346rB6\353\277A\276\r\006B\301\263\234B\200\223\236Bqa>B\n,\013B\375rdB\370\244\222B\320GvB\n\220\343A\177\020\327A\n\210[AO\346\275@o>\245A\246\367KB\005\245\035B&t\373A\315\213\204B\215\373\202B\355\370)B>GLB\371C\235A8\326(B\016\244\216B\333\n\235B\337B\246B\375\367\202B\200\207\233B6\311_B7\332#B?\200\206A\263\217HA\023V\003A-\266\321@\243\003\000Ba\245\317A}\235AA\375\000\003A\355j\325@\331\3450@&\370\333?\254\254\001B\005.SBF\335\036B h`B>\311]B([\220B\322b?B\270\315\334A\206$-Aq\207\337@x\245\340A\201T\207B\337i\230B\337F\231B\030\177\213B\342\210\215B#\247\213B|p\254Bn\267\267Bc2\273B\261\225\302B\203:\260BB\260\006Bd\271\355A!\343NA0\206\305A\t\001YB\337\226*Bj\016\243Br\300\247B\024\327\257B\205\231\246B\277\202&B\202\347\031Bd\036\346A\322Z\234A\363\344VA\245\354zB\342\004\205B\245\334\224B\002\227\254B\003\347\264BL\343WB;\306\343A&3\232A\217D\220A\242s\201B\r[\241B\341\220\251B\'\331\205B\225\215uBg\302\003BL\307\205B\022\374\232B\374\370\243B\316+\234B\265\024\242B9\026\235Bj\373\236B\254F\255Bpp\257B\373I\277By\210\302B{!\253B\360\027\257B1\3304Bk\241\237A\275S\"B\252\263vB\262\336?B\203\017YBr0\240Ab\320BB\303\365\036B2J>Bbj\256B\316\351\267B\214\026\231B\304\375\234B\"\246\246B\245\"\273B=\022\301B\253\321\226B\021\216\207B\334\314\217B\311\034RB7\330$B\226\024\302A\217/SA\"C\275@\265\'\037BA\\\002B\337R[BZ\340@BQ\330xB\327]\244Bq\321\253B\347\224\\B+ \355Af6\207A\t\022\301A>D\203AH\225)Bpe\226B\345\354\243B\256\272\233B\203\372\357A\215\225\247A\356\2532A\347~)A\2701\204A\230w]ANC\321A\224\010\214B#\034mB\2752\024B\340\017\216BL:\310AbH\206A\244\251iAb\250eA\357\273GA\r\365\250@\345\"_@;\322\027Ap5\211B\211\353\226B+\326\237B\264I\263B\2046\256Bcb\230B\341\357\230B\273\272\266B\206\237\267B\203.\234B\003\0173B\312L6B\tA\205B*\347\242B3\356\252B\037u\274B\302\262\276B\276jEB\367\034\367A\212#~B?\"\242B!F\225B2\251\226BO\234\334A8P\251A?\037\206A\232n-A\205\235\342@\002\3079B]\214\250B$\325\251B\264\267\255B*\351\222BiFqB^\243\215B\371\367\243BtU\251B\303\245\227Bt\333\227B\304\355\242B~z\273B\300\010\276B\207\273\302BT\215\304B\300R\305B\207?\306B\204F\306B@\002\307B2\227\261BL\000@B\210>\243B\321\0014BR\335\203B\337\003\204BG\236XBc\223\234B\331_\236B\326b\251B\002\205\257B\2338\236B\344\311\232B\375\215\273B\214\022#B\266i\225A\203k7Ba\330\330AE9\241A\356\307pB\225\322\211B-\267iB\031c\222B\016\230\256B\244\300\261B\304o\264B\313\317\271BF\347\275B\001\264\262B\357\315\264B\033o\277Bm\262MB\036\224\355A\336z\267A\263\233tBW\242\023B\032\021ZBovIB\222,\216B\272n\177B\262\005\235Bi\223\201B\323\034\237B\237i\021B\340\342\023B!\345\220A8\236WB\007\364\217Bt\022\253B\324\316\263B\273\362\214BT\343\345A\315\2323BE\256\321A\314\257\236A@\203\026BXTZBy\303\224Bv\261\237B\035\263\252Bv\223\210B\034%\241B\361\261\245B\314\216MB\362\205\213B\255\321\253BW>\263B\\$\270B\351\376\274Bd\227\274B9\362\275B\304>\300Blf\305B\370\212\306Bq\000\256B\002e\271B\357\347\274B\"\321\275B\232!\202B\310\363\272A\207@\246A\177\352\204B+C\027B\253\035TB\035l\357Az3\310Adw\305A\271\256!A\212&\037A0H\204B\251m\220BTE,BD\010\371A\230\322DBr-\\B>w\213Bq\337\245B\330BDB\354\003\206A\031y1A\337\244\361@U\272\021B>iUB\240\365\205B\256\332WB\262\267\207B7\303pB\224\216SB#\r\231B\302\316\254B\354\020\266B\346\036\270Be\325\277Bx\003\302B\tT\303B\213\275\233B\220\251\245B\022\225\262B\rt\264B\226V\273B\241\241\255B\337mLB\014~\"B\255Z\026B/B\023B)\331NBqc\233B\233\021\276B\236s\277B\254\221\277B\376\2503B8&\266A\344\364?B\310\203\035B4\301\327A`\353>B\205\235\027B7d\nA\252\275\323@\307\257\226@U9\227A1\251NA\263\3779B\346`}B\263\221{B\356\262\223A\301\231{AP\225\376A\266\t\302A\333\312XB\305\246\215B\010\316\241B\303\342\215B\363\"\257B\033p\272B\033\203\274B\203\262\274B\362\242\275B\226\037\304B*\341\304BK\234\306B\275\364\306BS?<B\214D\363A\014\322\334A[\354\255A\347F\022B\254\341\255A\033\365IA\367\032AB\247\0171B\274N\304A\342\223BBZ\017\374A0\271tAU\3154A\347\352\205B\324\277\227B^\177\237B*\003\220B\331\232\251B8\r\263B\036\245\273B*\311\274B\271k\300BX\246\205B\236v\225Bup\245B\3413\255B\312\205\267B\026\313\212B\223yNB\3377DB;\030\215B^\374EBQ\210\226B\237\220\014BT;[B\300z\213B=\312bB\362\024\221Bh{\254B3N\265B\247\007\244B\213<uB\377\3064B<\'\212BIj\243B\317\373\250B2<\252B\251$\261Bw\372\265B\366fKB\310\275\246A8\245\207AS\276?Au\222\212B\313\234\234B\241\354lBu\321\332A\001\322\212A7*\206A\336\301WB\205Q#B\316\217\214B\300\020\241BAl\242B;_\262B\025\264\266B\270\202\275B\227\245\276B\256\216\260B\331\307\272B\347\300\037B>\'\024B\372\232\333AU\271kB\267\256lB\301\241\200BZ\t\227B\203=\256A\"\021GB\360\261\224B\265S\212B]\220FByKcB|\252\204B\355\256\256A\3333\365@\262d\237@\013b\250A\377J^A_\334:B/b\010Ba\253\177A\031\343gAD\246NA1fdB\366\204\233BN\014\243B\310\217\261B\242\366\265B\017\367\266B\354a\276Bp\027\300B\260\260\222B\342\371\226B\326\272\245B\202\322\265B>\010\235Bz\270\236Bk\241\256B\254\340\273B\022\220\034B\033\251\231B\355;\236B\0062\245B\004\271\245BM\033xBw\036IBe\334\327A\305\364hAJ\334\004AxnEB\212\244\211Bp/NB\236cxBN\223hB\023\334\313A\351\005(B\324\211\000B\002\257\204APGFB\307>\207B\237\261\241BS\324\254B\321\266\245B\372\236,B\251\330\211A\273\231\202A\340\236\\B\214\000\363A\361\200\207AkM\332A@--B\037\267\216B3\232\230B@r\240BX\310\255B8\246\232B\'\373\236B\333o\027B\320\215\031BE-\214B\340t\230BJ\365\241BR\357\242B\251\nCB\224\234\323A\271H\374A\003\037\202B\027\375=B\354\313\244B\232\252\260B\031>lB\261\375\344A%\255\375A\366\371WB\n\235\031B\'{\200B6!\225B6N\244B\223J\264BB\007\265BAD\273B\315\300\276B\261\233\277B\251\345\277BJw\302B\214\001\306B\302\026\307B\322F\307B\351?\253B"
      }
    }
  }
}
node {
  name: "Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\273y!B\201)\025B\035/\024B\035\346\017B\301\260\024B\251r9B\210\031MB?UCB\341^3B\263\376EBG\312@BpA>B\270\0063BA\024\\Bi\341sB\003 yB\344\346[B\313\364!B\030\314\024B\247\310\nB\220\031\'B\275\033\nB\347\177\357A\210\003\322An\311%B\242|1B\2743\"B\266\266\026B\217\"\374A\376RGB\031\322=B\352\210:BK0cB\312\265dB\032\033VB0\207LBA\3259B\226\0349B\367\376nB\367s{B\300ozB\257\242}B\370\230\201B\343\013oB\303\306^B#5_B\013>4B\225\244%BF\250\'B\023\005dB\247\302lB\264\211\204B\235\354\200B\352\036pB\272\246rB>\341zBt\225\203B\341G\210B\311[}B\331\016zBm:\207B2\311\220Bc\277\207B/\250\212B\272\345pBG\336ZB\270\346JB\231;cB\n7mBS_}B(\221\206B\365\343\211B\234\252\220B3\000nBK\370DBIP6B\'=\034B\236\344\037B\037\2404B\255\215LBi\017UB%\3420B0\252#B t!B\022SSBm\276\035Bu\016\017B\0168\tB\227Q\352A\033\301\347A\251\266\025B\266V$B\330\204 B\317C\004B\377z\002B9\303\301A\3620\273A)B\262A\014\224\363A\332\203\256Aa\322\226A\003\246\247A\217\035\237A\010\034\226A\335\272\205A\037VuA{f\275A\363\372\256A\\\t\237A\3225\217A\325n\205As\\NA%F\337A\317&#B_\3661B\222\2545B\203\236EB\206\277dBc\276<B\204&1B\255\376\032B1\0233BW\310]B7\340TB *AB\242\245/B-\256TB\274\027hB\247|PB\371\237cB\001\316|B\n\010kB\353\224XBneaBO\263mB\020\206UBma5B:\3219B\304\253@B\277g\\B\352\034CBN\3628B\004\227MB\010\260jB\260;ZB)+QB\304H<B\277,\017BA\333\375A\261,8B\230*\034B\307V\023B\204\315\036B\177>4BV\001\010B\023\353\364A\240i\316A\010\266\337A\211\246PB9\2461B/\247\033B\244\321\025B\341~)B\315\217(B&\257\351A\205\220\371A\327T\rB\353\\\360A_\026\345A\330w\231A\211\234\213A\360\rlA3\314;Aq0\026A\257\313\002BL\301\033B\237t\362A\257\256\354A\027\016\rB[/\"B\256S\036B`\312\004B\304\225\375A\324\215\343A\303\360\330Am\234\034B\334Y5B\\v=BPjGBF\231IB\236Q[B\370\031JB\317\224#Bf\317)Ba4,B\010\352\026Bb\373\377A\004\357\023B\223\306\024B\3360\006B\370\201\001B1H\337A6\375\246A\364[\271A#\366#B\362\2362B\177\343BB\300PTB\371\204&BP\230*B\342\335;BPz8B;\267=Bu\274cB\260\276`B\2464`B\340\202OB\246\203CB\3659CBL\177eB\372RjB\255UUB~\237JB{T1Bw\271+B\343\032*B:>3B\2469-BneMB\311\374gBf\235\200B\250\202\204B\211l\210B\372\306^B\243\357VB\230\3615B\037[%B\340R B\276j\377A:\032\362A\304*\016BD/\340Ao\240\006B\272\244\003B@z\002Bhx#B\242\322+B\2770^B\035\001BB\217\222$BEP\026B\353E+BC.4B\003\247\037B\337\247[B3\225dB\345\200:B\312\275/B\2255)BN\2050B\234\355\014BW\234\375A\215\211\367A\333\031\330A\330\374\300A\\)\354A\241=\371A\016n\370A\344\262\302As\023\227A:\364\210AU\356\302A\206\306\244A\277\273\232A\366\321\227A-Y\016B\234\314)B\013\014EB\276yZBW\225bBG\322lB\232\267\201Bh\006\203B\244u\\Bk\274\201Bu\300\202B\210\352\201B\351}\211B\260\221\201B\007\037NBW\374[BjFaB\251\322\200Bo3\204B\330\271\200B\317\354dBn\201jB\216_\206B\236\376\207B\210u|B\201\327|By\351\206Bfv\213B\363\320bB{\021]B\364\314gB\023\312cBG\324~BBqtB_3hB\336\204\201Bb\220\204B\222\374\201Bj\233\221B\343\232\223B!\210\231B3\023\226B\315\243\233B\334\304\212B\002P\202B\331/VB\367\331[B\007\377QB\333EnB\350\266}BW\370{B\273\313DB\266\010HB\333\320`BZ\311^B\376\344aB\001\324\202Bv\025\221B\356\031\223BF\335\177B\003\307\204B\232p\210B\'I\177B^\340\203B{\300\177B\362!\207Bs*\177BE*MB\260/6B\\\247(B\336\3216BZ\r8B7#\010B\216\301\375A\320\006\035B\200\3359B\3074GB\213\001VB\347\371MB\020E[B\336\014(B\024\362\020B\331\250\002B\220k\357A\265\266\005B\215M\375A\323\375+BmaHBnFsBhg\201BM2\205B\217D\213Bg\034\216B\374\251\217B\273(\231B\n\374\233B\352\016\236B\226\350\230B\204\264\224B\265\361\235B\254\323\232B$\251\241B\311k\243B\221\273\237B\272i\233Bgx\242B\344\032\231B\341\351\204BC\261\213B\377f\220B\203U\206B\374\254@B4INB\342\010\\B\033\026wBY\"\213B\236,\217B\323\037\221B\302\226\212B\t\t\211B\357\034\215B\307alB\354`IBC2+B\301\3766B8\241WB\006\262qBM]\177Bf\014\206BB\000\212B\3352\207BI\270\216B@n\227B\357C\232B\207\342\217B(l\210B\215\026\216B\3743\210B\016\357^B\232\232GB\305\222gBA\304oBE\351XBX\006-By\r\022Bw\2051B\0265YB\303-\\B2}nB\257\030vB\356j\201B\033\021wB\312\240\207B\262\214\214B|\271\202B\315\367\210BUp\204B\261\230zBEXxB\224\302jB\312(KB(\235.B\341Z\nB\313w-B\377G\rBH\214\010BL\265\nB\300\373+B\362\374JB\353\374VB\275!\201B\345\355\204BGS\212B\002k|B\250\036}B\006\021\214B\233\027\214B\3144\214B\346\234qB\020{ZB\307\r\177B\232ntB\233\340~B\377@GB\354\364GB\0324qBNjtByOfB\"\353jBM$dB\222\370@B\016\243<B\200\246[BI\314cB\014\342tB\340\002kB\301SqB^\215AB\270\2732Br\224]B\333\207iB\240hmBl\373zB$\220\201B\000\016\202B\3170vB0NZB\362LwBo|\204B\317\222\210BA\373\212B\236\300\217B\347\226\224B\2201qB\304\217\201B$N\210B\317xdB\303\260xB\217gWB\200\342.B7\345\365A\346\033\361A\034|\350AB\267\341An\033\320A\256~\267A\0304\337AU=(B\250\372\'B\227$\345A\356\333\303A%s\332A\t\366\013B\273a\006B\350\240\034B\221\335\034BD\020NB3\361eB\223\374qB\002\347xB$\216|B\266\321XB\217\021cBW\343SB/rcB\022\035}B\266;\205B\340v\206B\265%\207B\323\333\224B\322\371\227BE8\231BO\323\234B\327w\236B\200\320\241B\265-\230BU\036\240B\231\362\245B\377\263\244B\317\241\217B\0170\216B\232\267\227B\270\360\211Bk\266\217B\371z\204B\302\263\212Bo=\215B\337\017\203B\332\207\214B\275\202\225By\006\231B\017\033\216B9\030\214B\372\253\226B\024Z\233B\003\355\225B\227\032\241B5i\244B$\215zB0\317iB~\277\203B\371Q\204BN\224\177Bg\270\213B\352)\215B\273\322BB\364\230;B\305FgB\320\355EBb TB\304\177\037B\351\234\016B\007\343\252AR|\250A\220E.B!L0B5\312@B.\3268B\221\253\027B\"\177\020B[\034\016B\244\037\367A\235\033\274A\351\374\266A\376\334\305A\324\217\254A\213x\347A!\005$BA\347\035B]\251\014B\261\302#B%\3547B\375\374\020B\326i\002B\227\370\000B\330\374\016Bu\251.B\253\246AB4\004PB\205\322eBG\256lBc9lB\242\314iB\021\347jB=\363CB\322\206-B\331=\023B)b\021B\303\363\020B,>\323A\271\222\264AD\322\236A\243\377\235AJ\315\313A\241\030#B\341\014GB\272\255VB\221-ZB\252\265wBj\362vB*\266pB\211\367BBE\236:BXcHB\211\243GB\013\201lB\336\346yB\372\260\206B\3074\212B\361\365~B\r\030pB\201\236aBK\205\206BOv\204B\240=\210BC\334\205B\274WtB\372\003\203Bb_qB\267\344-BM\002\026B\027\370\027B\3522\017B\325\000=B\302\345>B3\210\037B1\232\017Bci\025B\366\257\351A\236\243\346A?\267\351A\262\355\007B\257\264\003B\366\007\360A\363\200MBD\343gBsx\200B\263\255mB\211\346uB\216*\201B\033H\203B5G\215B\016\321\215Bg{\216B\0104\217B\341\320\211B\300%\224B\211/\227B\257,\214B\262\246rB\365\257\212B0\326\212Br\365\206B\225\327\210B\366F\211B\310\354\211B\277\000qB\256\244\216B\320~\221B\360\276\216B\313\257\223B\377\226\226B\247\024\227B\275Z\242B\365\032\222B:@\224B\240\025\231B\301\026rBH\030\204B?\326\210B\035\215\212B\225_\222B\323K\204B\334\'tB\256\242\177B\250\225~Bf\263\203B\367\277\215Bk.\216B?Z\241B0\247\247B\"b\241B\352\240\224B:\010\216B\r-\207B\243\224`B\t\226^B\364\025\035B(5\031BwuQB\3645SB\026YKB\204V%B6\340PB\020/<B\241\3572BX\256*B*ojBSN\201B\032\356\205B\032\260\206B\210s\212B\245\354\206B\r\307\214B\235/\222B\236 \226B\016b\225Bv\222\212B-\254\214B\035\217\204B\214\234\210B\310\241\221B\324\032\226B\027\213\222B\2641\220B\324\320\223B\206\377\226B)\240\216BP\363\210B\212,\231B\370\350\231BQ\277\236B3;\240B#\310\217B\233U\206B\255U\220B\334p\233BA\266\234B\323:\242B\251}\246B\312\002\211B\303\000kB\034\n\201B>\023\205B\220\223\204B(\266\217B\266\247\222B\343\361[B\234\213VBa\004\207B\005\013\211B\256X\206B[Z\213B]%\226B$f\231B\274O\225BM\034\221B\316g\230B\277\201\235B\307?\220B\354\263\230B-\231\233B]1\237B\267\261dB;\2264BS\330)B\000\314RB\206\254hB\361\242HB\253\2666B\335;fB\001\355VB\247\222CB=TNB\250\205OBi\305 B\362\314\'B\233F\031B\223\307\365A\322\027\317Ap\007\nBL\013\022B\306/<B\312\3607BD#5B\236mTB~\360eB\274\305cB\324\253fB\307\013\202B\341I\200B\3568\206B\326m\206B\325.\207B77\212Bk\363\202B\267\301wB\014\252dB\201\2002BO\3364B\350:(B\241\373IB\000\273\036B23-B;\240nB\236\315yBR\211yB\223@\210Bm^\217B\317R\224Bio\227B\310p\230B\310\236\204B\207VjBclDB\3741XB\2639[BXYxB3\325SBsxRB&\333GB\t\270/B\257+\033Bf\224BB\301\321UB^\376?B\rM\023B\265l\023B%\340\027B\026\267)B\304\034FB\344\372fBM,4B\354_\031BG\270\006B\0202\347AW\\\343A:\322\316A\251G\001B\3606\330AW\233\320Am\010!B\261|\004BS\275\372AK4\373A\332\231\005B\003\3337B\235\1779B\004\337\032B\\\317\021B/\366\037BanLB\270\365hB\267\020\177BY\241\213B\037\314\216B\355u\216B\2632\230B\010\341\210B\201\224YB\022\014PB3cWB\325\233EB\016\035EB=9.BV\250ZB\346\235cB\3203{B\270\264\200B\332\377pB%\reB\261O-B:S\"B\024\315\tB<\243\006B\326\204\307A\332\250\260A\017\027yA\\]SA\337\224\023A\346\3013AS\030 A\247)\306AL\276\006B\007\337#B:\351\035B\336L#B{\371\371At\030\332Aq\025\327A\2661\013B\275E-B-\262*B\264\325%B\362\337VB\257\225`B\316%nB\270\340cBt)9B{\317\034B*\302IB\305\317HB\235\346(B\210\231\037B\262\2615B\355\006JB<\237^B\267$dB6yQB\252\336ZB\204\0044B\342K\003B\0137\nB\326\335&BrNHB\334u5B1\0002BS\236\035BW$\006B1\200\002B8V,B%\311DBT+JB\006ViB\235snBR\375|B\270\"oB\336\317\200B\000dnB\243(wBK\026uB\255\330lB\267\342\203B\233\327\212B\361\346xB\243\307zB\007\001\221B\314\263\221B\256a\177B\014\363CB\253\005TB\000FfB\235\320`B\250&gB\002gxBKbHB<`JB_\376fB\034\345^B\333d]B\263\251KB\177\362*B\245M%B>\315\007BL\323\004B\321\000\345A[q\330A\'Z%B\234|0B\\i]BoSoB\305JsBC\034}B\"3~B+\372|B\365!YB3|hBd\027LB\217\201DB\235\207)B\200r1B;\261(B\3573\027B\272\235AB\251\002SBX\375fB\365VwB\376\275|By\332bB;liBM\tjB\374 \205B\022\024\200B0c\201B=\346\202B\006\034\204B@\225\217B\306\201\213B\325h\215B\033\344}B\210\306\210B\301\347\216B\003\255\226BA\352\230B\207\366\230B<\233\216B\2228\226B\270y\227B\016\324\211B=,sBf\271~B+{\214B\274\013\215Bw\350\232B\203\311\231B\336x\233B\325\256\236B\004\244\240Bv\354\206B\233\002\221B\371\255\211B\313l\211Bp\177\220B\252L\230B>\370\231B\017H\216Bt3\220Bf*\227B\005>\224B\210s\232B\026!\225B\313\252\230Bm\"\222B\300\326xB\306\274%B\252\207@B\262\375jB\307\271{B\321\365xB\266$\220BQ!\224B\207\234\227B&\341\223B\243\336\227B\217?\213B{\222\213Be!eB#VjB\203\254\213B=z\214B\224\354sBE\317_BhnrB3\324\202B\\<zB\252\241JB\350\227GBW*\'B\304\314\374A;\250\rBD\3601B\362\303$B\260?\033B\225\032GB\'|FB0\2053B\030\013;B\201/\023B\3222*By?WB\212\207gB5\264rB\265\231dB\331\334uB\025GcB\267\320SB\265\276&B\001\316\030B\020n\007B\004#\377A\366\264\023B\327\030\rB\216\377\352A\275\210\323Ap\020\311A%*\235A\001\216\206A\371\r\322AJ\270\007B\016]\372A3\031\023B\276\270\022B7D)Bgd\033B\002B\tB^z\320Al\222\263A\362*\344AZE6B=\304LB[\316MB\234zIB\260\253JB\222OJB\307\037_B!\036oB\266\370uB\332\345\207B\n\353\204B\010\363OB\273\366HB\265\241\035B\200\341\'B\255!FBq\2649B\274\360|BM\367\201BF\351\207B\027\014\206B\233\237`B\215J\\B\375\030OB>=?B\352\3730B\2403[B\245\026`B\375:jB\255Q\200BJy\206B\224\216kB\237\233CB\363\225-B\350\215*B\340\275ZB\356\026|B\350\232\203B\205\000vB`\001qBFIPB\325-sBsT\202Bf\212\206B\342\014\205B|\315\206Br0\206B.\205\206B\326X\211Bl\331\211B8+\221B\235=\225B+I\222B\321N\223B\355b\206B\207\264eB\224bpB\325\312~Bp\307qB\024guB\207\364EB\014\265\\Bx\264QB3>WB\230\372\212B\235\376\224B\341\306\213B,<\215B\020\260\220B\256\273\235B\231\003\246B\002\222\230B\226\000\224B8\237\225B\233J\214B\274\373\205B\316\327qBR\323RB\261\304\'B\327\313FB\254j;B\025iQBS\362JB\256\337WB\250\303vB\315\273\177B}8eB\003\203ABy\341\"B(\344(B_Q\031B\214\372.B\274\277_BK\232pB\301[mB\017\3743B\256\336\037B\313\343\000BG\217\375A\251I\003B\347\205\375AL\277\005B\016\3700B/\265*B\334\325\032B3KFB\270\007\tB\263\210\351A;{\336A\217p\335A\221\354\326A\"\375\256A\206\335\233A\'\343\245AD\365$B8\3036B\222|BB\335\256eB\227\361cB\315\246]B\"\376]B\253\364|B3\222~B\003\272wB\004^aB\r\306aB\332\313mB\200J}B\202\274\201BO\\\216BRE\221BkQvB\007\037XB\327\361xB\031\005\214B\306K\210B\332\274\210B\325YNB\215\332=B#\3661B\366\232\036B\322}\rB\022\3632BUT\203B\230x\204B_Z\207B\332\214\201B^\374wBt\217\200B\023N\207BDO\211B}\342\206B\224\353\206Bl\256\210B7\354\221B\200\030\224B\365\021\232Ba\022\236B\2366\240B\264y\243B\245\223\243B\224\320\246B\234\301\243B\027\345\223B9y\237B\030\033\204B\027,\216B\2145\216B\343\327\207B\321\304\222BzP\223B\244\222\226B\323\240\230B\344\032\226BN\261\225BS\250\237B\363\305|B1\017?B$\n]B\224.5B\271\324\"B\026\300XB\263\204hB\201\372\\B]\002rB\316\345\211B\207q\214B\341_\216Bnj\222B\262:\226B\017\207\224B\037Q\225B\000\247\233B\232\016\210Ba&mB\027a^B \346{B\"\225XB\205xiBw\334dB\242\221yB\273\245sB\313\020\202B\r\357yB\266\001\205B\345+YB\237\236YB\255+6B\253\370WB\255\247rBNg\211B\215\335\220B\352\016\206B\335\201CB\326\375UB\246\3070B\214\312 B-82B\334\254DB\022\377bB\206\036nB\016\245zB\312\'nBZ\023\177B\331h\201B$IkBkO{B\277\374\212B\356\370\217BL\257\223B\234\024\230B\244\003\230Bq\370\230BV\244\232BS\022\243B5;\250B\350\322\242B\031\256\247B\223\312\251BYS\252B\036\266\236B \266vB\036\014oBtF\211B\350\010bBp\235qB\251\313GBc\347<B\334B<B\345\257\024B\350\020\024B\244FRB\005\263]B\010\304=B\034L,B,\240>B=\240DB\211ZUB\210\343lB-bNB\342G\016B\231\202\361A:\001\321A\3708\rB\3445&B\\\214=B@\2442B&\320EB\014\231@B\036\034<B\016\252VBW\240lBT\202|B\n8\200B\357B\212Bb\266\216B\010\304\221B[e\213B\304\021\216Bf\300\222B\347\214\223B\222\361\226B\364V\225B*\346\212B\030\207\206B\003N\205Bw\r\205B\340m\206B\242\004\213B\262^\232B\r\023\234B\0252\234B\373\251\205B\001\223_B_^rB\2164fB`+RBeo`B\244\227UBl\202\006B@\213\362ATv\327A\335g\363Aa?\333A\035\216\022B\337\",B\275\327+BA\024\361A\371\236\344A\303\271\002B\234t\364A\246\262\032B\025\3545B\2722MB9\317FB\306\035oB\277\332\205B?$\211Buc\211Bme\212B\220R\226B{\357\230B+P\242B\360\\\245B\017\\\202B\026/`BH\261YBS\332LB\251\316UB\250|>B\005\212&B\233\211EB\266PABd\242\'B\326t=B\231d)B\006\014\tB\275\320\371A\271\263NB\224\345dB\217\240nB\264\024hB\272\236\200B\007\252\207B\217\265\220B\350\031\222Bh\334\226B}\220\212B\252$\216B\204\234\222BYE\225B\315\000\232B\262\225\221B\227\264\211B\217\226\210B\216\273\215B\366\242\205B\332-\216B\244ZjBIFzB\372\350\204BoO|B\364\326\205B\347O\221B\273<\227BVZ\223BL\013\212B~|\201B\224\336\211BNz\221Bu\221\223B\362\371\223B[!\226B|\326\227B\335\265\212B\335ueB\032\226ZB\332\300JB\031\364|B\267`\206B\347-wB\252m@B\240\254#B\003\371!B[/GB\023\3407B0\230`B\213)wB-\254xB\354z\206BN\033\212B~]\221B\275\312\222B\274\272\220Bi(\226B\203\200uB1\013qB7ebB\215\320vB\265\376vB\3348zB\243!\201B\036\304DB5m]BA\t\200B\203\216zB\362\336eB\033\312kB2\303sB\275\3456B\341@\362A\351\237\310A\302\356\361A&a\321A\375\335\025B\372\002\007B\332i\316A\013\260\307A\331\215\301A[\177\026B \325FB\267XRB<\312lB\326\241vB\227\250xB0b\205B\3020\210B0+\201B\307\'\202B\000\320\205B9\227\214B,\030\211B\255p\211B\276A\215B\302\355\223B?gqB\216\213\216B\277\213\220B\372L\223B\244z\223Bn\266\213Bg\323\206B,*qB1\312RB\003\3376B\360\310XB9<rBUJ^Bv\214iB\004-fBic=B\342\210JB\254W>B\\\230!B;\351@B`\345YB\237\253tB\206\374\201B\254\231\200B\341\234ZB\240\017\"B.>\037B\306bIB\317\000$B{\366\003Bf\343\017BN\256!B\"\030NB\245\301XB\337\362`B\010\037qB\3636kB\232\010nB\276\272OB\303\006PB\310\362gB\363coB\031\216uB\304!vB\205\212eB\377\277OBb\353QB\200\256eB\350\016YB\306\225\201Bs\266\211B\257\254tB\251\\AB~#DB\335\227XB\327BFB>\236aB.\021qB\215\022\177BTu\212Bt\014\213B2=\220B\016\000\224B\013\363\224B\3256\225B#\267\227B\014\350\237B\324~\247Bb\211\251B\375~\243B"
      }
    }
  }
}
node {
  name: "Const_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\273y!B\201)\025B\035/\024B\035\346\017B\301\260\024B\251r9B\210\031MB?UCB\341^3B\263\376EBG\312@BpA>B\270\0063BA\024\\Bi\341sB\003 yB\344\346[B\313\364!B\030\314\024B\247\310\nB\220\031\'B\275\033\nB\347\177\357A\210\003\322An\311%B\242|1B\2743\"B\266\266\026B\217\"\374A\376RGB\031\322=B\352\210:BK0cB\312\265dB\032\033VB0\207LBA\3259B\226\0349B\367\376nB\367s{B\300ozB\257\242}B\370\230\201B\343\013oB\303\306^B#5_B\013>4B\225\244%BF\250\'B\023\005dB\247\302lB\264\211\204B\235\354\200B\352\036pB\272\246rB>\341zBt\225\203B\341G\210B\311[}B\331\016zBm:\207B2\311\220Bc\277\207B/\250\212B\272\345pBG\336ZB\270\346JB\231;cB\n7mBS_}B(\221\206B\365\343\211B\234\252\220B3\000nBK\370DBIP6B\'=\034B\236\344\037B\037\2404B\255\215LBi\017UB%\3420B0\252#B t!B\022SSBm\276\035Bu\016\017B\0168\tB\227Q\352A\033\301\347A\251\266\025B\266V$B\330\204 B\317C\004B\377z\002B9\303\301A\3620\273A)B\262A\014\224\363A\332\203\256Aa\322\226A\003\246\247A\217\035\237A\010\034\226A\335\272\205A\037VuA{f\275A\363\372\256A\\\t\237A\3225\217A\325n\205As\\NA%F\337A\317&#B_\3661B\222\2545B\203\236EB\206\277dBc\276<B\204&1B\255\376\032B1\0233BW\310]B7\340TB *AB\242\245/B-\256TB\274\027hB\247|PB\371\237cB\001\316|B\n\010kB\353\224XBneaBO\263mB\020\206UBma5B:\3219B\304\253@B\277g\\B\352\034CBN\3628B\004\227MB\010\260jB\260;ZB)+QB\304H<B\277,\017BA\333\375A\261,8B\230*\034B\307V\023B\204\315\036B\177>4BV\001\010B\023\353\364A\240i\316A\010\266\337A\211\246PB9\2461B/\247\033B\244\321\025B\341~)B\315\217(B&\257\351A\205\220\371A\327T\rB\353\\\360A_\026\345A\330w\231A\211\234\213A\360\rlA3\314;Aq0\026A\257\313\002BL\301\033B\237t\362A\257\256\354A\027\016\rB[/\"B\256S\036B`\312\004B\304\225\375A\324\215\343A\303\360\330Am\234\034B\334Y5B\\v=BPjGBF\231IB\236Q[B\370\031JB\317\224#Bf\317)Ba4,B\010\352\026Bb\373\377A\004\357\023B\223\306\024B\3360\006B\370\201\001B1H\337A6\375\246A\364[\271A#\366#B\362\2362B\177\343BB\300PTB\371\204&BP\230*B\342\335;BPz8B;\267=Bu\274cB\260\276`B\2464`B\340\202OB\246\203CB\3659CBL\177eB\372RjB\255UUB~\237JB{T1Bw\271+B\343\032*B:>3B\2469-BneMB\311\374gBf\235\200B\250\202\204B\211l\210B\372\306^B\243\357VB\230\3615B\037[%B\340R B\276j\377A:\032\362A\304*\016BD/\340Ao\240\006B\272\244\003B@z\002Bhx#B\242\322+B\2770^B\035\001BB\217\222$BEP\026B\353E+BC.4B\003\247\037B\337\247[B3\225dB\345\200:B\312\275/B\2255)BN\2050B\234\355\014BW\234\375A\215\211\367A\333\031\330A\330\374\300A\\)\354A\241=\371A\016n\370A\344\262\302As\023\227A:\364\210AU\356\302A\206\306\244A\277\273\232A\366\321\227A-Y\016B\234\314)B\013\014EB\276yZBW\225bBG\322lB\232\267\201Bh\006\203B\244u\\Bk\274\201Bu\300\202B\210\352\201B\351}\211B\260\221\201B\007\037NBW\374[BjFaB\251\322\200Bo3\204B\330\271\200B\317\354dBn\201jB\216_\206B\236\376\207B\210u|B\201\327|By\351\206Bfv\213B\363\320bB{\021]B\364\314gB\023\312cBG\324~BBqtB_3hB\336\204\201Bb\220\204B\222\374\201Bj\233\221B\343\232\223B!\210\231B3\023\226B\315\243\233B\334\304\212B\002P\202B\331/VB\367\331[B\007\377QB\333EnB\350\266}BW\370{B\273\313DB\266\010HB\333\320`BZ\311^B\376\344aB\001\324\202Bv\025\221B\356\031\223BF\335\177B\003\307\204B\232p\210B\'I\177B^\340\203B{\300\177B\362!\207Bs*\177BE*MB\260/6B\\\247(B\336\3216BZ\r8B7#\010B\216\301\375A\320\006\035B\200\3359B\3074GB\213\001VB\347\371MB\020E[B\336\014(B\024\362\020B\331\250\002B\220k\357A\265\266\005B\215M\375A\323\375+BmaHBnFsBhg\201BM2\205B\217D\213Bg\034\216B\374\251\217B\273(\231B\n\374\233B\352\016\236B\226\350\230B\204\264\224B\265\361\235B\254\323\232B$\251\241B\311k\243B\221\273\237B\272i\233Bgx\242B\344\032\231B\341\351\204BC\261\213B\377f\220B\203U\206B\374\254@B4INB\342\010\\B\033\026wBY\"\213B\236,\217B\323\037\221B\302\226\212B\t\t\211B\357\034\215B\307alB\354`IBC2+B\301\3766B8\241WB\006\262qBM]\177Bf\014\206BB\000\212B\3352\207BI\270\216B@n\227B\357C\232B\207\342\217B(l\210B\215\026\216B\3743\210B\016\357^B\232\232GB\305\222gBA\304oBE\351XBX\006-By\r\022Bw\2051B\0265YB\303-\\B2}nB\257\030vB\356j\201B\033\021wB\312\240\207B\262\214\214B|\271\202B\315\367\210BUp\204B\261\230zBEXxB\224\302jB\312(KB(\235.B\341Z\nB\313w-B\377G\rBH\214\010BL\265\nB\300\373+B\362\374JB\353\374VB\275!\201B\345\355\204BGS\212B\002k|B\250\036}B\006\021\214B\233\027\214B\3144\214B\346\234qB\020{ZB\307\r\177B\232ntB\233\340~B\377@GB\354\364GB\0324qBNjtByOfB\"\353jBM$dB\222\370@B\016\243<B\200\246[BI\314cB\014\342tB\340\002kB\301SqB^\215AB\270\2732Br\224]B\333\207iB\240hmBl\373zB$\220\201B\000\016\202B\3170vB0NZB\362LwBo|\204B\317\222\210BA\373\212B\236\300\217B\347\226\224B\2201qB\304\217\201B$N\210B\317xdB\303\260xB\217gWB\200\342.B7\345\365A\346\033\361A\034|\350AB\267\341An\033\320A\256~\267A\0304\337AU=(B\250\372\'B\227$\345A\356\333\303A%s\332A\t\366\013B\273a\006B\350\240\034B\221\335\034BD\020NB3\361eB\223\374qB\002\347xB$\216|B\266\321XB\217\021cBW\343SB/rcB\022\035}B\266;\205B\340v\206B\265%\207B\323\333\224B\322\371\227BE8\231BO\323\234B\327w\236B\200\320\241B\265-\230BU\036\240B\231\362\245B\377\263\244B\317\241\217B\0170\216B\232\267\227B\270\360\211Bk\266\217B\371z\204B\302\263\212Bo=\215B\337\017\203B\332\207\214B\275\202\225By\006\231B\017\033\216B9\030\214B\372\253\226B\024Z\233B\003\355\225B\227\032\241B5i\244B$\215zB0\317iB~\277\203B\371Q\204BN\224\177Bg\270\213B\352)\215B\273\322BB\364\230;B\305FgB\320\355EBb TB\304\177\037B\351\234\016B\007\343\252AR|\250A\220E.B!L0B5\312@B.\3268B\221\253\027B\"\177\020B[\034\016B\244\037\367A\235\033\274A\351\374\266A\376\334\305A\324\217\254A\213x\347A!\005$BA\347\035B]\251\014B\261\302#B%\3547B\375\374\020B\326i\002B\227\370\000B\330\374\016Bu\251.B\253\246AB4\004PB\205\322eBG\256lBc9lB\242\314iB\021\347jB=\363CB\322\206-B\331=\023B)b\021B\303\363\020B,>\323A\271\222\264AD\322\236A\243\377\235AJ\315\313A\241\030#B\341\014GB\272\255VB\221-ZB\252\265wBj\362vB*\266pB\211\367BBE\236:BXcHB\211\243GB\013\201lB\336\346yB\372\260\206B\3074\212B\361\365~B\r\030pB\201\236aBK\205\206BOv\204B\240=\210BC\334\205B\274WtB\372\003\203Bb_qB\267\344-BM\002\026B\027\370\027B\3522\017B\325\000=B\302\345>B3\210\037B1\232\017Bci\025B\366\257\351A\236\243\346A?\267\351A\262\355\007B\257\264\003B\366\007\360A\363\200MBD\343gBsx\200B\263\255mB\211\346uB\216*\201B\033H\203B5G\215B\016\321\215Bg{\216B\0104\217B\341\320\211B\300%\224B\211/\227B\257,\214B\262\246rB\365\257\212B0\326\212Br\365\206B\225\327\210B\366F\211B\310\354\211B\277\000qB\256\244\216B\320~\221B\360\276\216B\313\257\223B\377\226\226B\247\024\227B\275Z\242B\365\032\222B:@\224B\240\025\231B\301\026rBH\030\204B?\326\210B\035\215\212B\225_\222B\323K\204B\334\'tB\256\242\177B\250\225~Bf\263\203B\367\277\215Bk.\216B?Z\241B0\247\247B\"b\241B\352\240\224B:\010\216B\r-\207B\243\224`B\t\226^B\364\025\035B(5\031BwuQB\3645SB\026YKB\204V%B6\340PB\020/<B\241\3572BX\256*B*ojBSN\201B\032\356\205B\032\260\206B\210s\212B\245\354\206B\r\307\214B\235/\222B\236 \226B\016b\225Bv\222\212B-\254\214B\035\217\204B\214\234\210B\310\241\221B\324\032\226B\027\213\222B\2641\220B\324\320\223B\206\377\226B)\240\216BP\363\210B\212,\231B\370\350\231BQ\277\236B3;\240B#\310\217B\233U\206B\255U\220B\334p\233BA\266\234B\323:\242B\251}\246B\312\002\211B\303\000kB\034\n\201B>\023\205B\220\223\204B(\266\217B\266\247\222B\343\361[B\234\213VBa\004\207B\005\013\211B\256X\206B[Z\213B]%\226B$f\231B\274O\225BM\034\221B\316g\230B\277\201\235B\307?\220B\354\263\230B-\231\233B]1\237B\267\261dB;\2264BS\330)B\000\314RB\206\254hB\361\242HB\253\2666B\335;fB\001\355VB\247\222CB=TNB\250\205OBi\305 B\362\314\'B\233F\031B\223\307\365A\322\027\317Ap\007\nBL\013\022B\306/<B\312\3607BD#5B\236mTB~\360eB\274\305cB\324\253fB\307\013\202B\341I\200B\3568\206B\326m\206B\325.\207B77\212Bk\363\202B\267\301wB\014\252dB\201\2002BO\3364B\350:(B\241\373IB\000\273\036B23-B;\240nB\236\315yBR\211yB\223@\210Bm^\217B\317R\224Bio\227B\310p\230B\310\236\204B\207VjBclDB\3741XB\2639[BXYxB3\325SBsxRB&\333GB\t\270/B\257+\033Bf\224BB\301\321UB^\376?B\rM\023B\265l\023B%\340\027B\026\267)B\304\034FB\344\372fBM,4B\354_\031BG\270\006B\0202\347AW\\\343A:\322\316A\251G\001B\3606\330AW\233\320Am\010!B\261|\004BS\275\372AK4\373A\332\231\005B\003\3337B\235\1779B\004\337\032B\\\317\021B/\366\037BanLB\270\365hB\267\020\177BY\241\213B\037\314\216B\355u\216B\2632\230B\010\341\210B\201\224YB\022\014PB3cWB\325\233EB\016\035EB=9.BV\250ZB\346\235cB\3203{B\270\264\200B\332\377pB%\reB\261O-B:S\"B\024\315\tB<\243\006B\326\204\307A\332\250\260A\017\027yA\\]SA\337\224\023A\346\3013AS\030 A\247)\306AL\276\006B\007\337#B:\351\035B\336L#B{\371\371At\030\332Aq\025\327A\2661\013B\275E-B-\262*B\264\325%B\362\337VB\257\225`B\316%nB\270\340cBt)9B{\317\034B*\302IB\305\317HB\235\346(B\210\231\037B\262\2615B\355\006JB<\237^B\267$dB6yQB\252\336ZB\204\0044B\342K\003B\0137\nB\326\335&BrNHB\334u5B1\0002BS\236\035BW$\006B1\200\002B8V,B%\311DBT+JB\006ViB\235snBR\375|B\270\"oB\336\317\200B\000dnB\243(wBK\026uB\255\330lB\267\342\203B\233\327\212B\361\346xB\243\307zB\007\001\221B\314\263\221B\256a\177B\014\363CB\253\005TB\000FfB\235\320`B\250&gB\002gxBKbHB<`JB_\376fB\034\345^B\333d]B\263\251KB\177\362*B\245M%B>\315\007BL\323\004B\321\000\345A[q\330A\'Z%B\234|0B\\i]BoSoB\305JsBC\034}B\"3~B+\372|B\365!YB3|hBd\027LB\217\201DB\235\207)B\200r1B;\261(B\3573\027B\272\235AB\251\002SBX\375fB\365VwB\376\275|By\332bB;liBM\tjB\374 \205B\022\024\200B0c\201B=\346\202B\006\034\204B@\225\217B\306\201\213B\325h\215B\033\344}B\210\306\210B\301\347\216B\003\255\226BA\352\230B\207\366\230B<\233\216B\2228\226B\270y\227B\016\324\211B=,sBf\271~B+{\214B\274\013\215Bw\350\232B\203\311\231B\336x\233B\325\256\236B\004\244\240Bv\354\206B\233\002\221B\371\255\211B\313l\211Bp\177\220B\252L\230B>\370\231B\017H\216Bt3\220Bf*\227B\005>\224B\210s\232B\026!\225B\313\252\230Bm\"\222B\300\326xB\306\274%B\252\207@B\262\375jB\307\271{B\321\365xB\266$\220BQ!\224B\207\234\227B&\341\223B\243\336\227B\217?\213B{\222\213Be!eB#VjB\203\254\213B=z\214B\224\354sBE\317_BhnrB3\324\202B\\<zB\252\241JB\350\227GBW*\'B\304\314\374A;\250\rBD\3601B\362\303$B\260?\033B\225\032GB\'|FB0\2053B\030\013;B\201/\023B\3222*By?WB\212\207gB5\264rB\265\231dB\331\334uB\025GcB\267\320SB\265\276&B\001\316\030B\020n\007B\004#\377A\366\264\023B\327\030\rB\216\377\352A\275\210\323Ap\020\311A%*\235A\001\216\206A\371\r\322AJ\270\007B\016]\372A3\031\023B\276\270\022B7D)Bgd\033B\002B\tB^z\320Al\222\263A\362*\344AZE6B=\304LB[\316MB\234zIB\260\253JB\222OJB\307\037_B!\036oB\266\370uB\332\345\207B\n\353\204B\010\363OB\273\366HB\265\241\035B\200\341\'B\255!FBq\2649B\274\360|BM\367\201BF\351\207B\027\014\206B\233\237`B\215J\\B\375\030OB>=?B\352\3730B\2403[B\245\026`B\375:jB\255Q\200BJy\206B\224\216kB\237\233CB\363\225-B\350\215*B\340\275ZB\356\026|B\350\232\203B\205\000vB`\001qBFIPB\325-sBsT\202Bf\212\206B\342\014\205B|\315\206Br0\206B.\205\206B\326X\211Bl\331\211B8+\221B\235=\225B+I\222B\321N\223B\355b\206B\207\264eB\224bpB\325\312~Bp\307qB\024guB\207\364EB\014\265\\Bx\264QB3>WB\230\372\212B\235\376\224B\341\306\213B,<\215B\020\260\220B\256\273\235B\231\003\246B\002\222\230B\226\000\224B8\237\225B\233J\214B\274\373\205B\316\327qBR\323RB\261\304\'B\327\313FB\254j;B\025iQBS\362JB\256\337WB\250\303vB\315\273\177B}8eB\003\203ABy\341\"B(\344(B_Q\031B\214\372.B\274\277_BK\232pB\301[mB\017\3743B\256\336\037B\313\343\000BG\217\375A\251I\003B\347\205\375AL\277\005B\016\3700B/\265*B\334\325\032B3KFB\270\007\tB\263\210\351A;{\336A\217p\335A\221\354\326A\"\375\256A\206\335\233A\'\343\245AD\365$B8\3036B\222|BB\335\256eB\227\361cB\315\246]B\"\376]B\253\364|B3\222~B\003\272wB\004^aB\r\306aB\332\313mB\200J}B\202\274\201BO\\\216BRE\221BkQvB\007\037XB\327\361xB\031\005\214B\306K\210B\332\274\210B\325YNB\215\332=B#\3661B\366\232\036B\322}\rB\022\3632BUT\203B\230x\204B_Z\207B\332\214\201B^\374wBt\217\200B\023N\207BDO\211B}\342\206B\224\353\206Bl\256\210B7\354\221B\200\030\224B\365\021\232Ba\022\236B\2366\240B\264y\243B\245\223\243B\224\320\246B\234\301\243B\027\345\223B9y\237B\030\033\204B\027,\216B\2145\216B\343\327\207B\321\304\222BzP\223B\244\222\226B\323\240\230B\344\032\226BN\261\225BS\250\237B\363\305|B1\017?B$\n]B\224.5B\271\324\"B\026\300XB\263\204hB\201\372\\B]\002rB\316\345\211B\207q\214B\341_\216Bnj\222B\262:\226B\017\207\224B\037Q\225B\000\247\233B\232\016\210Ba&mB\027a^B \346{B\"\225XB\205xiBw\334dB\242\221yB\273\245sB\313\020\202B\r\357yB\266\001\205B\345+YB\237\236YB\255+6B\253\370WB\255\247rBNg\211B\215\335\220B\352\016\206B\335\201CB\326\375UB\246\3070B\214\312 B-82B\334\254DB\022\377bB\206\036nB\016\245zB\312\'nBZ\023\177B\331h\201B$IkBkO{B\277\374\212B\356\370\217BL\257\223B\234\024\230B\244\003\230Bq\370\230BV\244\232BS\022\243B5;\250B\350\322\242B\031\256\247B\223\312\251BYS\252B\036\266\236B \266vB\036\014oBtF\211B\350\010bBp\235qB\251\313GBc\347<B\334B<B\345\257\024B\350\020\024B\244FRB\005\263]B\010\304=B\034L,B,\240>B=\240DB\211ZUB\210\343lB-bNB\342G\016B\231\202\361A:\001\321A\3708\rB\3445&B\\\214=B@\2442B&\320EB\014\231@B\036\034<B\016\252VBW\240lBT\202|B\n8\200B\357B\212Bb\266\216B\010\304\221B[e\213B\304\021\216Bf\300\222B\347\214\223B\222\361\226B\364V\225B*\346\212B\030\207\206B\003N\205Bw\r\205B\340m\206B\242\004\213B\262^\232B\r\023\234B\0252\234B\373\251\205B\001\223_B_^rB\2164fB`+RBeo`B\244\227UBl\202\006B@\213\362ATv\327A\335g\363Aa?\333A\035\216\022B\337\",B\275\327+BA\024\361A\371\236\344A\303\271\002B\234t\364A\246\262\032B\025\3545B\2722MB9\317FB\306\035oB\277\332\205B?$\211Buc\211Bme\212B\220R\226B{\357\230B+P\242B\360\\\245B\017\\\202B\026/`BH\261YBS\332LB\251\316UB\250|>B\005\212&B\233\211EB\266PABd\242\'B\326t=B\231d)B\006\014\tB\275\320\371A\271\263NB\224\345dB\217\240nB\264\024hB\272\236\200B\007\252\207B\217\265\220B\350\031\222Bh\334\226B}\220\212B\252$\216B\204\234\222BYE\225B\315\000\232B\262\225\221B\227\264\211B\217\226\210B\216\273\215B\366\242\205B\332-\216B\244ZjBIFzB\372\350\204BoO|B\364\326\205B\347O\221B\273<\227BVZ\223BL\013\212B~|\201B\224\336\211BNz\221Bu\221\223B\362\371\223B[!\226B|\326\227B\335\265\212B\335ueB\032\226ZB\332\300JB\031\364|B\267`\206B\347-wB\252m@B\240\254#B\003\371!B[/GB\023\3407B0\230`B\213)wB-\254xB\354z\206BN\033\212B~]\221B\275\312\222B\274\272\220Bi(\226B\203\200uB1\013qB7ebB\215\320vB\265\376vB\3348zB\243!\201B\036\304DB5m]BA\t\200B\203\216zB\362\336eB\033\312kB2\303sB\275\3456B\341@\362A\351\237\310A\302\356\361A&a\321A\375\335\025B\372\002\007B\332i\316A\013\260\307A\331\215\301A[\177\026B \325FB\267XRB<\312lB\326\241vB\227\250xB0b\205B\3020\210B0+\201B\307\'\202B\000\320\205B9\227\214B,\030\211B\255p\211B\276A\215B\302\355\223B?gqB\216\213\216B\277\213\220B\372L\223B\244z\223Bn\266\213Bg\323\206B,*qB1\312RB\003\3376B\360\310XB9<rBUJ^Bv\214iB\004-fBic=B\342\210JB\254W>B\\\230!B;\351@B`\345YB\237\253tB\206\374\201B\254\231\200B\341\234ZB\240\017\"B.>\037B\306bIB\317\000$B{\366\003Bf\343\017BN\256!B\"\030NB\245\301XB\337\362`B\010\037qB\3636kB\232\010nB\276\272OB\303\006PB\310\362gB\363coB\031\216uB\304!vB\205\212eB\377\277OBb\353QB\200\256eB\350\016YB\306\225\201Bs\266\211B\257\254tB\251\\AB~#DB\335\227XB\327BFB>\236aB.\021qB\215\022\177BTu\212Bt\014\213B2=\220B\016\000\224B\013\363\224B\3256\225B#\267\227B\014\350\237B\324~\247Bb\211\251B\375~\243B"
      }
    }
  }
}
node {
  name: "Const_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\351\317!B\364\276\020B _\017B`)\tBK\320\020BK\237HB\350\336cB.QSB\353\3638B\302\244TBs\324KBonGB\234\3713B\300crBe\254\210B\306\355\213Bu\235fBf\177\023B \340\002B\255\334\354Aau!B\277]\366A\311\362\311ABL\250A\214?)B0\3118B\210\n#B\270\367\022BU\235\344Ad\'TB\216\305FB\"\006BB\334avBdExBV\262aB\242\355RB\356\2626Be\2345B\341\r\201B&\323\210B\031\001\210B|\034\212B\353\322\215B\"\335xB\302\001^B\006\272^B\027J\035BZ\322\tB2k\rB\2270mBMEyB\335\372\216B\'O\211B\003\312vB\206\202zBv[\203BO*\214B\353\231\222B-Y\202B\367!\177BI\001\217BL\243\233B\337\330\214B\376\003\221B\355\223hB%\231HB\001n2B\332\372ZB\340\300jB\352\246\201BY\331\214BXd\221B\360G\232B\321\241fB(\337/B%\216\035B\330\013\375Aki\004Bm\313%B\316zJB\232)WB\217e#Bk\336\021B.\353\016Be`ZBp\203\021B\305\336\376A\237\210\360AR\303\300A\205\304\275Ar\020\022Bvi\'BP\232!B\324 \362A\302E\355A\217\361\231A0\223\222ALq\210A\317\371\354A3.\224A\020RsA\332\301\221A\221P\207A@\226xA\026\304QA\221\2738A\220\341\300A\302|\253A\225\257\224AjO~A\200\264dA\313J\035AZ\227\365A\324\332;B\003\273MB-KRB\201\014fB\3513\205B\370oKBF&:BM$\032B1\221;BjjrB\335\372dBg{GB\212\035.B\315\naB\335\354yB:\336VB\231\202pB\226&\210B\215\256uBs\201ZB\266\036gB\035\216xBJ\257SB\024\200&Bt|-B7\2038B:&cB\027\025=B&b.B\212\217NB\370;xB<\327^B\240\367PB\376\3501Bxj\356A\312-\311A\032\2177BB\371\022Bh\307\007Bqm\030BYC7B4\346\367AE\371\326A\222s\252A.\214\303AX\364`Bu\3656Bn5\032B\354\231\022B\"W-Bx\377+Bs\021\320A1K\346A\241\247\nB\3015\335A\277\303\316A>epATTTA\245\030*AJ\210\374@:\254\275@\002\334\014B\t\244*Bf\374\370A#q\361A\231\004\026Bg\0221B\241B+B\333\361\005BH\013\373A?\024\327A\355\260\310AM\036)B\327\326IBCkTB\317\200aB\254mdB\336\351{B\271\212]B\313\221 Bj\001*B\256\275-B\010\033\rBb\177\333A\2453\rB|\212\016BLA\362A7\357\344A\321\002\265Am\206kA\3332\222Aad/Bg\247BB\354\324WB\226\377mB7\347(B4\220.Bx\265FB\337fAB\205\032IB\230C}Bv;xB\250IwBo\022ZB\263\330EB6[EB\236vzBK\246\200B\222\203\\BJ\221JB\362\377\"B\335\263\032Bu@\030B)\034)B\252+\037B\017LWB\203\350~B\201\322\217BC\202\224B\240#\231B\2128`ByXTB\227\016%Bc-\017BO\241\010B9\307\302A\225\030\264Ak\247\370A\324&\260A\237m\364A\266\216\354A(`\351A@=(B\302\3034B+XyB\273\005MBRP\"B\004\311\016B\345\031-Bd\3449B\205\200\033B1$mB\217=xB\255/;B\260`,B\213M#B\002I.B\231\017\373A\240\003\330A\344\207\320A\343\312\252A\\\326\220A\361\001\324A\220h\350A$9\347A\314\377\236A.)]Ab\312@Ao\301\265A_\177\217A=R\203A\314y\177A\013\231\036Bo\014BB6\216cBx\250|B\311\377\202B\'\346\210BIM\225B\267\261\226B\3115iBN\025\215B\265H\216B\'\361\214B\226G\226B\330`\211B\223\354CB\027\266XB\201\246`B\215&\207Bl\227\213BK\033\206B\366U`B\364\017iB\320\031\215B\225?\217B\037\324\177B\3414\200B\365\335\214B=;\223B0\271VB\271\214NB\352<`B7\027ZBU\217\202B\242\254tB-eaB&\226\205B2\374\211B\242\267\205B\1774\233B\371\252\235B\211\274\244B\317\016\237B\311\355\245B\320-\213B\300\276|BD\027<BH\256EB\26548B\365LgB\371\342~B\2743|B\217\321-B\t&3B\375\353ZB\300\353WB\374\003]BNX\211B9.\233B\232\207\235B\341\246\200BZ\204\207B\332\247\214B\271b~Bk\237\205B\367\236~B\372\214\212B[\362|B\233\3054B\014\214\027B\232\035\007B\2510\037B\034P!B\227\364\314A\315\025\271A\200\262\014B\240\0078B\213XKB1h`B\'\317SBuMgB\376\341\033B\305\270\374A\2216\332A\242\226\300AO6\354A\367\337\331A_I1B4\'XB\237x\206B\272;\217B|u\223Bb!\232B\2216\235B\225\353\236B\010\314\250B\260\210\253B7\210\255B\324\330\244B\257\250\235BI\000\251Bs\331\243B\271\364\253B\375\350\255B\362\274\247B\312`\240B\335\375\251BV\301\232B\003\000xB\333y\207B\342\013\217BM\330\177B\346\'\035B\303Z3B\'\206IBX\331rB\232\300\216B<\355\223B\312q\226B\024\242\214B\362?\212Bx]\220Bg+\\B\323\314-B\361\223\tB\333\340\034B\010\322OB| uBl\331\203B*B\214B\020b\221B\273\375\214B\303\010\227B?\241\241B\311\341\244B\241\212\224B\320\364\210BWd\221B\211\036\210BGZHB\010\004*B\005~]B?\377iB\017\327IB\347\327\021B\223k\346A\242\262\"B8gZB\372t^B\334fwB\302\314\200B\317<\211B(\021\200BC<\220B\310]\226B\231\n\207B\'\230\217B\326o\210B\024LzB}\261vB\032\316`B4\2711B\201C\014B\013\220\306A\253P\033B\233.\351A;O\336A\2414\345A\007\250&B\323OSB\277\320cB\036\014\215B\233k\221B\004\224\227B\016\316\204B7G\205BF\230\226BO\240\226B\261\305\226B\337\360nB9\310LBH\017\202B\303mtB\235\343\201B\033\2225B=\2556B\007&tB\"\246xB\211\275cB\275\313jB3?`Bz\301,Bz\303&B\343\236YB\322(fB\343\223\177Bu\242oBO`yB\t\2640Bx\241\034B\276\343^B\204\334oB\205fuB\364O\204B\303\354\211B\275\234\212B\320\\}B\341fPBr\001~B\\k\213B<\346\220B\243\034\224B\323Z\232B\306`\240B\376riB\2113\202B|\313\213B\n\210XB\320\206vB\035=IBS\335\026B\335\274\275A\236\353\270A\310\372\257A\221\313\250A\304\030\226A\023*zA\203y\273A\323+0Bj\307/BuS\316A^~\247A\\>\307A\364\204\016B\225\227\006BN\360%B\246F&B|\\hB\300\177\202B\364q\211B\376j\215B\177\214\217B*\311cBE!rB\355\276YB1~pBj\212\211B\357\324\221B(Y\223B\2657\224B\2460\244B\275m\247Bp\271\250B\264o\254B\325\027\256B\215a\261B\324\220\240B{i\252B<\265\260B\257\260\256B\302\200\215B\366K\213B\001\017\232B\307j\205B\234\213\216Bf\005|B\220\035\210B\207#\214BZYyB!\007\214B\264\n\231B,\316\235B\3603\215B\026\"\212B\'\010\232B\373`\240Bf\371\227B\372\360\246B\225\347\252B\320\266iB\037}TBRs\200BhH\201Bu\335uB\324\241\214B5\257\216B-\307)BEA!B*xaBQ\0327B\337mKBn\"\013B\3358\360A]\345{A<\200wA\304\2141B\031\0174Bg\367HB_\347=B\277]\021B\t\030\010B\377\356\004B\271\237\331A\016D\225Af\266\217Az/\246A\331]\210A\335B\340A\202\0253B\347\242)B\361\201\017B^\364/B\214RKB\211\334\020B\240\344\371A\201\361\365A[\355\017B\201d=B\270 WB\037\tjB\207\266\202B\210\342\206B$z\206B\2078\204BF\375\204B\206\022DB\200^!B\3023\372A?Q\365A7#\364ABj\225A\036\034nA}7FA\201\270DA\375%\254AW\274/B\t5^BCbqBF\265uBba\214B\033\277\213B\317b\206BA\223CB~=7B\301\"LB\354\360JBS\034\200B#\320\210B+\257\224B\210\304\230BH\036\207B\235cvB\024\230_B\334\202\216B\356T\213B\271`\220B}z\214B\2670sB\263\r\207B\274\322mBI\003\023B.^\357A\031\230\365Ag\027\341A=\3237B~\245:B\351\217\017BB\277\366A\336\212\004B\234\235\271A\256#\266A\265(\273A\035\340\371AX\267\355A.\344\314A\243\314bB~V\201BPr\217B\014\304\200B\243\323\205Bnf\215B+\370\217B\316\235\233Bk9\234B\034\001\235B\035\341\235B\301\004\224BKk\241B\235\370\244B6\013\222B\304_hBoG\216B\257|\216B\006f\210BGN\213B\345\376\213B\253\017\215B\267\267_B\355\t\223B\211\347\226B\275\215\222B\315\223\231Bm\220\235B\264>\236B\242N\254Bj0\223B\216V\226BDC\235B\206K^B\\O\200B\035X\207Bp\346\211B\3679\225Bi\242\200B\200udB\205\373vBUluB}\377\201B\241a\221B^\003\222B\254:\252BT\256\260B\315\227\247B\316\034\225B\n\235\213B\360\262\201B\315IEB\222\262BB\374_\354A\333E\344A\270%HBm\257JBT\354?B\305\304\016B7CNB\206\3142B\356\244&B\271\264\033B\362\352tB\306A\211B1\301\216B\206\254\217B\273Q\224B\203\266\216Bo[\226B\272\023\235B=\307\241B\264\205\240B\031F\216Bpu\221B\312\312\203B\366\203\212BZ.\230BaO\236B\306A\230B\030,\224B>\316\231Bw\212\236B:\250\217B\317\314\205B\316Q\237B\004Q\240B\000\265\246BP\230\250BT\300\215B\321^~B\275\305\217BZ\227\237BXF\241B\344\\\250B\337s\255B\362/\203Bb\233SB>\025wB6\214\201B>\330\200B\343K\221B\225f\225B\277\336FBN\025@B]\364\207B\260\235\212B\017\324\206B}\324\215B\271\360\233B;\361\237B\354\311\231B\250R\223B\021\211\235B\210!\244B\212\376\217B\027\006\234Bz\351\237B\307\242\244B\267\336MB\255\t\026B\2224\nB\223\322FB\241PeB6\377;B\014\253%B\253\202gBR7SB\250\3049B;FIB\250\tKB\"\004\rB\247\267\027BC\030\005Bi\217\302A\261\246\231Aob\376A]\312\nB\326\216EB\305E?B\031\375:B\334\231fB.P}B\375\272yB\201\255}B\306\226\221Bs\220\216Bm\335\225BX\036\226B\221\024\227B\353\370\232B~\001\215B\007\272\177B\337\036^B8\304\023B{\016\030B\211\027\007B\373\367AB\257\003\007B\210\005\036B\007JzB\364&\204B\263\363\203B\022Y\222Bv\244\232B01\240B\220\235\243B\300\273\244B\031\235\205B\201x^B\325F,B\203CKB\212\377OB\204\251{B\234rHBl\224FB\242\2737B\023^\027B\314\260\373A\r\215;B\272\211WB\300\2158B\351\312\376AO*\377A\303\220\006B\367\245\"B\334\005MB\200\202yB\027V0BJ\256\rBQ\262\355Ap:\301A\033\322\274A\335#\245A@\302\362A\335p\274A\202\022\263Asf*B^\\\002B1\241\361A:N\362A\0370\005Bi\006LB\3537NB\223\356\035B%\216\020Bs\220%B\360\260bB\024\317\202B\377W\217B\204\003\234B\0251\237BG\246\236B\356h\250B\244\261\220B\240\316QBs\031EB\266+PBuq7B\332\2776B\223B\027B\220\373[B\331\312hB\340\217\204B\315\247\210B\347\217wB\347\006eB\270\254\027B\345\016\nB\344U\332A\377\036\323A\362!\212An\334iA#6\023A2S\356@U\266\227@\233\233\354@\235\231\313@m\315\316A\306r\024B}B8BZA/B\350?6B\227b\373A\324\366\320A\361\371\314A?\t\023B\367^@BDG<B1V4B~mtBn\n\200B\353\022\210B9\276~B\331j;Bj\330\023B\212*RB\261\310PB\306]#BI\275\026B\240\0277B\307\302SB\371\205oB\031\331vB\331\017YB\231\251fB\264\355+By\223\334A\337\036\361Ae\271\"B\316\004QB\333\0046B\332\0161B\344F\024B\3122\353AO\000\342A\245l/BJ2QB\204\211XBI\237\200B\260\320\203B\375\306\214BQJ\201B\372:\215B\"2{B\242\262\203Bs\364\201B9\274uB\313J\216BE0\227B\315\212\177Bi+\201B\254D\233Bc\031\234B\317L\200B>\346/B\252%HBi\373bB\177@[B~\357dB\351\250~B\177\3269B\335\365<B\215zhB\346\177\\Bq7ZB9S?B\215#\022B`\322\nB\336H\316A)\206\307A8u\237A\217w\222A\201*#B\340b3B\265FpB\3232\203B0\242\205B\205\263\213B<b\214B\021N\213BS.ZBz\206qB\313kEB\017$:By\031\024B\247^!B\305\354\024B\327S\372A\211\255AB\2479[BC\033wB\351S\206BO\321\211B7\232iB\311CsB\3010tBp\223\220B\3121\210B\242\t\212B\2477\214B6\000\216B\252x\235B\3312\226B\341\320\230BK\266~B\201\235\216B\3403\227B\250 \241B\263\323\243B\325\342\243B\242\003\222B\024\034\235B)\327\236B\274+\210B\246\324^B\343\013sB\350;\216B\027\022\217B\355\334\241Bw$\240B0W\242BUz\246B\335\362\250B\307\326\200B\356\245\220B\303\352\205B,\211\205B?\343\220B&>\234B\241\216\236B\227G\214B\214b\217B0 \232BKl\225B\232\275\236BY\032\226B\345\232\233B\241\323\220B\307b_B\332\301\366AX\355%BlPdB\226D{B\206vwBcy\225BkB\232B>m\236B\013\355\230B\357\022\236B\335\'\213B\031\245\213Bj\216OB~?XB\'\340\215B\376\367\216B\006iiB\217GNB\223\036kB\266\235\203B\265\265vBs\0356B\37612B\032\341\tB2d\273A\242\214\351A1\022*B\006\340\030B\261\205\014B[\206KB<\240JBy\t/B\313T:B\331^\003BO\200%BS=cB\270\365wBr\374\202B\337VpB\204\231\203B6\221jBeCSB`\\\025Br\364\003B60\336AW\331\313A&\252\005B\t\244\371A\247M\276A\312F\243A\262~\227A\247=TA\256\341*A$z\303AV\251\014B\017\n\373AdD\034Bq\255\033B*\301;B8\362$B\037\321\010B\037#\270A\264\272\225A\262\210\333A|\356GBz+cB\303pdB\317\212]B \'_B,\207^B\014x{B\n\022\210B\003\\\214B\305B\233B\302\377\225B\254\244NB>fDB\211\273\tB\235\217\031B\327\300FB\377\3364B\001\036\207BbA\213B\206F\222B\263l\217B\213\223^B\306fXB&hEB(\021/B\365\235\033B\207\005]B)\034dB\337\345rB\311\346\210B?\322\220B\233\342mB\211\3075B!^\031B\222~\025BT\211]B\363\234\204B\217|\213B\235\261}BmCvB\001\362FB\302\347xB\350\367\207B\346a\215B\005\030\213B\226\201\215B]|\214Bo\373\214B\363G\221B\261\r\222Bc\273\234B\014\031\242B\216\215\234B\237\007\236B%\342\205B\022<LB\021``B_\002zB3\023eBA\264kB\204D%BxZMB9\205=BhJGBt\020\222B\356\344\235B\211\205\220B\251n\222B\026\000\227B\325\254\246B\227B\257BW@\234BP\300\225B\243\000\230B\331 \212B\341\316\200B\216%\\Bq\3512B\255b\000BN\0232BA\307#B\232\027FB<5=B\t\232QB\251\345~Bu\230\205B\035>cB\356\2341B\334\032\013B\347\202\024B\006\363\000B\251%#Bx\347hB\352\316~BM\344yB\\\367(B\250\216\017BUT\326A\n\212\321A\315g\337Aw\026\324A.\366\352A\303G8B\017~.B\0108\026B\326aUB\324\230\377A\315\263\316A\304\242\301A\337]\300A()\270A\237\255\210A\313\346gAMY\203A9\1775B\345\023LB\364\340ZB\237\211\202BS!\201B#\277wBw2xB3q\217Btd\220B\031B\212B\020omB\020\016nB\2233\200B\267B\213B\200x\217B\210\374\236B\2615\242B\340\321zB\277\320MBwm~B>R\223B\024\334\215B\245r\216B\377$>BG9)B_R\032B\311\303\002B\\\367\335AS\257(B\300\211\212B\356\333\213BxJ\217B.\320\206B\366.}B\272\374\204Bj*\216B\033\332\220B\266\335\214B6\353\214B\260\234\217BI\263\234B\224\207\237Bf\342\246B}h\253BO\274\255B\210&\261B\201A\261B\266\220\264B$\363\256B=\344\222BL\204\244BdZxB\302\340\213B-\357\213B\331\204\202B\332\204\223B\177S\224Bf0\231BH9\234BQ\n\230B\304T\227Bo5\246B\263\004iBB\275\034B\260)KB\260j\033Bb\246\006BQ|SB!\221hB\242\030YB~\364uB\036U\220B\312d\223B\315\303\225B\027\277\232Bm^\237B\365\251\234BH\263\235BL\270\245B6\315\206B\362J[B\275\037GB/\214vB\202PFB\306g`B\023\356YB\001\257yB^\323pB\326\326\204B\357\323yB\030\377\210BECJB\320\374JB\271{\033Bh\210PB#\263vB\243\024\220B\353\356\230B\217z\211B1\3533B\236\310MB\'\331\037B\314\364\014B&+&B\326\223@B\240\007jB[\251xB\256{\204B\004\031vB>\205\206BS\005\211B\3356mB\366D\202B\232\341\223B\017\361\231B\177[\236Bys\243B\233W\243B\034\200\244Bg\215\246B\003\357\257B\030\334\264B\321\021\254B\376r\261B\247\246\263B\3165\264Bz\375\240B\237\355ZB\370\323PBa\256\205B\034\247KB/\250cB\237\036/B7\n\"B|?!B\005\036\346A\225\276\344A\323\206PB\013N`B%\2404B\217\346\035B\213\3538B%\307AB\021XZB\374\007{B\345\203MB\225\264\366A\t\317\306Af]\244A\316S\005B\217*\'B\243\020FB\301\2026B7\207PB\375\245HB\227\261AB\366jgB\234\032\202B\333\345\213B\275I\216B\235\003\232B\242\342\236B\304+\242B~I\227BG\251\232B\332f\240B\233^\241B\354t\245B\340u\242B\'3\217B\034^\207B\204#\205B\037\251\204B\234]\207B\035\002\220BF\222\246B>\236\250BS\304\250B\312k\201B\251OBB\305@cB\007\302QB \3265B\261\004OB3Z?B\210\220\302A\332\335\250A\374t\217A\001\001\273A##\241A\003\266\010B\222\227-B>)-B-\315\321A\200\020\303A\376{\363AT\002\335A\2668\036B/\360CBl\207bB\200GXB\233\213\205B\367e\225B,\337\230B\311#\231B\332F\232B(\336\246B\234g\251B\310\325\261B\006Y\264ByI\201B;jRB2\002JBN19B\302{GB)%(BO\034\nB\203\316:Br\3764B\372\246\022B\376\2734B\300g\031B\226\236\342Ap\330\306A(\333UB{\177qB}~}B\220\341sB5\327\211B\033>\222B7{\234B\374\005\236B\245G\243B89\220B#\370\224B0\306\232B\204*\236B\255\004\244B\241T\226B_\263\211B\214\343\207BzD\220B\264\333\202B\037\313\220BmbVB\035\250pB\325n\204B[\273tB\261W\206B>\201\226B8\030\236B}\"\230B\376\317\211B\371\312yB\022%\212B\3450\225BJ\035\230B\374\262\230B8\327\233BBT\236B9\023\210Bv\225HB\332\3219B\n\324$B2(yBJ\373\207B3\346pB\325\013)BAi\007Bus\005B\026E>B7\001*B4\023dBY\323\200B\037\317\201B@\317\216B*J\223B\013\373\233B!\250\235BZJ\232B\331\016\241B3\001nB\036\222gBoMRBFlsB\303\265sB\260\007yB\224\"\203B\306\274*B\347\353RB\326\276\202B\220j}B\375._B\nZhB\033\300tB\346\273\037B\243\025\267A\023\215\217A\n\365\311A\236\315\246A\253\305\021Bm\311\375Ah`\262A[\302\252A\274\237\243A=\247\034B\327\265YB\327\234gB^]\203B\335\375\210Bb,\212B\216\226\224B \272\227B\366\"\214B\205l\215B+=\222B\324\277\232B6\231\224B!\022\225B\001I\232B\240\264\242B\304\032kB\376\207\224Bg\017\227B\366\223\232B\250\317\232B\2478\216B\241S\206Blx`BU\2555B\3723\022B<\272JB\325\032qB]\000UB\243\025fB.\027aB\264\376\'BI\031=B$8,Ba\335\006B\373\0308B\203\240\\B\032x\200Bq:\212Ba\030\210Bg\240VBt\207\rB;&\nB\326~GBi\030\027B]\252\342A\0165\002B:\217\033B\016\217WB\213KeB\223\362oB\330\\\202B\036i{B\242D\177B\'\037OB\254\225OB\225\333sB\000\220~BD\266\203B\322\"\204Bw\251jB\240YFB\2646JB@\035lB\275\204VBB\026\213BAk\225B\202LzBC\0322B\021b6B\225\263UBj\224;B\344fdB\373\025zB\030\205\206BgU\224B\006\017\225B\200n\233B\272\347\237B\177\t\241B?]\241B\231}\244B\226\276\255B_\355\264B\013\260\266B6\325\254B"
      }
    }
  }
}
node {
  name: "Const_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\365s\232\274\202W\307\274G\211\270\274\343\237\271\274\222\006\234\2741f\265\273\022\232\025;\354\250\304\272\314\025\357\273\361>\000\272\376P\017\273@25\273\006A\301\273\215\240\333;\336$u<\234\350~<\202\344\325;\rmh\274\354<\232\274\265\210\262\274\316c@\274\205$\306\274\202`\005\275\236\374!\275\271\026\203\274a\314!\274\205\260\207\2748*\254\274\212\302\n\275K\222\001:\017\223\233\273\204\236\304\273_|\204<r\342|<p\275\371;\216\0014;\314?\275\273\216\315\264\273f\337\245<UV\323<\312\307\272<\322\375\265<\017(\273<\242\030r<\342\177\n<\0300\376;\362\267\326\273\212\265;\274\035X \274\230S9<\223\315c<\010y\331<\365\220\262<~#p<\372\306h<\216E\203<CN\237<\364q\260<\244\020{<\331\206V<7\026\235<\226\377\322<\0027\241<?\033\244<o\3353<\343\236\245;C\313Y:\277~\355;\235z\032<\357\016]<\214^\220<\235\341\225<\301\223\262<\333?&<{VC\272\023H\235\273\301[N\274F\360,\274C\026\243\273\342\037\257:\343\'^;OF\310\2732I\032\274\212\221\025\274\264\217W;f\\^\274\245f\225\274I\357\232\274\302\205\327\274,\251\307\274!\004t\274\2074%\274\346\341(\274\336;\236\274}q\224\274\204\213\004\275t\200\377\274&&\374\274L\246\263\274\230\330 \275X\3668\275\235. \275I\326\035\275\377\202\034\275.h(\275\265C,\275\n\223\003\275\250\351\010\275c\017\021\275\332Z\032\275T\351\032\275r\017G\275j@\002\275i\244p\274\250U\013\274\230\001\325\273@\317m\272\354 *<\016\034\216\273v7\013\274\025\326\214\274\230\033\002\2742!\037<\211%\263;\232x#\273\366\311\031\274\266a\275;\t4i<\345:\203;\314\311I<\022\351\311<L\366\201<{\365\364;0\263.<\362\027y<\206&\270;\227\245\362\273\010\314\247\273h\004\031\273l\'\001<\202h\310\272\316\206\246\273\355\370\024;|\242\\<I5\344;\242\253_;\355\270t\273\311\002\267\274\330q\357\274\323\333\337\273\325\262\253\2746\310\305\274\351\271\221\274\013\005\007\274\002\353\004\275\037f!\275\372\261V\275\373K6\27550\377;\300\371r\274\031(\002\275\006\331\n\275 \006\242\274\217\274\227\274\243+\203\275\313\366\\\2759E%\275\224\331n\275\276\275r\275\202E\344\275J\303\357\275X\307\t\276\367#\'\276\351$E\276\2721\320\275\300\245\204\275\001\262\004\276\236D\000\276\226\242\267\275\240\300f\275iXl\275_\236\312\275\034p\321\275\313\334\366\275F\032\371\275oP\200\275\302\207\325\274\217;T\274Z\353\236:\225\244x;\304e\323<L\261\217;\230\3275\275\022\257\n\275\017\357\347\274\315\370V\275\026\035\247\275\301\335k\275`\271R\275\205o\207\275\301\t\210\275\n\033\261\275\371\254\010\276\273\007\355\275T\3456\275\261\031\311\274W\326l\273Ym\225<\311\221-\275\212\304\n\275fn>\274\272|o\274\376\340\002\274\002\356\027=\220\260\370<\240<\333<9\225!<\323\376\310\272\264?\324\272\005\360\353<\372\204\372</#S<\362\023\200;\241\354\200\274#L\231\274zI\224\274\242`;\274\246\220g\274\242I\225;\326\374\261<\026e%=\243\3271=\232y=={s\207<\246\237*<\02421\274\3123\260\274\226\305\274\274\257\nC\275Z K\275xU\021\275\027Oz\275\002\3126\275\340\2550\275\243\334#\275F\352\257\274\226V|\274x\037\200<\005xH\2733\003\305\274a\224\t\275c=\232\274f\321C\2745\314\320\274\017\352\216<=\260\276<F\017\030\274\326&\216\274\343`\254\274\221dp\274\n\3660\275\200~\\\275\017\346T\275Mb\204\275\246K\226\275g\247h\275\n\204F\275w\0215\275u\354\212\275\203\262\300\2759\254\312\275\007$\236\275o\231\277\275\350F\300\275F\342\263\275\311\366@\275\212[\316\274\025l(\273\310\263\203<\222\233\262<p\023\355<\3432J=\311\325@=\2256\211<n\212h=\307iZ=\010m?=Rdr=\016R5=\364x\305;\372%\213<x,\241<h\351I=V)T=C\021.=r\356\262<\244I\305<\3531`=\347\213W=-\257\027=\016[\t=\306\2708=\210\252I=Z\236\231<\020\027`<\376\341\237<\267\013\200<\314=\006=\270\323\313<n0\214<!p\t=\2710\016=\031\205\357<\000\026U=\236\370N=\370El=\371+J=\263\310c=H\304\036=&t\354<\235g\363;\274\273\035<\023\215\226;wY\230<k\361\324<\3204\272<S\226\241\272\222|\2609\"tD<\033\370#<\207\351)<\343\033\344<\356\016>=\267\3228=h\021\342<\037\201\377<J\357\006=\'=\304<\345\027\330<\311\336\256<\363\323\334<\313\261\244<\013t\024;\360\273\346\273\300iG\274Lq\317\273\031\021\256\273vd\325\274\231x\354\274\252q\214\274\304u\266\273\263\2751\267\261#\275;\246\226 ;\266\205\347;\323QP\274l\374\274\274\0177\356\274\333\261\007\2755\372\324\274\322V\340\274\312O7\274\310d\3629\334\263\261<\021S\360<\370\252\000=\277\202\026=\276\004\030=\310U\021=\320e@=\035\232A=\230\025==\352b\037=\327\035\007=6\2711=\250\234\031=\211\3777=5\0232=\362\237\031=\327.\003=K\r\037=\333Q\000=K>\243<\013N\306<Q\033\331<\000_\241<t\0270\273l4\016;,\035\336;h}\213<\004K\004=\326\211\014=[\222\010=\240\'\333<\305\336\276<\263\355\313<\355\000A<q\027\006:\021\257\'\274\326\022\273\273\215\370\276;^K\204<\315\325\254<\303\272\321<\020\330\337<\267\342\275<\317\010\353<\005\252\026=\n\254\027=]m\353<I\250\270<m.\323<\361\341\251<\036W\353;-\006\010\2711\\0<T\007R<\321`\262;:\353\032\274~u\245\274\276!\014\2748c\376;M}\007<\345A\177<\007\336\217<\266\306\263<hm\207<\014y\333<\301$\363<\327\256\261<\370v\323<\3761\254<D\336~<\237\314\\<\306\366\026<\200\204r:oi\352\273\361M\241\274\033K\017\2741\277\257\274\013;\261\274T\257\233\274\365\342\021\274\214\321\237:\345N\246;\352\365\272<Eu\310<\371\375\343<\223\206\231<\341k\214<7O\352<\322\200\322<\326\336\275<F7M<$\005\267;6\350\230<\003\226g<\242\267\211<\017\036\003\267`\253^95\260v<G\230s<\016\201\037<\317M)<\210\227\375;\375\210\351\272\215\3625\273\377\032\271;\314\017\364;\2043C<\354\006\017<\272z\035<}\223\300\272\037\350\247\273\021\233\314;\227{\027<\355C\033<\002\340N<\315\352c<-\261Q<\000;\031<5\276y;\211\250*<]9n<\242N\200<\301\210\177<\274\354\213<,\364\230<,\310\017<ZYQ<s\347\177<\332&\330;\336@<<\333\261z;O\021\330\273\364\277\323\274\320\351\310\274\311\'\306\274\263\206\277\274q\022\316\274\302B\355\274\256\025\273\274\230,\026\274~\234\010\274\317\007\356\274\267\243\025\275\033\340\371\274q\311\246\274\373)\253\2745s^\274\252\222G\274\214\017\r;\262\363&<w\246a<\366\310v<\323+t<[\243\246;/\343\374;\355\221Z;x\\\362;\231\352v<l\311\230<\033\006\221<\335G\206<\310\357\325<u\315\331<,\232\315<\032\353\325<\215\217\315<]\240\324<\257\032\253<.y\325<\224O\367< T\333<\203\306\227<\241 \205<\306\305\260<\t\222\177<Pd\222<d\202S<1\202z<l\225z<\370[6<ayy<m#\242<h\365\247<1\310\200<\322v_<\327\037\233<\214\233\250<\234l\215<\232\301\311<N\037\321<\350\334@<\244%\370;`\233\200<\023Rm<\006\310=<\030\324\222<\221\036\214<\223\201\243\272\346bC\273\205\253\025<\374\361\325\271t\322s;C8_\274\212\014\240\274\343\331j\275K\325Y\275\037-f\274\343\204?\274^\0301\273.\333\325\273\2516\315\274\307>\340\274A\341\326\274\231\227\023\275Tep\275\364\373d\275~\346E\275\"\252e\275\323L*\275\224>\235\274\322\221\254\274\r\337\365\274\271E\224\274PJ\376\273\244\007\373\274\237\017\037\275hO\024\275M\306\342\274\276\005M\274\233B9\273\2239\213;\366\342x<m\332\216<\371\003~<5[W<5\037I<>4\241\272\355\020\036\274@m\250\274\336K\237\274\3717\221\274\247\206\030\275\265\201:\275R\306Q\275\357`?\275C[\027\275\216\033\201\274\257\314M\271\030\020\341;q\327\375;\017\206\261<H_\235<\321\274{<pk\345\272\230{\237\273ea\3329b\344\0019\317\030d<\377\r\230<\256_\332<%H\344<1\333\237</\326^<\216\333\010<-~\335<1\337\275<o\257\311<\024.\254<\036>^<M\275\235<[\177M<\212\024\031\2745\340\232\274\t0\207\274\304-\231\274\242\334s\273\30474\273\344*h\274Z\221\242\274\353q\206\2746\302\375\274BZ\354\274^\232\322\274\252\374\234\274\223\265\233\274r6\264\274r\260\032;\026]L<\256P\277<]\027w<\334\003\216<\006\032\260<&\315\256<\330\031\363<\362\016\337<*\307\315<%K\276<\032V\233<b\037\326<\231X\331<\356\363\244<\004\2135<_\313\277<&N\255<\321\022\220<}\216\214<\221\255\200<\341\306m<3\013\004<0-\255<x\300\256<\254B\226<?\032\245<s\277\246< \304\230<Z;\333<\360p\241<\0261\236<G\332\254<\361i\033<\274\375x<\331F\212<\234\271\205<\3207\246<\362\273e<>\301\030<>@;<\025\322%<\200\2448<\262\266\200<\307|k<c#\351<\007f\n=1\336\351<XK\264<SP\222<\334\353f<\306\027\256;\021\037\221;\321\243-\274\324\366.\274\031\2401;\341e=;B\272j:\213\231\014\274\014\2000;\236\007K\273\2731\260\273\006\251\351\273_\2625<Z\237\241<U\264\263<\021\342\246<\206S\260<\360\230\223<\tE\252<M\344\276<`\000\311<\265\246\262<0\370\206<\357|\204<\306\027J<\342\236Y<\326\250\216<\212\240\231<\251A\203<\261\216c<\"\374l<n:r<\215k@<\243\003\034<\306\025\211<\037\316}<\371!\213<\314\007\205<\361TA<,\252\021<\307rH<\213}\215<\222\353\205<\241\274\227<j\213\244<\035mG<\337\025\305;\335\003,<\213\005;<\3713&<\300Gq<\360qt<-\223{;\267\214);\362\253\203<$2\201<\331\232[<\352\367t<\3326\253<\265Z\257<\250[\225<\347\201|<\345o\230<\304\256\250<\002C~<\332\007\241<\003\300\242<\221\246\251<\332\010\316;9\310\232\273\037H\347\273?\230?;F#\020<l\000\2459\203\252\225\273\353\025 <\001b\233;\314\365\222\272{\217\002;\334T\n;\021X;\274\245E\016\274\334\327L\274\025\330\275\274\253j\375\274?8\246\274{\224\206\274\2751t\2732K\233\273\241\322\247\273\332c~;Q\314\023<j6\371;J=\373;\267^\205<\177\314d<\233\224\207<K\342u<\266md<e\376i<R\3063<\177\334\003<O\231\232;T\244\201\273(\231Q\273\021\251\251\273:}\3309\205\253\004\274\300J\244\273\331\216\034<{UB<C\363-<l\356\206<\005e\243<\346e\263<\322\236\266<\322\307\252<\3730[<\366\377\352;C\\@\272\365\341o;|\345\201;;v.<\32038;4,\024;\346[D85\210\235\273e\010\025\274\263\206\217\272q$M;\201\032\331\272\234DZ\274\335UD\274\214\301$\274\245J\310\273\'\240\226\2713\326\353;\346\333\243\273NJO\274,\020\225\274\300\037\312\274\323\236\275\274\016\020\322\274\300 \230\274<)\324\274\351}\316\274ZE;\274u\363\260\274\035H\272\274\375\247\247\274a\n\213\274h\364\223\273\036\236p\273\027\367K\274\365}j\274/*%\274\242\312\266:\250\t$<?\255\215<b\256\334<Y\362\341<\207\252\311<\321\260\006=u\235\275<\035\363\317;TG8; \231\240;\277\363\030\2722\210-\272c\267\345\273\304\305\305;\330\024\t<\355\245\203<\217Y\212<\205\001><d\227\377;\213U\004\274\027\0005\274\325\373\236\274\0018\232\274\226\264\016\275\332\254!\275&u{\275\342[\216\275\030\021\310\275N\366\260\275?\330\270\275^1\177\275\245\217*\275\035\361\300\2749\232\321\274\203\376\250\274KaE\275\005\312u\275E;e\275\362\222\031\275\320%\214\274\212\230\214\274\377\376\227\274\021\317 <\313Kx<\213\245\272<\013\204\200<\223\275\010\274\214\233\332\274d\352\024;\213\371\274:\rx\244\2744\360\315\274\323\0372\274\312\255\021;\"-\200<\355F\222<\255\311\320;\274\3248<\363\3337\274\253\"H\275\213\342&\275J\376\261\274\357\341\326:\376\355F\274\016\274\\\274\000M\340\274\\\2339\275\335\0226\275U\235\226\274\250\036\226\272\020\210#;\320\374\315<\263\325\332<\257\321\023=\270G\320<-\360\032=+G\311<\352\355\351<C\201\312<_0\232<\232\202\017=\'\n/=S\316\334<_X\320<\213\216d=kvR=8\200\002=\017\265\336\272DA\r<\260\303\246<\207]}<\233\330\222<\247B\342</9\224:\023\270\013;\310{\235<\225_[<\223 :<\234\255\037;\325\301i\274\325!\203\274\373.\006\275\212\253\001\275M`,\275\324\2720\275\201\315\223\274\357\221;\274y\331X<\370\207\302<\242\260\304<\376}\346<p\241\324<p\177\273<O5\003<\340\226n<\312n\023;\266\347\211\272\371\211O\274}\000\016\2748\354<\274\347\017\225\274H\030\023\273b\210\240;\205eX<Y^\243<\223N\251<\025l.<2\340I<ii9<\260\r\311<\236\037\237<\235U\230<\376\002\223<\353\256\213<\222\254\315<d:\254<\200u\247<\031\017Z<O\364\232<\2632\264<\025\021\336<a?\332<KH\304<\365\335\227<R3\272<4\352\257<\371\257~<\354\220\023<\36416<s\003\225<\275\020\211<\213I\331<\346l\300<\354\024\271<\007\321\275<\005\030\271<\2736c<\373\254\234<r\342w<\000\247]<\240\007\206<\262i\245<\241\002\237<z\307q<\027.k<*Q\214<MPr<\265\037\214<q\034k<\233\343s<\244^H<\221\337\336;\rf\323\273}\204\270\272\231\032\375;\305\037;<\253\001!<\023\241\261<X{\273<\001\273\301<\333b\245< \210\256<\3225\201<\377gk<\326\265\275;\232\211\317;o\204\225<\247\350\212<X*\034<{\216\246;\270\357\024<s\340]<\246\351)<\265\2722:Z\336\025\267\016\031\354\273sK\235\274\212\002n\274\324)\272\273$\311\021\274\360l1\274_)\247\270m\361i\271\024\233\235\273\037\0217\273P.[\274\260n\363\273r~\226;\213\375\025<#\266B<\274Q\372;^}G<\261J\350;\336\366F;\300\234\024\274sMP\274:\003\221\274\366\254\233\274X\254Z\274\254lh\274\241\237\257\274p\234\310\274\225\317\310\274.i\014\275\366*!\275\245\226\353\274H\360\240\274\361\243\266\274p\225}\274\322\307f\274\266\367\003\274):;\274B\264\205\274\370\222\357\274\357\314\017\275\224\010\334\274l\005\323\273\370d\002;\\\036\r;\255\n#:\345\353k:\323\207<:\336v\307;b\265%<m\2536<^P\232<\341\366\201<>;\031;\234\336\3159\316&F\274\006\311\014\274U\353\254\271\271\357r\273\370F\240<\241\315\252<\257\260\310<\330;\255<\265\343\010<--\320;\034M\025;!\035\021\273g%\305\273\331\313\306;\037\177\344;\322z\031<\351G\203<\273\001\235<a\033\'<;\246\221\272\230\'\001\274\177\\\004\274\2633\317;<n\233<\331\376\266<\217B\200<b\366Q<\345W<;\312 ~<}3\264<0(\304<ni\252<u\203\245<\025\265\222<}\300\205<\036\361\207<\016\230y<*\006\230<^\010\241<@\254\212<4\333\201<j\2709<~\216\250;\316G\334;1\013\024<\032\316\325;\004\366\325;\310`\243\271\244\024^;\327f\306:\000\302\017;T\250{<]e\252<Aj\204<\367\330|<\224\342\202<P\371\307<FI\000=\344>\307</M\250<\240b\241<\342\312z<\004\332F<@U\363;\352\024\001;\243\221\331\273c\364g\271_\361&\273\\E\002;\357\204\036:\242\345B;p\235\032<\037\376/<r\237\271;\032\021\245\2729\001\003\274\312\251\312\273\227+\027\274\223=\237\273\374\241\264;)\221\030<\030\006\000<\227\256\232\273<w\037\274P\370\235\274\243\036\225\274\234H\200\274\200L\177\274\370\240U\274R\034\236\273\223n\274\273\310\270\020\274\271\331\213\271\312e\216\2749\376\306\274\307\343\310\274\t)\267\274Za\260\274\222q\354\274\r\245\001\275\373\032\344\274\346[%\274\305\356\234\273T\320\265\272\360[\022<\'\335\371;\312\303\263;\316\201\244;\276/V<u\217H<\254\035\"<Y`\253;\335\363\234;\263t\335;\363\001\033<\354X\"<\014\007~<\201\205\200<1\214\013<$9I;@\032&<\377A\232<\323\031\201<\231|l<>\007\321:\n\355\016\273\240F\231\273\"\254\022\274A\226Q\274\270\347\234\273\242\033\263<\237m\251<\017\345\254<\020\312\207<\336wO<\306\234k<\241W\220<\366e\215<\252\336q<s\263Y<3;S<\022U\213<\357\243\210<\3048\234<\261P\245<l^\242<P\265\247<\242K\227<\353\006\235<e\022\211<\353\215L<4\262\223<\030\213,<zHp<\227DX<\346\251,<\211Hu<GXa<\360\006g<\370\235a<\217>D<\017n/<65m<\354\240\355;\273\357\275\272n\013o;\205Qe\273\010\336\343\273!\225x;\210\351\352;+>\220;k*\022<\006-\227<\314*\227<:\030\223<k\321\233<\215C\243<TG\217<\033\343\204<?d\232<\236JM<p\341\331;O\220{;\271B\036<j\207T;W&\324;\275\347\247;R\254\023<\035\212\357;\031\023&<:\n\001<=\021,<\037\267F; \3327;\3163B\273\360z@;\254\t\006<_\"\205<\341.\243<\266jp<PH\205\272@hy;4\227\320\273\20200\274\003\036\274\273\030\207=\272\013\215\000<\310p-<i\004`<O\373\037<\013xg<n\004d<\334\247\007<\0343D<\n\302\243<\214\340\264<\235\334\274<Z\221\312<*\265\265<8\236\251<\233\016\243<\254\277\320<\322\205\354<\233\313\311<\357S\341<\277}\337<\016\333\315<$N\245<\252\354\026<\033\237\351;Z\260\202<O\325\306;\202\226\035<\340T\213\267b\363*\273\232z#\273\204\312K\274B\245:\274Q\305<;\214\243\271;Gm(\273\232V\352\273SL\025\273\00751\272M\254V;<M\025<H\'\344:\244h\226\274La\333\274$\177\t\275\357C\256\274(\301F\274\376\313j\273\n\244\355\273\236\216\007\272m)\r\273\037\034Y\273\225j\231;k\372><\244\355\207<{\320\206<\006N\277<\346\342\316<\232i\322<\222\356\251<\340\245\252<\251\250\271<\r3\254<\033n\261<\251\362\233<\320#m<Q\'C<\330\270*<\214\233\030<\274\007\022<e[ <nW\207<\275^\202<\320uk<\345\311\023<\205o];*\235\311;q\351\207;v5\263:\010\030S;U}\335:\246\017=\274\\\021c\274*\327\206\274\227\263X\274\335\362y\274q\237\030\274\244\016\237\273~\374\220\273\272\242\202\274\341\336\205\274\240\005O\274\033\346_\274\266\364\004\274\227BU\273\000\377\204:$r!\271\367\262\372;Tbm<\331Wv<\335\272_<\013\346Q<\350\335\231<\201\223\231<\235\273\313<\241\020\321<\264\366\\<\000\243\270;\r\323z;/<\207:F\r1;\242\331\354\272cX\331\273L\260\353\271\003\023\240\272\341\304\317\273`\331\003\273\013K\304\273\226\270`\274Qo\204\274\332B\t;n\225\n<P\233/<E-\007<<\307}<\345\241\235<\262\004\317<\226\244\304<P\005\326<\211v\236<\207\\\245<\246U\262<\222\\\262<W\026\302<.p\233<F\351s<]dV<\226\316o<\216\3667<\035\026o<a\247\323;\362\276\032<\245\356K<\306V\031<\017\267G<D(\222<\n\361\246<\363)\216<\274\323Z<\016M\"<\025\201U<\017\276\203<\302\333\200<\253ok<X\326f<\346I^<\255\010#<\372\030\206;\356\370\036;\233\270\2519x\003\007<L\3660<tF\355;\034a\252\272\350:\334\273\005\334\321\273=\257\302\270\267$7\273\211\367\240;R\225\036<\343\230\024<!\273Z<G\025f<\r\253\213<\253\361\204<\373\231g<\251\236\201<s?\001<\365\216\325;\254\231\203;\3102\356;QM\327;hl\323;h9\351;\r\007\343\271\321BQ;\216y\030<\036\270\374;\371\277\222;\'\256\243;}\022\275;\336\237+\273\215[\207\274*\340\271\274\034\304\216\274\n\005\263\274v$H\2740\274\201\274\346Y\342\274\265c\332\274\030p\321\274A\r\\\274\260\304N\271\\\351P;9\223<<RCd<\313\340X<\261\n\230<=\243\232<J\025l<Ku^<\335\264l</\204\216<b\355o<\314\330Z<(\023g<\220g\210<S\271\001<\257\003\247<\353\313\242<\357\201\243<\316\354\223<\036\205j<5q?<\264?\343;)\342\365:.\316G\273\244>U;6\276\013<\'\033\221;k@\321;\244\327\253;B\007\376\272\032x\006:\r!\324\272!\026\344\273\237\211\247\272\271`i;)E\030<\016\325K<\022\2450<v\004v;m\355\021\274`\334\017\2748\241\3769RP\030\274\371\222\241\274}M{\274\020\250%\274\346\350\005;3\034\243;O\245\341;:\2506<\000g\020<\235\203\016<\302\264\374:\350\327\353:n>\345;\037\226\004<^,\017<\250\330\002<eL\242;\312-\260:\312\260\312:\261\n\224;\007r#;t\266#<z\031T<-\303\376;\302\027\235\272/\035\035\272\2603H; \204h\271o\260\234;\325}\366;\223\300\"<0\332p<\007\350]<\322/w<\360R\201<\003wq<rR[<\222\002Z<2\027\211<\375\317\253<\021\313\251<\255R\220<"
      }
    }
  }
}
node {
  name: "Const_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\237\031!\275\257a8\275\340\3721\275wX3\275\226\333$\275\364O\327\274\235)\217\274*P\246\274\200\254\320\274\277\311\222\274\267o\232\274\377\241\231\274z\037\257\274\3139\000\274L\214\366:\264\341\202;\201\"\203\273$\337\312\274%\236\364\274\271\357\010\275x\007\301\274\340\340\025\275\016j<\275\257\215^\275&\036\000\275\200\021\315\274\220,\002\275\207\277\025\275R\355M\275\336\375\177\274\330\355\245\274V~\254\274\343\300 ;h\202V;KZ`\273\336S\367\273\202f\201\274\010{{\274A\200A<\342X\235<\361?\222<\022\331\231<5\014\253<Fca<\336|\002<}6\375;]z\343\273\326\nL\274(\2648\274\352\033,<)\016d<\326\003\346<\374\222\310<\r\232\223<n\027\225<!\316\251<.\017\315<}\003\346<\363.\267<\007\357\247<\251\363\337<\374x\017=\337\013\362<\3471\372<\246\000\260<\351\354y<\207a,<-\217\212<\005\355\234<\022\272\300<\332\347\346<\335\226\360<\342\222\t=_o\262<\312%&<\003X\253;\033~{\273`\2407\273\344\r\r;7\275\006<A\006&<\355\264\335\270\201@\213\273\226\274\232\273j\250\374;^\344&\274\236R\203\274\2775\222\2748\360\332\274>\270\325\274\253*\216\274[\307T\274\232Z_\274\375|\300\274\345\036\275\274$\264\036\275\352\200\037\275w\n#\275\214\'\002\275y\020O\275lin\275\271\330[\275\204\001_\275I\326b\275\216\005t\275r=}\275@pX\275\255\330`\275\266El\275\020\"y\275\023N}\275i\013\227\275c\372l\275\033\305&\275\256\314\n\275B`\376\274\2659\310\274\2534?\274+\317\316\274\274\245\353\274\305\203\030\275\261?\342\274\326\370\017\274\010l@\274\031\221\232\274\324\305\317\274\200\262\030\274y\335\022:)\213\r\274*ii:\301\272v<5(\375;\276\344i9:w\216;Ac$<\261\352\213:\034\367E\274]\207!\274\274\261\344\273\203_};C\307\260\2739\325\023\274\005\353\263\272\022\255/<;\030\234;\0370\307:~\247\273\273\\(\320\274\362\007\n\275\032L=\274\020C\331\274\213\245\373\274\0311\315\274FJ\200\274\3169(\275\016OK\2750\241\204\275\231jp\275\034\300\304\273\364 \351\274#L=\275\003cJ\275\017\266\022\275\220\213\016\27561\250\275\224\332\227\275\031\341}\275N\377\246\275\224\344\254\275x\340\016\276S\344\030\276\310#/\276\0147Q\276\201\211t\276\342z\037\276\262^\371\275\347\314>\276S\026>\276\020\277\035\276j\260\373\275\332\023\376\275\320F(\276\002\200-\276\017\244A\276\314mE\276\021\246\r\276\271\331\321\275\2466\263\275\265\021\221\275\224\327\204\275\243@\"\275=\023g\275\301\233\320\275\276k\272\2759K\255\275]=\334\275\260\331\013\276\225&\352\275@W\336\275\340&\374\2750:\376\275\361\034\024\276\324\005E\276\336\3716\276\201\017\345\275\004\360\272\275>\341\214\275*\0305\275`\000\316\275y\262\273\275\001p\214\275\223Z\216\275\007&z\275\030`_\274\222?\202\274\026\233\177\274\240\234\357\274\'e\035\275\325\317\026\275Il\205\273\312\027\203:\214%f\274Y9\256\274\244&$\275\001[/\275} ,\275\217>\017\275/\177\030\275\373\367\217\274\377\304\313:\302\356\275<G\010\362<\366X\022=x\317\375;B\2620;\233I\230\274\263\244\365\274\347r\004\275\240\231p\275\251\204\200\275\220\035M\275NR\237\2750J\201\275B\035\201\275Wbz\275<\2330\275\022]\027\275\261h\227\273\254_\265\274\034\2300\275\331zZ\2751m\037\275wu\002\275o|:\275\306\035\300\272*\210\325;\316\232\316\274\301\204\010\275\215\333\030\275\201^\376\274\312Gx\275\304\215\225\275d}\225\275B\237\263\275\362\201\312\275\"\365\254\275-\327\236\275\353D\230\275j_\313\275\320\367\002\276\215%\013\276\212\354\357\275\366\324\n\2761\347\r\276rW\n\276\251\340\305\275\261+\231\275P\030Q\275a$\366\2747\016\255\274M\374,\274\334\323c<mQ\204<\331/2\274eY\006=\337$\n=\007x\375<!wB=f\363\022=\350\356\254\272Si2<\000uu<\001\353B=!\357Y=\225\233==\250\t\332<$\300\365<h\211\202=\203\221\203=\353\364L=\217\251C=\266q{=\345\204\212=A\237\026=\337\343\000=\350\010\032=\025\262\t=\025\020U=\026\3665=rt\025=,\341]=)\233f=W\024R=\361\226\234=\363\365\234= .\260=\002\240\241=.\\\262=\325%\220=\'\257v=\025p\027=A\260\034=\204\214\002=\306\366;=q_[=\366*M=>\377\304<X\266\307<\240g\022=\035n\007=-\202\006=\237jQ=\242\240\222=\355\257\222=E\302\\=\353\244m=R w=.8Q=\017\336[=\247\367E=l)^=\023T@=&\241\340<~\330\204<\263^\025<_\200_<0\007[<^h%\274C\006{\274\030\373\245\273\034\252\273;\025\2020<\211J\206<\346\017O<\241\272\214<\354\374\202\273\326 \204\2744a\305\274\177Q\367\274\321s\311\274\250\202\341\274L\243C\274\034\217v\271\010B\266<\2239\001=\356\255\020=\346{.=J\2227=\363\2407=\375ap=\234wz=\211\007~=\313\323e=n]Q=\214\235\201=,go=\005Z\212=\264\"\212=\302#\177=k\207j=\273y\205=\254Pm=\220\204<=@\245N=)\367X=\211o;=\251\343\256<[\201\316<~\213\356<rh!=*.d=\343\312o=\346\203n=X\362S=\246\253E=_\356L=yi\023= \202\276<\316\350,<\211\000b<Z\315\313<\227\263\020=G>&=A\361:={XD=\260$4=\374\210M=\n\213s=n\225x=\257\254W=\357\370==z\217L=\32557=_$\366<\360S\257<n,\003=\340E\n=\304\257\320<\235i\017<\274\244\211\273\342\314\317;\204\344\270<\242\276\272<>\237\370<\243\213\005=\217\274\031=B\324\003=-{1=\310\005A=\360.!=\034\2654=\337\320!=\361\313\n=\261l\001=\000\006\334<Q\021\220<\371Z\005<g\236\322\273\314\254e;\021v6\274t<U\274\351\332A\274\301\253$\273D\034\363;\226\2438<\210\243\366<\340R\006=\200\377\030=1\243\353<b5\342<\325\013%=}\231\034=\007\370\024=\233\351\321<\234|\225<\207\252\002=\330\314\340<\321C\371<\375(P<\317vI<\177\257\341<\317\320\341<\326{\266<o\377\272<\007\336\243<\260)\036<\240\263\001<\'\274\204<\303\253\222<\030\310\270<f\n\236<=c\245<\361T\t<\3425\200;\3028z<\360m\226< \355\230<\315\372\264<-\033\302<\335\304\272<\340o\236<\rs\\<\261\242\245<Je\312<J\270\326<\216\006\331<2\266\350<\250\332\371<\224\007\247<mA\311<\373!\343<\270c\226<\022X\277<\374_y<\307\272u;\014L\220\274a\245\223\274IG\236\274\300\377\243\274<\036\277\274\342\343\353\274\363\352\303\274\203t/\274?,(\274\302\303\004\275\253\230*\275\276\261\027\275|=\343\274M\342\355\274\0233\265\274s\333\253\274\\\202\313\273)<4;~;\364;(3\"<\370\2251<\016\207\312:\201\211\234;n\326A:l\312\256;0\202d<\315\252\230<.\036\231<\213\214\225<\327\312\360<a\303\377<YT\375<i\300\007=2\365\007=\354\351\017=\026\340\373<\014_\027=jK-=\313\346\"=\261R\002=\036\307\363<\0045\022=#$\364<<\261\004=\366\036\340<\254\364\364<\253\377\365<\016l\322<8o\365<\2576\017=\200\307\023=\215N\000=+ \357<\353\274\016=\204\016\027=\261\336\t=A\326*=/\3750=\002\201\355<\356\333\306<\013e\005=\376-\000=\264\216\346<\216\\\016=\025j\013=^\001m<_g@<\307\356\302<\204\316Z<\227\247\213<\357\313\375\272@\312\034\274\317\326Q\275&fM\275W\224A\274|.\'\274\265-\273\272\002%\272\273\317\332\321\274\035\276\360\274\034.\362\274\322Q(\275b\024\210\275\331\235\207\275\302\320x\275l\326\220\275hFm\275t\021\024\275\027\340\034\275\320\rD\275&\216\024\275\202\027\322\274FPH\275\334\016n\275R\217g\275\007_G\275\357\034\t\275\021X\275\274\251\322t\274\331M\035\273P\305\331:o\222\270:\032!\007:\340\266~:\316\365B\274\345\301\245\274J\215\001\275\353@\376\274,\216\363\274\342yN\275\0247w\275\007\026\213\275\337i\205\275f\352g\275\325_\022\275X\306\237\274U\0338\274@G\024\274\301\344\333;\365@\310;\340\314z;(\355N\274M\014}\274\\f\036\274\232\332\032\274\256\222\263;\234H=<9\332\257<o\342\310<\235\031\217<2\275K<\305\364\374;\302 \345<\206\347\317<\262U\346<\027\023\321<\\+\230<\277\342\315<\001\365\231<\246\254\204\273+\007u\274F\202_\274\362O\213\2748_\026\273I\234\312\272\323Xb\274Z\251\250\274-\230\223\274 \332\013\275#\345\010\275f\326\000\275a\220\322\274\371\033\327\274<E\366\274\315\271\257\273\330\313\274;\263d\225<|\0026<\034\037n<`5\244<\032o\255<\177\270\377<<\304\367<C\357\360<yt\352<\373\347\315<\022[\t=\351\250\017=-X\360<\306\323\246<\020\350\t=\352_\003=\347\332\354<\354\217\354<\244\367\342<\276\315\332<\300\372\243<w\234\n=:\275\r=D\330\002=\3208\014=\\\335\016=E\027\t=X\367-=\267\366\021=\273|\021=Jw\032=e\304\321<:\313\000=\341Q\010=X`\006=\006)\030=\010\240\373<\205\337\321<\020\337\341<\205\357\324<\332\023\335<\363^\001=\177\246\367<\211\3009=\301^T=\352zA=\nv\'=\021a\026=\241\001\006=\337}\275<\355\272\260<\202\354\236;\257\252^;\261d\206<S\205\203<\033\332[<\316w2;Lp`<xK\351;\313@\203;\367\204\263:\360J\243<\366*\360<\335T\004=\026s\000=n\364\007=\242d\366<\325\376\010=\226<\026=\322N\036=i\"\025=R\217\377<\245j\376<\323\n\336<\241\350\345<-\024\005=$\334\013=\t\006\001=;L\360<#X\365<\316f\370<\273\026\336<v\235\311<\211\201\003=\354u\375<F\250\005=p\021\003=?\037\340<\342\216\305<\315\247\340<\317\031\006=\274\324\002=\350\354\014=*\312\024=\035\240\346<\275\211\257<\306;\323<\366\277\331<\246\216\315</8\364<(t\366<6\330\225<\203\241\206<\311?\370<=!\367<M\257\343<\211y\361<<G\023=\013;\027=\244\014\013=R@\377<J\364\r=&\246\027=)\272\002=\227\027\025=\366\030\027=\037\340\033=\010]\273<\326k-< \007\347;v\033\210<\3175\267<\345\261V<\321\374\355;\223\337\261<\222o\205<<.\037<n\220K< \322F<T$/\273\016uV\272\332U\274\273\342%\224\274\367\277\343\274\366\233\226\274\216\024~\274\303\252G\273\363\277\216\273\026/\245\273\350\321\210;\271\256 <\226\316\017<S\345\026<\302\003\231<ew\213<x\035\247<{\311\237<u\234\233<\314\354\242<\211j\212<\370(g<\346\233/<\2409\301:\227 \352:\323\273A\272\0303\231;\030m\224\273\373\350\367\272\211\245V<nH\202<\203\215v<w<\261<\332\372\324<\360\306\354<S\204\367<v\004\362<\325\353\266<\213=\203<?\315\367;\315\364@<\022\345B<\t>\232<L\346.<\274e!<\371G\355;\2646\342:\317\r`\273y=\214;\031\"\n<\244\311U;\272\224\032\2746\210\022\274\341\323\374\273\0367\212\273\202\200\305:\227\246\030<\033uW\273\2662@\274\260\016\226\274\325\377\325\274\2452\323\274\303\335\361\274C\332\276\274\372\022\002\275i\245\003\275U\204\231\274R\341\362\274\323{\001\275\035\003\366\274\275]\335\274\224\214l\274]\"Z\274\034\375\265\274\210\217\307\274\034\262\245\2742\265\007\274\336\373\251:\334\261\"<\251i\257<O\322\303<\252\236\270<CE\006=\277\235\307<\234z\000<\010\252\217;\371\234\332;1\203\212:\'?a:YU\303\273\315\353\361;7\310%<e\322\230<;M\246<\247\203}<|\014C<$\201\231\273\216M\n\2748\207\223\274\\\272\227\274\277-\025\275\201g0\275\266\031\213\275eI\242\275ih\344\275\026.\325\275\177n\344\275U\362\260\275\367\310\211\275\245xK\275~\tT\275\300\235?\275\'h\231\275\217\261\264\275\274\324\257\275OD\214\275\376AE\275d#C\275\204\277F\275ok\233\274\342\306<\274\005\371\302\272\232!\320\273&\307\357\274?3C\275\334\226\224\274\347g\222\274XP \275lf6\275@;\367\274\337,\205\274\311k\247\272\013\2323;\236\035\365\273X\256\254\272\270\346\300\274&l\200\275B!f\275J&\033\275P>e\274\345\374\340\274\306\226\353\274\016\3430\275\250\326\177\275\273F\201\275H\036\032\275Xl\242\274s\363x\2747\247\031<)\262X<X\262\316<\035~\210<\025]\001=\307\303\244<\320|\324<\270\300\301<\204\250\232<?\001\030=7UA=\257\322\005=AS\004=\013\304\206=h\304\202=N\2259=\324\375,<]\350\252<\207E\010={\307\351<A\212\000=&l,=\033\350n<\205Mv<\232:\006=5\236\334<\003f\313<w\312y<\371vJ\273q\004\316\273Wp\320\274\252J\330\274BN!\275%\231/\275\303\246\231\274`\rQ\274e%P<\273n\311<\306s\326<)O\002=NR\375<\215\262\354<\310\246f<^\215\255<6\267\014<>:\240;\304\020\377\273\033\014\223\273\031p\006\274\241{\203\274\342\352\233\271\255\211\346;\025\016\203<\260}\302<\375\177\320<=\370\200<CX\222<\342\377\214<+}\001=\014\341\336<mu\335<\253\356\334<\343\266\331<\314\n\022=C\335\003=0\345\003=y\376\315< \'\000=rz\017=\037O(=\275\264)=\207\027!=\367\254\013=>\'\037=\340\223\033=\305\024\003=\363\021\315<\000\032\335<\006\334\014=\034M\007=7\3262=\264\036(=1\377%=\345\021*=\344\033)=D\r\004=p\221\032=s\211\t=\321$\002=\001\356\r=\\\305\036=\311&\034=\362D\010=\211\014\006=Y\277\021=(\223\007=?^\021=\331_\005=\242@\007=Ou\366<\211\355\304<\215\002\031<@{^<\227n\270<\341A\326<\354j\307<\237\367\026=\353$\036=\306\217#=0{\026=\211\243\034=\002\277\005=\304j\377<:\261\263<pg\264<v\266\014=\216\350\007=A\264\317<Mw\246<\301\234\305<\243\232\352<$\301\316<\373\321p<\243\265Y<\314\217\241;\3767\021\274\337\343\262\273Cw0;o\222\277\272\323a\217\273fA\310;\202\353\270;\304\223\3669\213\032\010;\2314\034\274\266\177\210\273\005\331\002<\217tS<\377\031\204</\345E<\002\016\214<\366\324F<\257\272\002<\223\230\241\273\326\213\033\274\314\372\177\274\242\000\224\274\004\375W\274g\230r\274\244\364\275\274\353\n\341\274>\344\352\274\220\365#\275\243\002@\275I\306\031\275\233\272\356\274i$\005\275#\307\325\274\312\200\314\274\016\327\232\274j\354\266\274qy\341\274RG)\275<AF\275\026*(\275\371\213\250\274|\235;\274H\",\274\020\034:\274W\025+\274\301*$\274\223S{\273(\016\237:\'\313X;M\027K<\226\234.<o4\036\273 \031\206\273d\374\212\274\376\246`\274\350\037\254\273\006{\014\274t\227\202<iB\230<_r\302<1)\261<\361\355\027<[V\370;\220\233i;\013\334\222\272_\034\256\273]\017\350;\262t\010<\227<7<\232\354\230<)\207\272<\331\023h<\3315\';BQ\237\273eK\271\273\234\252\023<\030n\271<\177\375\335<-L\254<\222\231\230<rE\013<\345\220\262<3\253\357<\260\364\003=\345:\364<\247\365\364<\207G\346<W\212\334<\266\r\342<HI\331<\346\274\370<7\013\003=m3\362<r`\353<\315\320\305<\360\206\217<\262\217\232<~\331\254<\237\t\226<\216/\224<\3724-<\364\213d<m)><\300\017C<\215x\321<#\365\001=\006\202\340<\030\360\334<W\020\344<C3\030=\340\2159=)L\037=;^\021=qU\017=\364\343\372<\326\306\337<\353\273\265<\362.\203<\304\215\313;\273^E<\362U\022<\364\301U<\224A6<\334xW<\347Q\241<|\320\254<_!\201<\000=\006<\305\017\3739\236X\311:U\347\036\273\250@\262:\354%A<\316\223\201<$El<\230>\237:2\257\230\273\375\362~\274{?\200\274\354\324f\274\337\314t\274\263UW\274A\036\252\273\316;\322\273\321\002#\274\224\034\261\272\252u\236\274\020\353\340\274\201c\354\274\361\346\342\274\306\216\343\274u\271\024\275\014\203%\275\374l\032\275__\245\274\240\327p\274S\3312\274\006\253\2249\351J%\271\3560\320\272\036\003\272\272l^\372;\265\256\376;\255\233\313;A\273\005;\354\352\004;\206\262\223;g\222\000<}U\022<\325\022}<\243S\207<D5 <yB\221;\371\310D<G\262\261<\304\226\236<w\342\230<\333\033\271;\322\"\311:\360\231\271\272\223h\320\273\354\3434\274\021<]\273C\223\310<\rj\307<\"5\323<H\261\263<O\034\227<u\205\251<\374\307\311<\356\354\313<\234\375\272<~\236\261<!\327\260<\355\036\327<\306N\330<\204\346\360<\224/\377<mp\000=\030\202\005=\025\367\375<\023\274\003=v\242\365<\216\253\322<R\303\001=\222\200\304<\361\376\347<\310B\334<\202Y\305<\221k\353<\337\365\341<\312\234\345<3s\343<\200H\324<p\342\310<\217!\351<\005\257\252<#f8<\356\332\202<\311\335\001<\222\233c;e\223e<s\305\215<zji<Q\032\232<Ge\355<5\230\361<\373<\361<} \376<\010\371\004=\223\243\370<\255L\360<X\260\004=\342\"\325<\315\315\241<\303\320\206<\220G\266<\334\265z<\\\031\226<\357Y\210<\302\355\247<Kl\230<\314\316\257<\361\004\234<\347\367\261<W\274a<\207\246W<g\350\331;b>I<\237\332\217<P3\326<\'\261\371<:\265\320<=\340\023<\202\320^<\273\025#;\360\343B\273\337A\263:\365P\305;-\230q<8j\221<6;\256<\211W\217<!\256\266<\252\376\267<\324\267\211<\257:\252<-\025\362<\275\327\004=4\033\014=\375~\026=\177\240\016=\301\264\n=\017H\t=)\214#=+d5=RT&=\253c5=JZ7=l\2370=\264\363\034=\2438\333<4\330\305<\327\312\007=b\354\270<I\004\324<\3737z<.\020@<\325\3123<\356\006\362\271}5&\272\200\227[<\275\023\203<\010\017\346;o%\307:\317V\300;\323\217\346;o 1<\263\314\211<\303*\025<Z\356L\274\343\024\272\274v)\001\275\245\261\247\274\245\rE\274rEq\273Z\316\375\273ic\205\272\307\0314\273*\n\205\273\231\210\212;\245\231B<OW\221<\355_\227<U\010\332<\007\037\364<P\346\000=\376]\340<\251\t\350<\212\237\376<\243\\\367<\352v\001=\006\371\361<\260\222\316<\265i\272<:a\256<\227\003\245<&N\241<\373\224\250<2}\343<Z,\341<\202>\326<\2350\251<\373cn<yZ\214<\3737r<\255\246<<`\335U<\212\3645<\006\211[\273\n\303\340\273\247\306/\274c\030\013\274\354\r>\274\217\222\317\273dO\025\273)\230\021\273*\247q\274\205\335\203\274\247\213V\274gLs\274D\320\036\274d\350\241\273\013)\r\272\004}\326\272C:\332;\233>k<7\033\201<Q\231w<V_t<\362\r\263<q3\272<\271\205\366<=\324\002=\224\021\246<7=J<\357g*<\241\256\357;\264\246\020<\t\247~;\023\037\324\272\222{\215;\010\007T;\270}\"\273$y\314:\243\315@\273\317\363=\274\234cv\274\327mX;\257E%<\302\341R<\227-0<\264\252\231<\257\030\300<\006\301\373<\207G\372<)\244\n=\375\037\343<\330\377\357<\017\272\001=\005\303\004=\t\007\020=\310\r\375<>%\335<g=\317<\363\313\335<\326\220\301<y\r\337<\221[\231<M\\\261<\360\352\312<\026\206\260<\310\213\310<\017\217\372<\362\343\t=\245:\375<\251\232\334<\377\347\276<\342H\331<\304o\364<\273\025\363<\317\246\350<\226\001\347<\355\024\343<m\303\303<\2049\217<\372\346y<\"\264L<\036\262\246<<\335\273<\002\252\234<\377\314 <\213\024_;\272];;\356l\017<\233\343\261;X\350U<\215d\223<\223\030\217<S\"\265<r\271\275<\226\261\332<\022o\327<\254~\310<\035~\331<\365\006\227<\351M\212<9Sf<\021?\215<\"[\206<\tE\204<\250\006\211<!\343\014<\240BD<JF\225<\227\366\207<\033AW<\0055]<\261Ch<\237\323\250;zE&\274\305\253\222\274H;b\274E\263\240\274\354\370/\274\317\304z\274\374y\352\274\220\350\355\274fS\357\274\343\315\220\274\235\307\214\273\016B\016\272\205\237\014<\363uC<\225\363E<\306\235\227<\344\376\242<\253\232\204<\252Q\203<\322 \220<\t\"\257<\216\240\235<\247P\227<0\336\241<U:\274<3\224j<\026\346\342<\020\337\344<\253\210\353<5\221\340<\246a\304<\371\t\260<\363\345\207<\017\3425<\3473\264;\341\035><\312\025\213<\305\204O<H\344n<\247\023Z<},\266;\004\240\373;\037\214\246;\201\377\204\272\363\343\215;\020J\025<\364\255w<\230\031\231<\234\320\215<\307\324%<\327\203`\2736\367\204\273\372\'\245;\001\006\265\273~R\215\274idb\274\004\371\026\274\234\330E;;\255\312;\014\367\t<\226\350X<\255\3658<K\006=<5u\232;\315\357\224;\275\375#<\303\365:<V\341J<\205\330B<*I\022<*\311\251;\227\362\254;\021e\010<%\206\314;\335\250g<gb\220<\221\366N<\363\275X;u+o;\365e\356;\026\203v;\317\003\021<\310\244A<\233\351n<\n\217\243<\271\037\236<\304o\257<\325\345\271<\0357\265<P3\255<\356z\257<>.\320<H[\371<\004\014\375<\333L\347<"
      }
    }
  }
}
node {
  name: "Const_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\tL\206\275\315\241\222\275\016n\220\275\213\377\221\275\276\252\213\275=\273_\275\273\265;\275aGF\275\232\275Z\275\000\307;\275\324\264>\275\245\211=\275\363\177G\275\376\236\017\275\340\003\314\274\361\362\264\274\363q\360\27439K\275\3316`\275@xo\275+\014H\275\227U}\275\362\212\222\275\303\247\244\275\004\024n\275\201#U\275\035\247p\275\'f\202\275e\357\236\275\253\3342\275W\245D\275\364JG\275\327D\315\274\342\211\300\274\240\\\361\2747Z\007\275\032k\'\275\320\301$\275\366\354Q\274\200\245\222\273Zf\233\273/\0356\273\220\007\3009RV\274\273\344\374/\274-\353(\274\310c\310\274I\343\363\274\247L\351\274 \255\320\273\332\254\021\273A\352R<5\327)<\013\337\235;\222j\276;\276H\026<x\303k<\277\367\226<\014\351^<\010?M<\265\344\245<0\272\355<n\336\310<-\313\330<\374s\224<\n5K<\t\240\003<\010\214t<\3508\221<\370u\272<O\005\347<S9\367<\014\221\020=&\267\304<\332\315M<\231\323\374;\270E\311\272\223\334$\272Y\'\216;@q-<m>P<\242\335\033;\037}\377\272`\252*\273V\357#<\2679\007\274\231\300n\274v\\\212\274r\365\330\274\027C\331\274|S\225\274\255Sh\274l2x\274\004l\321\274s\177\322\274\031\370,\275\317p1\275\223\2418\275\204\262\032\275\037\263k\275_\001\210\275Y\036\201\275\\\372\204\275\034(\211\275\373\022\224\275\222\031\233\275\333\364\212\275V!\221\275y\336\230\275\373g\241\275\202\253\245\275\264K\300\275oZ\242\275\235\016\201\275\363\021h\275\247\257]\275\320\177C\275\275Q\017\275w\365E\2758\276T\275\274*x\275\326CR\275H\211\005\275\301;\020\275\221a,\275l\265F\275\2712\005\2751\213\266\274V\177\375\2742|\254\274\224\320\314\273)1P\274?1\240\274sHt\274\330\302\014\274M\210\212\274\265S\363\274\253\373\337\274\353\305\306\274n=V\274\033{\263\274\026R\317\274\332\252\216\274-D\236\273d\365&\274\275\244T\274g%\243\274\252N\"\275\372\330E\275Dx\330\274\377\353)\275\240\215<\275\001\305&\275\262\000\001\275\007\030j\275\247\007\210\275p\342\250\275Z\306\236\275\331a\321\274\325\350C\275c\003\207\275\330\366\216\2757\027i\275\n\204f\275\267\014\325\275\317\257\307\275\200X\261\275\300,\333\275~\313\343\275\001E+\276\021\2607\276#9P\276\217\216t\276\2272\215\276N\375K\276O\300,\276\310Tn\276l\223p\276\243qT\276 \0348\276F\305:\276-\231c\276\247\327j\276E\035\200\276\3517\203\276^\237T\276\031\2333\276\341\352%\276\3635\026\276Bk\020\276\337\256\357\275!J\007\276\234\3252\276\370\034)\276+e#\276}\3119\276\274\204V\276\205\234B\276G\001>\276\003\272L\276\221\306N\276\320mc\276\333*\211\276\305\333\203\276M\202J\276\033\2507\276\267y\"\276\371\271\n\276\240[?\276\244G7\276\"\214!\276\014\022\"\276p\264\031\276\304\327\327\275L\240\330\275\375\262\324\275\322\230\353\275\333\272\372\275R\256\365\275\376\226\264\275\033\016\247\275\033>\300\275\0206\313\275e\034\355\275\245\345\360\275\300\005\356\275\022\370\336\275\344\252\341\275x\333\271\275a\371\221\2758+H\275!\306%\275\324t\003\275\211hg\275+Xt\275o\031\241\275Q\266\265\275%\027\271\275\206*\354\275$T\364\275h\271\333\275m\036\t\276uu\366\275\263\264\366\275\320T\363\275\237\027\320\275GQ\303\275Et\202\275_\221\242\275T\204\312\275\221H\336\275\256\307\301\275\235\024\263\275(+\315\275\231\321j\275\356\313E\275i\032\237\275\377\005\256\275\2130\265\275\321&\250\2755)\342\275\261x\373\275:\240\374\275\n\201\r\276_~\031\276\265_\014\276\205[\006\276\312\316\003\276O\372\034\276\221::\276\203\301C\276\31253\276\202\236F\2768HK\276\240\247I\276\200\335%\276Sc\021\276\352\377\364\275qR\313\275\225\"\270\275\202B\241\275\360\010]\2750-L\275\257W\227\275\214t\372\274\210\237\337\274n}\342\274\330\004\031\2749}\223\274pDU\275G\236\037\275\024+\t\275ba\2058Q\310\003<!Dw;\032B[\274\246\335\010\274\217\034\334<\\$\366<\207\213\227<\315\220\226<\250~\013=\225\367.=}#h<\014\037*<\t\377\222<\026\275|<n\376\020=\035\033\362<\222(\275<\321\233-=N\332==\361W0=\3360\220=\003S\225=4\267\255=\025\326\243=\177\245\271=\3115\233=\207x\211==\2046=\256N?=\276\242\'=8\311e=\241C\205=\027T\200=\263\030\026=\257\333\030=\323\241J=\265\306A=\266\005C=\270\236\211=ox\267=\376\274\272=\213\324\227=\370\257\242=\005\333\251=\0379\230=8\177\237=\220\304\225=\354\355\243=\221\364\225=\0139Z=\330D*=M\320\n=\273\256\034=\371j\032=\236\274Q<\3613\324;\341;\205<*F\334<&1\002=\021G\031=&\305\010=\342t\033=\215\311\200<\375\241\037;\307\273\335\273tMh\274a\027\034\274\343\271^\274\230\320\312:K\375U<D\333\023=^\207<=\364\242N=\r\026p=w\262|=\333\006\200=\350M\237=\031\361\246=\214?\253=\010\372\240=\202A\230=P$\264=\257\014\254=\300\260\301=\246\357\303=~/\273=\004W\262=&,\305=\330\231\267=\017j\237=K\355\251=\332\210\260=P$\242=\211\000\\=\252\252k=\374\376{=\2615\224=\006\017\270=\304\225\277=\000f\300=\370\270\263=\374*\255=\330\324\261=\205&\224=\n\023q=\354\2518=;;D=qBr=\346b\217=t\363\232=\242[\246=`\n\254=\322;\244=HH\262=Pa\307=ns\313=\271Y\273=\376\227\256=V\352\266=`G\254=Q\256\214=\317\351r=w\304\217=\321L\223=\226\033\201=}?8=\037\026\372<k\263&=\356;j=|\nj=b\335\204=\016\237\211=\335P\224=\331\362\210=\332\037\241=(\361\251=d\314\231=\212z\244=\336\002\233=`\025\217=\027\027\212=\003J\177=\3634V=\363o+=B&\323<\263\204\020=\374P\234<\375T\203<\320\251\204<\253\255\314<\302\006\016=\224\223\034=Y@l=\016Lx=\216[\206=\223\322h=\374\026d=\321}\215=\266\307\211=s]\206=\212C_=s/?=\0070y=\337jf=-Us=\257\026\'=\260\301#=\001\nd=\3133d=\373sM=\361ZO=\307\302B=]h\025=k&\014=\311\367-=WQ4=\030\230G=8C9=o\206<=\244+\t=Nk\350<G\363\"=\240Z/=\203\0360=`[>=\373!E=\021UA=\266g2=g\254\030=\357\2754=S\304G=\374rN=\254\006P=\206\247X=[?b=P\2047=\022/I=\205\354V=\331\022/=\321\014D=\233\n!=A\263\335<Gw\210;\361\2342;\256\255\3039\241\316\261\272\267$\276\273\036\210M\274\233\032\r\274\203N\207;\261\376\200;No\241\274\342K\371\274~\020\335\274\236\007\230\274\010\276\252\274-\343o\274\313\377h\274&\210\2449\346d\027<+\200e<h\271\207<ut\220<\021\202\005<\010&:<\246Z\352;\343\230@<[\005\251<\243e\322<\035\201\325<&f\324<\357\240\032=\242\310$=\242\020&=)\3571=\354\3064=E\233?=v\245/=\273?L=\260\333e=\033\\^=J_?=\234\2238=\030\245S=\177\313<=h~I=\210\3215=\010\364A=\256\000D=@\3462=\256(F=\032\377\\=9\262c=\321PQ=\262\225I=\307\377b=\262tm=\217\216a=\321\321\202=a;\207=\271\320S=\214a@=\343Td=\226\016`=`\212S=\001\245p=\313\351n=\313\363\033=m[\017=\r\005B==I\025=\0043$=\2355\244<\210c;<9\277\006\275\374B\t\275\270t\233;S\237\272;\024\036h<cv\030<8\364C\274\354C\212\274x~\224\274T\344\376\274\210\013p\275\357\222v\275\227\306f\275H\254\213\275\202\360h\275\332~\023\275\322H \275B@L\275\274h \275\274\330\356\274W\001[\275\354\377\202\275\317W\202\275\344\376h\275w\351-\275K`\005\275\263\264\311\274Y\375D\274\177\344\374\273\214I\374\273_\270\010\274M\226\372\273\026\374\247\274\2414\356\274\023\304\'\275\347\247\'\275\252v$\275\370^|\275\002\316\224\275V\336\246\275\037\336\243\275\220\316\224\275\355\225W\275\025\230\026\275\207\214\351\274+e\326\274+\034%\274\332Z%\274A\001B\274EJ\345\274\334-\374\274(\213\314\274q\272\311\274=\371\031\274\370w3\273\370\213\002<\277BD<\246\240\275;\332}\273:\361\3034\273\000\360\225<\307{\210<\025\274\246<\362\332\230<\307\230K<\024\002\242<B!g<$E\r\274\212\322\241\274\035\t\231\274\005\010\267\274D=\372\273\270\317\336\273\034\220\235\274\226\376\327\274(\257\305\274\303l\'\275=H\'\275\324\317!\275\262S\014\275&w\020\275\225!\"\275R(v\274u\321l\273\376#\033<,\377>;\3116\342;\245\251V<p$u<>\224\324<\326u\324</\021\325<k\247\325<H@\277<E\344\005=\2501\020=O\345\367<~\233\262<\207z\023=\177C\020=\365)\006=\267\323\010=]\235\006=\236\360\004=\033\372\325<\376\025\'=Wa-=t*%=j\2221=\21207=~\0234=,\002]=v\177C=5\273E=\277\267Q=\311\360 =\206=;=\241\030E=M=E=\273\327Y=}\330@=>\307,=e<6=\237\3070=\216\0366=c\365J=x\316F=\257\201\204=A\375\223=\031\370\213=[\313\177=/8p=4\334`=\254\0029=O\2212=\031\264\325<N\333\305<Z\351\030=\330\004\027=4L\013=\010\210\271<4\002\n=\030u\332<\213@\275<\027\222\243<ns\037=\034\334G=\025\346U=\254ZS=\313\226\\=\021\304P=+b`=e\303o=\261\013z=Ehr=\275\256]=\037\'^=\330/N=\317\342R=\016\224f=\301\323n=\211\267d=\007X\\=7\260_=c\tb=\217\367T=?\231J=\215\375j=\027\344f=n\363n=\276)m=\375\000Z=?XL=#\217Z=\301\312q=R<o=A\244z=\300\371\201=\346\343a=g*E=\273\203W=\316\372Z=t\255T=d\376h=\033\243j={=8=\275o/=\017Gj=\344:j=D\200`=\257\001h=F2\202=O\326\204=g\005~=\365\316r=\2706\201=\n\304\206=J\221x=x<\206=\212\313\207=\361\324\212=- U=\033|\037=\000e\016=\266\2065=OAM=\265\325$=\2758\n=-\211F=`\271.=\311h\021=Dn\033=\220\334\030=3\237\257<\274\360\271<\201y\212<\303\315T;\202\357\001\274\235}5:oV3;\254\304s<\021\230T<,\316?<L\017\252<_\237\327<\352\205\315<\346\273\317<\226\240\017=\311\350\010=Q}\027=\256/\024=\333j\022=\274\223\026=\3028\n=$\321\374<\213q\337<0a\217<\037\007\217<\3536m<(x\241<\377\273!<\304\305F<\022\326\337< \244\367<\213\333\360<\205\254\024=c&(=\312\3345=\342\016==\336\343;=\032\246\036=\003t\004=\314\307\300<\330\026\343<bZ\343<f\355\016=O\005\331<\311\005\321<\376\242\271<\300\362\210<\240\2554<\0259\230<\223\220\271<\201d\214<\'\251p;U=l;\301\330\215;\3375\364;\254\311T<\204\275\252<S\366\374;\240)\267\272\251\357\017\274Z\367\217\274*Q\224\274\033\372\272\274U\347\215\274jw\333\274=Y\346\274\335\325y\274k\201\335\274\303\303\364\274\313j\356\274+\232\333\274\2402o\274\255ab\2742\247\276\274L\034\325\274\273;\267\274\240\335-\274\205\037|\272L\240\002<\202Q\244<\352A\276<A,\270<\362\263\t=\237\243\323<\357\363\032<&\350\306;\2321\013<=\374:;\214\215,;\320)\220\273vr\025<\350\tF<\030\307\254<\250A\276<\273c\231<\254\375{<\302D\301\272\333\250\265\273\254k\200\274\236\006\211\274\355\353\021\275\031\2601\275\241\035\217\275\017\024\252\275N\020\361\275\n\243\346\275\244\243\372\275Xv\313\275C\220\247\275\224\336\205\275%\357\213\275\276v\203\275\010\343\276\275C\r\335\275\267\205\333\275y!\273\275$\320\223\275M\005\224\275\265\010\227\275\350\2457\275A\220\030\275b2\334\274\357W\377\274\366\325[\275m\337\223\275\370X1\275<\251/\275\010\024\203\275\376\343\216\275\346$e\275\007\277,\275\332\t\335\274\007:\267\274)\277\002\275I\236\317\274\234\314@\275M\262\260\275aW\245\275\321\211\201\275\244\265\"\275u\313X\275\347l^\275\007\363\214\275kC\265\2755w\270\275-R\206\275\260\034E\275\276w1\275\204\232\227\274b\371`\274\337\2257\272a\301\002\274\315\326\003<\263\205\006\273QO\240;0Ly;\274>\3618\372\257\237<90\377<\267v\224<m\244\233<E8^=\237\317^=\252\226\031=\350\301c;\234\255l<(\023\344<\235\362\304<\245\014\344<\373\332\"=\222\365P<\345\253_<fD\004=\320\307\336<\340\375\322<N\221\207<\001\024\374\272XD\256\273\3560\316\274\334\243\333\274d\375&\275\310\2119\275V}\261\274u\240\202\274R{!<\212\331\267<\245\023\313<6F\000=\017\036\000=1\362\365<d\225~<\213\367\275<O\0200<,#\351;\224\211\277\273T\2031\273\353E\333\273n\310u\274\367S@:I\352\006<\0259\220<\210\253\324<(\342\347<\372\377\232<q\262\257<\211_\255<\334\002\025=\234g\005=<\"\007=.>\t=\244\344\t=\326\2242=\006\020\'=\314\312)=Hw\016=EV*=r\250<=\2318Y=w\r^=\307kX=\360\"E=P\305[=\255\334Z=\230\367C=X\035(=\273\2231=\326}R=\205\301N=\262\033~=\030\347u=\273Ov=P\024}=q\237~=0@Z=w=s=\353Wc=|\n]=\270\236j=\310\313}=\330\365|=\255\336i=\300\277h=\325)v=\365\337l=\212Dx=w\373l=V\356o=aGd=\\\340J=\354\213\013=28\034=\026\226A=^&Q=\265\241I=\251\235\177=\035N\204=\245\364\207=8\353\201=r\320\205=\217\361t=\300]o=\313\024H=\241\013H=\276\334|=\377\300x=\274\305W=Y\373A=\225\307Q=\370\024e=0\270V=\007/)=L\352!=02\371<\010S|<\355t\224<\320k\324<\255p\254<\250d\216<\005\350\342<\256\263\333<u!\254<)\266\265<\355\001\035<E\332l<\027\244\331<\200\316\000=\022\020\016=\013&\371<ct\021=\017]\370<-\251\323<\014\226F<0\337\336;\320\203\200\271\332\301j\273]\250-:\3336\341\272Eo6\274\240\372\206\27476\231\274\323\300\000\275+\277\"\275\372\333\000\275|\322\303\274\356_\347\274\210\376\270\274\034\247\265\274wk\210\274$\273\251\274Vr\332\274\320**\275\300\022L\275\327\0362\275\004\270\300\274\216\022p\274T\320c\274\"2u\274|4i\274\000\013e\274X\"\000\274\207_.\273\037\236\314\271\217\342\024<)\374\374;\355\315\255\273G\314\345\273R\233\245\274\253H\215\274\225E\021\274\302\257I\274\372\002O<\365\334\201<\200\275\261<\242\253\245<U\324\005<\303\257\333;Q!8;\236\300\366\2723\352\312\273\330\306\321;e3\001</\0055<\353\357\233<4\200\302<\204\260}<\341\360~;}\023r\273\321\331\230\2736\243\'<PJ\310<\301\213\362<\022\332\304<!\223\264<\351\370D<-\336\323<%o\013=\246\264\032=\252\215\023=E\232\026=\340\237\021=`\357\016=\275\362\023=\360\225\021=\260\343#=\2170-=|^%=\376\375#=\354\201\022=q\220\357<\253p\374<\366\215\010=P\204\373<\'\014\373<\006m\274<\265\346\330<\240i\305<\203\346\307<\213 \036=W\3279=\354\207)=%B)=Ww.=7\313W=h!}=\352\034e=\300&Y=m*Y=\034\200H=l\323;=\254\362&=\017\013\r=z\341\305<\312e\365<\340\246\331<\351\034\373<o\332\351<\025\374\371<\303\226\030=:\355\036=\027\231\010=\267A\320<\"\206\214<\341/\222<\014\237Z<r\316\211<\371\341\337<\236\316\000=\317\347\365<G\037\205<\037W <7\224\005\273\276\334<\273\374\n\002\273m\006h\273\372\024\032\273y\346\254;\321ml;\376\355\367\271g\360\001<\261\2053\274\342A\244\274\212`\267\274\316\366\264\274\213\230\274\274\345\252\005\275\003\022\033\275\270\037\024\275e\037\235\274\\\350f\274\212\307-\274\374D\034:Z\303\0259\230Q\257\272#\330\236\272\177\330\003<\3566\t<.9\344;\317\0169;\342v:;+\305\261;\010\261\022<\302\347\'<\313\200\214<M\224\230<U\342E<\303,\336;\345\315o<\331\245\313<\223\026\274<|\271\271<\2677\036<\266\035\263;\3677\033;\212\035;\273\"\340\001\274Fk\324\271\343_\346<B\327\351<\272\205\372<\034\266\336<\014\365\304<\271\336\332<\322\204\377<\000\352\002=\250[\370<\005\'\362<\272\177\364<E\230\017==5\022=\024\353 =J\222*=V\324-={o5=\361\0221=\35118=f,1=\276\360 =\370\314;=\235\013\035={\2570=\266,,=-\244!=\326\2136=*(3=Dp6=O\2636=\\\0340=\031@+=\353\376<=s\263\035=g^\352<7\307\010=\271\240\314<\314\276\244<\t\024\374<\006\347\013=\036\362\375<dK\022=.\022>=e\252A=\271\346B=>\004K=Q\266R=HLK=6LH=\215\242V=\332\317<=y\273\"=\347\262\024=\210C-=\010\327\017=\025d\034=j#\025=Gk%=\260|\035=\277\261)=\300\236\037=\036\036+=\230[\t=\033*\006=wT\323<\037\202\000=\002u\026=\200+;=\344\227N=\000s:=uW\351<\2376\007=\2751\256<\025\'x<$\312\234<{-\301<\021\267\004=}W\021=c} =\264\325\020=\"p%=\305\262&=\275\031\017=\205\t =l\367E=\250\241S=.\326\\=\331xi=\2579c=\006\331`=\'\357`=#\371}=\375n\211=\342\323\202=Z\314\213=\253\021\216=\201\303\213=\266\206\202=!\341T=B\365I=\027\304p=60D=\257DR=\370\303$=>\212\024=\324\005\020=\336\003\273<Q\216\264<}\"\024=\343`\036=J`\356<\026\016\274<(:\335<\247\026\344<>\322\000=\017\236\031=\024m\360<V\034\324;\177\225\243\273\303^y\274\024!\241\273\316HA;RE3<\315\260\314;r\327O<\335=,<09\017<\277\235\212<\302\003\312<\022\344\373<>\256\001=\212\002%=\211\0354=\220\023==:\243-=L\0343=\237l@=\024q>=\353\"F=@\017?=\237\024.=\236\213$=\271\365\036=\005\227\032=f\t\031=&)\035=\366V<=jO<=\245\2677=*\035!=\234P\007=\256\010\022=\242\355\007=_F\363<\030*\377<\024\225\355<>Xa<\311\323\034<\324\376\241;\2042\330;\216\2574;\331\367\367;\350\2308<$\3662<\022\223\"\273\341\314\225\273q\375\r\273}\307\226\273\200\204\3118v\010\224;\220\254\016<\260\376\357;e&\200<\201\014\301<2/\316<\2021\312<\022\332\311<v\007\003=\247\030\010=\024\321(=h\3362=\202\217\003=v\255\305<\245g\265<\377\375\232<\252\r\247<9\033y<\257\215\030<d1x<A0c<\206@\376;uh><\332\377\334;\r\'&\273?6\331\273\304X@<\225\252\230<\221\264\260<T\301\237<p3\344<\211!\007=g\251\'=?B)=\375\2169=\266\030\"=\257\241*=a\2676=\225\016<=\037\376I=\2429:=)\207+=\212\272%=(\211.=\2704!=>\2151=4\215\016=Ts\033=Dx)=\364\265\034=\027\341)=\315\353D=Q\254S=>\304I=\347=:=Z\305+=50:=7YI=\321\360I=\255\272E=\254\361E=u\352D=\305w5=\305y\032=&\270\020==x\004=dl%=\357\2450=\313\275 =:\260\361<r\315\270<\221\340\260<\251\013\340<\214\235\301<\327 \000=\"\307\024=\t\231\022=gz&=\ty+=\2718;=\220}:=,\2253=2(==\004H\033=\344\236\024=\374X\010=\006\204\025=\225\313\021=\373\177\020=\214\302\022=\230\232\337<q\201\372<2X\027=\267o\020=\010\201\001=[\221\002=\020\004\005=\362\033\274<\343\350\332;\2267\t\273nO\253:#~\263\273\355\030=;\375\264\"\273\211v\213\274Si\227\274I#\241\274\247\331\016\274\356\212\221;\344\363\002<\255\365\214<\344m\251<\251\203\253<\035\327\342<\226\314\360<a\267\323<z\357\323<1\261\342<\223O\002==\003\365<||\360<\000>\375<qR\r=\000\254\323<\343\037#=\246\366%=\2308+=\307Z\'=\263U\032=\324\371\020=\207\007\372<5\000\314<\320\323\233<:7\316<\341\271\373<\337\330\327<K\027\350<\317\231\335<\336\236\233<\010\027\254<\377\341\224<F\273><E\001\212<q\n\261<M\214\343<\233R\001=\002Y\370<\3538\274<\345\355\020<\207>\377;\340\327\211<\377\273\272;\016\252\341\273\215S\204\273\341_\0009.\272I<D\352|<\256\332\220<\177\250\271<\221\r\252<\323\251\254<\024\232f<o\352a<\366c\236<1\212\252<\320T\263<3\350\257<s]\227<\277\021o<\026\020o<C\232\220<8\236}<%E\301<\240\377\337<\337v\267<\355\033R<\271iU<\224R\210<*OT<\320>\224<\374q\255<\211\212\305<5x\364<O/\361<\254\244\002=VX\t=\353K\010=\230k\005=\260\277\007=\351\340\031=\024\3240=\241\3174=\363\216+="
      }
    }
  }
}
node {
  name: "Const_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "W\220\010\274\3577*\272.\356-\273~k\316:\244\244T<v\356\003<\270\242\201\273D\t\332\273\000e\335;W\346\376\272\237\204h\272D\234y\273k\035Y<\033Z <\265\257\027;c\003\007\274\325O\271\274\246\344\337\2739\360\262\273\304y\021<\352\212}\274\032\242I\274G\253?\274\376\315\265<*\007\247;\336\310\r\274@\346\341\273\221K\214\274\241\356\014=\246\367\275\273\245\252\374\2724&\301<\373\270\201:\346 \342\273\036@\225\273\212\n\027\274:t\271\271f\331\340<%Z\007<\312}\314\271\203\304\370:\341\247N;$[\316\273d|\256\273)\02049\253\031x\274w{\314\273O\227\035:\274\373\264<\013H\206;\220\204y<1&\021\2733\336\260\273F\360\224:\375\251i;\327\217\264;#_\221;vq\220\273\005\326B\272\312x\004<\027\264\027<\351lv\273\003\200(;b%\375\273S\237\256\273l>\207\273b\372\352;\200\031R;*P\264;\217\353\304;\177q0; n\277;NM*\274b\3663\274S\r\227\273\336t\030\274\371\233i:p\257\245;\014m\323;\265\305\036;\310\335\'\274\024\272\217\273\005\246=\272\236\264P<1\227\230\274\027p\336\273\"\3606\273\027\265,\274K><\2722\315\002<\032cu;@\340\263\272l\3729\274\236\023P\272wo\226\274\311\251\023\2732]D\273\313`\331;\262<\270\274<\2757\274\341\244\001;\\hq\273\000\r\200\273\013d\371\273X}\271\273\346\221\334;?\014\246\273\315\307\304\273H\314\326\273\217X\216\273\200\213\211\274\267cc<\213\"\201<?\225\255;T\344\251:z)\264;O\310I<\341>z\274\020\217\250\273\211\2050\274\323t\n<\342\351\227<\361\273l\273)X\007\274\2322\003\274\016\265\200<\230C\"<\017\216\037\274\334\300\034<x\200q<\345\t\341\273\315g\365\273\365\t\216;^\252\311;\017\320\021\274\337\245d\274\003\211\342:\265\014&;\315M4<8@\035\274\227\226\207\273\201\256\370;\3622M<H\021\272\273\224\003O\273v\304\370\273\003\240\260\274\200\332)\274\000\252\262<~\220\211\274\367\032\303\273~\245\223;\364\337\016<\025A\353\274T\331>\274\240\332\240\274\266\036];\207\346W=\360\341\311\274\305\317\254\274\353\250\303\273>\206H<\261hK\272\312\314e\2758\223\233;\177\272\037<\254\\\322\2749\024\371\273\023*\223\275lL\237\274\3020\021\275\320/Y\275\265mo\275!\\\272=2>\005={0\270\275\241\354\021\274\332\346\361<M\336\357<\245\357\000\274\316\205j\275]\240w\274%\033\r\275i\032r\274\t\001g=\372t\016=\016aB<\024\376i<\207\031D;\002\304\306<\265\241\252\274{Rf\275\246o\353;6\023);\346\373\000\275\'*(\275\311\251\235<\302\224O:\356\363\275\274J?\374\273\206!\002\275\025\027\217\275\371C\364;\\\373\216=\264\363\222<\274\345\250<A\022\300<R\343\213\275\253\351\245;a\037\256<\312\362\230\273q\023\276;P1B=\n\332M\273:\260\007\272\272\356\177\274J\321=\274{m\213\271]\325\005=\017\277\247;\371+\203\274\300X\013\274\312 \262\274\263\260\247\273\036\320\265\272\236\217\263;\344=\215\273\323z\234<W\036\235<\211\367\266<\306\016\375;\274t\000<N\014\340\274\022X\240\273\324\335\271\274\370\244Z\274\215~\207\273\200\326\377\274\316\373\370\273\264\0060<\006a\014\275l\333J<\374pS\273Qy\231\272\320\366\207<\010^\222;\246\026\004=\361|\234\274b\215\306\274\304y_\274?\270T<)\326\270;\232O\211\274\001r4=+\202\007<\234\370\n\275\202m&\274Eh\310\273\324\302\236;nc\016\275\231\221\215\274<\216y\273\251\212\252\274\264\277\220\274\244\207:<\2244`;\017#\343\271\346y\007\275\275\307\"\275\r\331\206\274P\317x<lV\352\274:\3650\274\362\223H\273\273\206\032=6\314\241<\001\177\267<\377\263\244<\377F\003<4\367%<C\202\313<\320{H;\313\251\344\274\211\3743=\303\366.;\033 \214\272\014x\225<@1\030\274\352\331\030\275h&O<l\330\235;/m\t=\257\014\005<\3568\210\273\262M\221\274\2260\237;\3548\017=\026\201|;\342\3451\274\203\217\2719H=\203<\201\337\031<\252\211\343\274\245\001d\273\200+\001<\270\205\010\273\022Q\245<\231\016\241\273\201|\273\273\303^\240<!\376\242;\272\246\006\273\264\277\337<\250\253\211;\315\035W<=\261\035\273x\260E<V\017B\274u\036\321\273\023g\247\274Y\263T;\203Y\223\273\365O\201<\252\030%<\177a,\272f\262\305\274\313\210\322:\277@R<]\207^\272\013\t\306:p0\244<\337\300\272<G\324x;\304Yd\274\224X\343;\273]\257;7\246\307\273\0041\255;\233\257&\273\264N\n<Wk\222\273\201\265\217\274\032\200&\274\020\265\326\273p\260\251;\254\272\3439^\242\306\2745v\310\273\017\221$<\211\2634<\221\023\266;5K\321;\207AG\273\035\306\257;\263\356\257\274\306\031X\274\326\253\032\274\001/\001\274\346\353\221;@\223\222\273\276Ux<O\241?<\237\216\275<\343\256.<\025\035\264;\007\323\026<\336\265\222;|\202\033;,0\204<\362=\265;\247\264\205;\367\t,\273\341T\006\273\210\212q<xg\302\272\036\204E<\3271b;j\302\314\272\220\362\342\272!\2111<\251\376v\273\003v\022\274\326\262\340;\262\212\251;\304o\222\273\222`\272\274d\252\246;\253\217\256;\362\313C<T%\226<kt\274;\037\2325;\313\231`\273\031\217K\272bu\215;\016\241>\274:\2267\274\017\270D\274It\200;1jF<\033\204C<uA\353;\211\262\354;\210F\232;K\025\300\272\254\272\013<\252RB<\027\220\216;\303\231\236\273\n\022h\273\345\375\304;\345\354+\273\310BO\274\020\031\360\273\026\370C<J b;\310g\334\273\203\364\203\274\203\314X\274m\0131<\305\225\213<\0252\272:\242\026\022<\260L\177;\354\033\334;\366\377c\273Q\375S<\331\266\307;!\262\260\273JU\341;(\350\031\273T\270n\273M\204\020\272\235iQ\273\245\373\005\274\"r\022\274\"\325u\274\346&%<\256S|\274I\263)\2730\302\026:\357\354\026<\360\333\'<\220\037\220;t\215\242<I\246\215;\374&\320;%\213\337\273\001\225\2579\017\013j<\322\225\3737\372\267\3738\013S\025\2747\254\315\273\235\353s<-c=\273BK\223;&\312\211\274\006\215\1779$N\205<\013/\300:3\357\202\273\374\377\343:at\340\272o\212\037\274\"2\253\2720v\023<\n.+;\353\315\273;Y\037\017\273\253`\376:\335\2058\274\270\032\213\273\312VD<~\005\203;d\365\247:\364\302\223;\235.8;\243\216\2529:k\033\273\351\362\246\273\331\343\373;\030\353\271;\365Y:;\327\245\332:\346\322[;\221\021n;1\225\020\274e\321\257;\374b\224;O\276\006\274F*\310; +\354\273b\3707\2749\351\271\274\276\363\262\272\223w\031\273\017\232\347\272rp\227\273\260V\352\273\374\210u;\213\234Q<i\245\276\270\364\320\311\274\035*B\274\017\357:;`\363\004<)\376;\273?\375\301;\177\005\2028.2n<\323\302\024<\340\304\245;\320\323@;\276x\304:\257\260\026\274`:c;\344\355\202\273l\353\236;\305\030\027<D\325\266;s\003\210:\223\322\013:&YJ<\306\243_;\301\236\257:(\314~;<[\353:\020\360s;\231\210,\273\033\311\001<\333\333\360;{N\263\271\256K\305\273\262\224\341\271n\014\371;\323\317\207\273\244\t\212;N}b\273\244\\\204;\373T\337:\355\202<\273{n\273;\312p\332;\251\321B;\337\214A\273\317+\014\272\346\355\356;\203R\177;\276O\257\272\261F\"<R/s;\364\tI\274J\267Y\273\341n\037<DR\3319\340\307\316\272\321x\006<\367\302\217:\301\256\227\274l\270\007\273\\&U<i+\035\274iE\224;]\253\234\274\356\226\006\274\177b?\275\000\365\303\272\336n\034=\025\025\217:\360\304\016<+\374\225\273\037\342\262\274\006,\262\273\271\255\343\272G\340h\274\017\343\373\274\345{T\273\277\222-;\030\204m\274\3706-<\010\337\251<\304v\213\273\035HN\274\023?&<\222\276\034<\016\357\335\274\343\346R\274\373\357\250\272\252n\273;\356>e<\251\017\032<\010<\366;\222\362K<N\272\207;z{;\271\225\306b\272n\336\004:j\320_\274\247\370\034\274\267b\\\274[\343\205\272\253@c\271\320\230\310\274\366\004b\2741\343?\274\211\346\356\271\317I\307;KY\242<\257\262~<\032\277\376;7\363\342:\226\031\203<\336\227\217\271\n\350\007\273\351\022\216\274l\316p\273i\221\256;q2\222\271d\366w<\314\206\330;\315V1<\242\345\213;\230\325\304\273\370W\215\273d\366\213\273v2\255<\t\247\233\272O\241\207;d0\233\27247\277\2731\252\374;\362D\253\273\021\254\275\274XqB\274\261\031!:S\221\215\273\362\242o<\\B/:\334\345W\274\203/\003\274\035K\333:4\277\227\274\376}\204\272\373\252\3069\017Y\225;\365\356\377\272\307\216\264\273\330,\311<[!:<\316BX<\252\261\323\273\307\230\207;\363l\323;\3257\021;T?:<\272\237*:\352\274A:|\230A:m\314\007\273\345\323!<p>Z;\017\252\203\273\356\304\374\273\363\207o<\305\246\0309\227\230\312\272\234\251\302:\216\340\2479\373\332\3449\245>\264\273\004\335w<\035\245\';\303\307i\272\257q\203;U\027!;,\265\3219\306\3141<zr\232\273eU\346:\332\036\206;W\t+\274\177_\357;\364 g;\2454\246:\203\371\310;\0372\227\273\243\335l\273\177y[;&\0321\271>k\034;\001F\310;\017D\22295\300\211<;\250\021<\026\353\371\272D\t\201\273\317|\010\273\255a\014\273\265[\005\274\222G\313\271K6\206\274\256>\246\272M\245_<\317\035\003:\301!\370\272\301b,\274\211\023=<\034\263\311\273\004i=\273\013\306\'\273\344\211\235<\336k.<\255x\226;\033.@:\350\202f;\036:\274\272\016P\244;\000>\245;U\262\200;\313,|\271\372/_\273\203\210\304:\361N\036\273<\355\035;\3349\304;\353\200^;\177\240l\272\334:\022\272np\016;vJ\000;\023I\336\272\377\203\225\272_u\022<\224\344\002:\365\262[;\231\230\214:\2618I\273t\037\370\272\316\243\230;\352\325\340;I>n:\333C\211;y{v;=\213\323\273A\207\262\273Vy\267;\353d\016;%\243\007\271\336Y\311;{0\362:\260\312-\274\t\316{\272\'Uv<\216\300\276:\232\017]\272\031\253P;rJ\005<C8<;\324#\216\272\335\373\212\272\203[\252;\344~\212;\322\303U\273\211C\314;\275\037\036;\321\302L;}2_\274n\365=\274\203\232M\273\371T(<\317\244\336;(\\\n\274\200l\261\273\".z<\325\250\222\273\331q\304\273\264\030Z;\346\373\2709X\230u\274\375\236\355:jl\254\2735\244]\274A\370;\274\'x\r<;0\n;o1J<$\202\312\272;\373y\272\t\361\031<\210\222\307;Yo\022\272\316fo:\003?(<\360\003?\272\035s\217;\034[\0359p\023\003:\274\321\373:e\\\006\273,Y\003\273\344\3006\2730\363\025\274|\227\3249\320,(\273A\234\270;\360p\033\274\333\267&;\304\226}<\225\201k;\006dQ\2704W\370;\302\377\267;\3208\216;\305{;;\001\361l:\272p\300\273\240\251\257\273\306\366\002\274\317\272\234;C\301B:\201;\377;\t\312\365\273m\316\233\271\220\301\020\273hl\261\273\326\025\257\273\036B\001<\226^\225;\267*\243\273\332?Z\274O\206\3237\254\022Z:\241\262W;v\344\275;\374\300\006<-\021R\274\212-\026\274\343\251\373\273c\005\032\274%\307\203\272\177\205\261\273\260\377\250;\226\302*\274/\344\010\273\373\315O<\204\nR\274\274(r\273\216\335[8as\333:\243\351D<VC\3469\346|(\274\305Kd\273D\nO;\366B><0\334\035<\263\213\024<\226qJ<\206\265q;\213\315\034\271\230\200><\217\305\342\273\017\343\202\274vlR\273;\335+;E\365\265\273e\201\037\271B.\353\273\227N_<\024LT;\202@\031<\025\232/;\225\364\200\273)\347=\273\365\227\212\274F\303\212\273\013O/\274RM\304\272\224*\250\274\0163\027\274r~\370\274\003P\207\274G\302-\275\317\330;;\205Qj\274e0\275<_\210\213<\267\266\202<H\276\241\273\204@6;\004*\r\2750N\236\274\020M\372\272:yw<v\250\232<\367\240\000\273\2439d\273\023\323\356<\274?\343;aa#<1j\253\273\353R\316\274\224\032\263\274X\261\356<\301^/\272/\221\306\274D\024\003\274\276\320X<\334\017Z<\341\246t<\364\000\210;\271</\274)\364\307;V\342\304\274559\275#7\202;\002\330\213<N\221\300<\017\372z\274\275\245:\273hk\216\274/\350\303\274\347\035\204\273\337=\311<\232^\214<\003\r\200;w`\313<\303)\223;\374[U<\206<\367\273\232\351\203<X\256&\274\217\213\346;!N\201\272q\211q\273\374\271\237<\240+F<W\360I\274\201\203\260:\245y\016=\252\274\310:\221\337z\274c~\n\275\260.7<\003\022a<\020\237J\2731W\220;\212]L<\332\261\327\274\005\364\241:\031\225\232<\210\241\213\273\353gB\272\232`\r\274\210\006\230\274\327\246h\273\3127\254\274\247\257\033\273S\306\177\274\322\252\301\273\322n\301<B+\261;vR\323<\343\000S<\003\250?;\326\211\351;\211\204H:41\353\271\201\016c\274\263-\004<\370!E\274\311L`\273\320\022X\2744\225I;r\n\211\273=\223\020\274z\365\200<0\246\372;\3313\036<]?\020<\354\356D;\304\343\016\274<\rF;\254\361\2129(\233\177<\027\345:\273\024e\244:\324\333\261:^A\205:j\030.<\242\265\330\272\372\030\337:\200\331\265\273a\307\370;\346\245\262;F\241\002<US$;N\202T8\352$U\273\277\262\330;\022\003\230:\026b\206\273AS\263\273\217\314Y;\212\245\022<\317\375\3379\236\037L<&:\266\271\213k\326:\244\246M;\013Y\377:\"\034\347\273\017Q\356;\"\\\023\273\351\210\233\270\037\271\226;\337I\304;\025i\266:\212\224@\273\362\025\235:\375\221\227;\027k,\272G\272\210;\335m\222\272S\357\016;\000`\245\272m\304\227\273irf\274\023g\240;\\g\"<\0355\241;7B\376\271\364$e<\013\203s;;\351\\;\205\204\225\272\256\233b;\206vq\273WE`9\332\034\001\274\216\014\243:_\232`<\363\266 :m\014\316\273\317\345|\273M\031\243;Z\005\301;\017\370\001\273ya\035\274?U5\272J\370\003\274$\305k\274\235\215M;\203\201\007<:\333\212\273`\364N\273v\375/<\253d0\271(\235\250\2730n\340:WaH\274\242\200\251;\313RL<\262O\265;N\213\203;\301<\\\273\024\001\277;\344\222\213\273f\236r\273\035\342X\274\311`\247\273\004+\347\273\306\204a\273I\214\213;2/\037\273\024\276 \274\004\346\277\2737$4\273\352\274d\274\301o\036\274\324\262\375;G\270\351;\037.\252\273\301\361\252;\005\211\036\2710\025\252;o\213\231\273\034\276\336\273z\010\210\2744\331#\274\026\304\264;\010\237\242<2m\r<\n\007\3239\025\205\277\272w\n\3069\335=\323\270\323\340\304;\020O\247;\0373\024;\244\251\035<\000\311\227\272@\312X\274g*\371\272}be\274\232\032);\253\324\006<\273:y\273Sc\314<G\037j;*\221\315;:rr\272Jp@\274\345\013\250\272\314\311y\273\342\241\233\273\016U\223\273a\260O<\351p\333:\\\205_;\tX\010<\271\210\252;\330a\375\273\252\220;\274\232\216\374\273/\212\217\272z\323u<)\203m<\373\351\274;\374/\236\273D\227\264\272Q \035\274\327\303g<\374\306\017<\223X\225;JHG\272\371\230\331:)\320\210\271\264\306\2109\002\n\n;\264\020\2729\032E\256;P\252U;\3008Q\272\306x8:\206\275Q\273\201\000\267\273\247\241\027;\r\347W;\372\273\347\272\007m?:db\341\273_\"\205;\\M\337\272\314\257q:\334\rp<\323\366\371;L\3064\273\353\202\202:\276h\027;/\3652<\303d&<\'\264\206\273X\324\270\272g\237\262:0\240+\273\324;\351\272F#|\273\377:\253\273\2120\032\274\016\221\321;om+\273@\204\233;\230Z\254\2720i0;\303\360\363;L\270\";N\262\220\273\351\312\347\273\376\324\373\273E\364\224:VM\206\273\277]|;\307\3572<\372 \235;\373\265!\272^\nW\274\347z\311\273G\377B\274\304(q\272hk^:=\233\330\272\212\\\224:p\007\375;\350\317\315\272\034,\206\273Q\350\013<V\312\236\274\354\212 \274\202*B\273[\364\212\271\273n\312\272\374\2420\274\037\361\321\273-\233Z:\002\343\211<\013G\235;\2533U;@\2577<\333\263\353\271\020\315\306\272\233\300\3068\375\326\031<\252v\r:\302\032\240\272\025\356\204\273\003\340\3058\270A1;\243*t;\364b\312:J\263\354;:1\374:k\306\311\273\220\262\246\273\026\366\004<\233\304-<2\017\246\272(\362\23495\025O\274\371\365\203\273\243\212F\273\217\021\256\27327\256\273\244<\366;k\013\351<\033\321\225:\233\3074;\230\303*\273\240\253 \273 \205W;$A\250;\233(\315:\321@V\272\003\242\2767>\274\210:=I\302;[\241\310:\371 \222;\177\030Z;\036\210\362:X\326>;%~\2728Xy8;\256\205\013\272i\2417\273R\276\363;\200\202\314\2735\263\272;\310s\2717,P\277\272\316]\305;\000\320\2549\366\034\372:\353\353\235:\266\316\345\271\277\342\211\270:O\256;^}\320\273\232l\021\274\300\234\263;\313\325\367\273Th\213\273\275>6<\362\330\207;\330f\024\273g\035\263;\336\242:<\177M\006;*\236\305:H\330N;\227eK;\222\301\353\271\210\333\021:K\336\230;_\204\236\273?\024\247\273\241v\033\273\202\341\337;\311\261\305\273_\263\200;\311\263J\272\r\376\236;\021\356e\272\212{\200;\245\000\263\272\262\230v;E\352\350\273\315\214\2638\302p\310\273\322g\313;\204\022\310;qw\037<\345\034\276;\333kg\273\n\234\201\274\3536\253;\367k3\274\244\255\270\273\345i\220;\026\355\241;&w\031<\241\215~;@k\225;~I6\273\3562\300;\177}\257:\\\344\230\273\201\030\243;\362\330$<\0169\223;\236\'f;\\b\217;\374l\253\267\010\360`:\001.\273:\266?\007<\330\300\324;\205\014\266\272\336y\277;-f8;+\3676:\tV*\273#\030!\274g\356\246\272.\026+<W\324\025\274q!\226;\251\344\035\274\257Y=\273\203\277*\271E\330;\274\312\344W\271\354Un< \236^;\257\375\013\274+]\261\273\315\314\227;DN\310:\247\361\214;\242\206\336;\324\302\352\273v\315\270\274D\351>\274\364\2400\274i\230\'<j\274\001<\273\027\006<u\237\223\273\266\360\332;\320m\366\272$\264\310\272\236\324\n<\343\006\006<Z<\333;\027+\336:\331\240\030<\341\221\230;7uV;P{%\273\026I\035;~\024\215;ij?:P\223F;k\\\355\271@\343<\273\017\007\236\272\323\326\245\271\204\350x\270jg\033:j\353\377:\334h\n<;\234\231:\250\337\2438p\302\214\273\247\335\253\273/\\a;Y2\311\272\243\374+\273\314\202\020;H\266\257\272\313\220p\274\326Q\177\273~\275\222\2731\206\355:\272]v\273\353\304\242;\306N\201;\345\016|\270\0275]\274\210Z\021\273#R\032;\255\016(\273X\376\231;\003\003\224;wj\217;\002r\233\272\232\270\014<\372\241\010<w\273\020;\210b%9L\366\032:\007\006\002<\021<\006;\363\341\016<\030Pc;\022\263)\274t,\353\273\336\'\264\272\347{/\273t\307\000;c\235\232\273\225t\267\273I\024\311;\257&n\272z\006\300\273W\326\206;I\r\231\273\320\177\031\274\212\237\214\273\307&\227<\307c\355;\372d`;IW\310\272\371\311\020<\320s\276;)\022\016<\177\347\273:O\252\242;\374\035\223\273D\366H;\204\354\201;8\301\036;\313\213\223;\303\240$\273\010\027\033\2731\306\250\271v\234N;\265\333\n\273q\235\241;\362\031\361\273s5\203;\335X\216;*#\004\273k\344\207;\001\215\366;\013}\233;\2011\210\272\276\350 \273\237\201\027\273^c\224;h\301\234;_\273\267:\370X\2079!\367\250:\3277\202:\001\367!\273~3\260\273\354\207\266\272\270Y\007\273\210\210\017<\253st;\345\2642\273\367\200\016\274\327p\313\273\354\366\315\2717\200\316;\313\365E\273\257\206\006<\317\306\275;\201\373\32396\322\272;\022\370\022;\022\277\236;\352\252\202:LZ\000\272>\333_;+\000\345\273\373\024\'\272z\361\005\273\2655\204;4\231\0308\340\037\035:r,\276:\361\033\371\273n\006\202;r&\350;\253\246=\272\022G2\273(\030\214:\321\363\270:M\234\016\274\024\022\203\274\267\362\020\274+\305`;\267-\344\273\033\324\t<\353o\262\273#\242y\274\367}\000\273\333\356\340\272\232a1<r\202X<\205Ct;~\223\033<\226\343\200;!\014N:-t\356;\226\313\035;\32087\273\360\2714:TK!;\030(\236;\271\311\215\272\262\333b9 \333\026;\341\222\216;P\330\376\2732\342l<Nd\337:\205\347\026;\022\221\0249\023>\t\273c\007\252\272\3301\201\273]\232\236\273\256\005\255\273\262\240\331;\027K\312;\2232k\273\023\343-;t\312\020\272\337\351\362\273tF$;\347\267\027\273\256\302\311\273!\320\265;\336\351\252;i\304\333;\"\003\223;\354\235\347\271\006\250\327\273\234\267a\274\202\\^\272\311\236\030<\240\3352\274\033\217R\274\211\2524;\177l\210;\tgJ<\270\177c;\245C.;H\214\262;\272\265\256\272\250o_:\225[\326\273)\003\2268\252p\302;\356$\002;+%\323:\333z\0249/\242!\273\357]b\273\036\363\3039\312\251b;\3038\344\272\361\260\013<]\210\216;c\255\213\273Ke\025\274\033\270\013:\024u\202;\333fX\273\217\177\264;\376\343h;\033\242d;\\5\317;s\273\2779\007PQ;\366\001 ;H\307\036:\"H#9\230q\267:\2137\253;\025\024\324;Q#\007;z\034\217\272\227\3407\273"
      }
    }
  }
}
node {
  name: "linear/linear/reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape"
  op: "Reshape"
  input: "Const_1"
  input: "linear/linear/reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Assign"
  op: "Assign"
  input: "linear/gdp_change/weight/part_0"
  input: "linear/gdp_change/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/read"
  op: "Identity"
  input: "linear/gdp_change/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/gdp_change/weight"
  op: "Identity"
  input: "linear/gdp_change/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/gdp_change/matmul"
  op: "MatMul"
  input: "linear/linear/reshape"
  input: "linear/gdp_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_1"
  op: "Reshape"
  input: "Const"
  input: "linear/linear/reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Assign"
  op: "Assign"
  input: "linear/gdp_high/weight/part_0"
  input: "linear/gdp_high/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/read"
  op: "Identity"
  input: "linear/gdp_high/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/gdp_high/weight"
  op: "Identity"
  input: "linear/gdp_high/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/gdp_high/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_1"
  input: "linear/gdp_high/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_2/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_2"
  op: "Reshape"
  input: "Const_5"
  input: "linear/linear/reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Assign"
  op: "Assign"
  input: "linear/manufacture_durable_orders_change/weight/part_0"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/read"
  op: "Identity"
  input: "linear/manufacture_durable_orders_change/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight"
  op: "Identity"
  input: "linear/manufacture_durable_orders_change/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/manufacture_durable_orders_change/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_2"
  input: "linear/manufacture_durable_orders_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_3/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_3"
  op: "Reshape"
  input: "Const_4"
  input: "linear/linear/reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Assign"
  op: "Assign"
  input: "linear/manufacture_durable_orders_high/weight/part_0"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/read"
  op: "Identity"
  input: "linear/manufacture_durable_orders_high/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight"
  op: "Identity"
  input: "linear/manufacture_durable_orders_high/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/manufacture_durable_orders_high/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_3"
  input: "linear/manufacture_durable_orders_high/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_4/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_4"
  op: "Reshape"
  input: "Const_3"
  input: "linear/linear/reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Assign"
  op: "Assign"
  input: "linear/manufacture_orders_change/weight/part_0"
  input: "linear/manufacture_orders_change/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/read"
  op: "Identity"
  input: "linear/manufacture_orders_change/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight"
  op: "Identity"
  input: "linear/manufacture_orders_change/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/manufacture_orders_change/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_4"
  input: "linear/manufacture_orders_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_5/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_5"
  op: "Reshape"
  input: "Const_2"
  input: "linear/linear/reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Assign"
  op: "Assign"
  input: "linear/manufacture_orders_high/weight/part_0"
  input: "linear/manufacture_orders_high/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/read"
  op: "Identity"
  input: "linear/manufacture_orders_high/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight"
  op: "Identity"
  input: "linear/manufacture_orders_high/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/manufacture_orders_high/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_5"
  input: "linear/manufacture_orders_high/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_6/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_6"
  op: "Reshape"
  input: "Const_10"
  input: "linear/linear/reshape_6/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_average_10/weight/part_0"
  input: "linear/spy_average_10/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_average_10/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_10/weight"
  op: "Identity"
  input: "linear/spy_average_10/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_average_10/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_6"
  input: "linear/spy_average_10/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_7/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_7"
  op: "Reshape"
  input: "Const_11"
  input: "linear/linear/reshape_7/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_average_20/weight/part_0"
  input: "linear/spy_average_20/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_average_20/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_20/weight"
  op: "Identity"
  input: "linear/spy_average_20/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_average_20/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_7"
  input: "linear/spy_average_20/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_8/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_8"
  op: "Reshape"
  input: "Const_12"
  input: "linear/linear/reshape_8/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_average_40/weight/part_0"
  input: "linear/spy_average_40/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_average_40/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_40/weight"
  op: "Identity"
  input: "linear/spy_average_40/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_average_40/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_8"
  input: "linear/spy_average_40/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_9/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_9"
  op: "Reshape"
  input: "Const_13"
  input: "linear/linear/reshape_9/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_average_80/weight/part_0"
  input: "linear/spy_average_80/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_average_80/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_80/weight"
  op: "Identity"
  input: "linear/spy_average_80/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_average_80/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_9"
  input: "linear/spy_average_80/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_10/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_10"
  op: "Reshape"
  input: "Const_6"
  input: "linear/linear/reshape_10/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_change/weight/part_0"
  input: "linear/spy_change/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_change/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_change/weight"
  op: "Identity"
  input: "linear/spy_change/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_change/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_10"
  input: "linear/spy_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_11/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_11"
  op: "Reshape"
  input: "Const_8"
  input: "linear/linear/reshape_11/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_rsi_10/weight/part_0"
  input: "linear/spy_rsi_10/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_rsi_10/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight"
  op: "Identity"
  input: "linear/spy_rsi_10/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_rsi_10/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_11"
  input: "linear/spy_rsi_10/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_12/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_12"
  op: "Reshape"
  input: "Const_9"
  input: "linear/linear/reshape_12/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_rsi_14/weight/part_0"
  input: "linear/spy_rsi_14/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_rsi_14/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight"
  op: "Identity"
  input: "linear/spy_rsi_14/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_rsi_14/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_12"
  input: "linear/spy_rsi_14/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_13/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_13"
  op: "Reshape"
  input: "Const_7"
  input: "linear/linear/reshape_13/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_rsi_3/weight/part_0"
  input: "linear/spy_rsi_3/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_rsi_3/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight"
  op: "Identity"
  input: "linear/spy_rsi_3/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_rsi_3/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_13"
  input: "linear/spy_rsi_3/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/AddN"
  op: "AddN"
  input: "linear/linear/gdp_change/matmul"
  input: "linear/linear/gdp_high/matmul"
  input: "linear/linear/manufacture_durable_orders_change/matmul"
  input: "linear/linear/manufacture_durable_orders_high/matmul"
  input: "linear/linear/manufacture_orders_change/matmul"
  input: "linear/linear/manufacture_orders_high/matmul"
  input: "linear/linear/spy_average_10/matmul"
  input: "linear/linear/spy_average_20/matmul"
  input: "linear/linear/spy_average_40/matmul"
  input: "linear/linear/spy_average_80/matmul"
  input: "linear/linear/spy_change/matmul"
  input: "linear/linear/spy_rsi_10/matmul"
  input: "linear/linear/spy_rsi_14/matmul"
  input: "linear/linear/spy_rsi_3/matmul"
  attr {
    key: "N"
    value {
      i: 14
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/bias_weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Assign"
  op: "Assign"
  input: "linear/bias_weight/part_0"
  input: "linear/bias_weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/bias_weight/part_0/read"
  op: "Identity"
  input: "linear/bias_weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/bias_weight"
  op: "Identity"
  input: "linear/bias_weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/BiasAdd"
  op: "BiasAdd"
  input: "linear/linear/AddN"
  input: "linear/bias_weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "centered_bias_weight"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "centered_bias_weight/Assign"
  op: "Assign"
  input: "centered_bias_weight"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "centered_bias_weight/read"
  op: "Identity"
  input: "centered_bias_weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "centered_bias_weight/read"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "centered_bias_0"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "BiasAdd"
  op: "BiasAdd"
  input: "linear/linear/BiasAdd"
  input: "centered_bias_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1598
      }
    }
  }
}
node {
  name: "strided_slice/pack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/pack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/pack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/pack"
  input: "strided_slice/pack_1"
  input: "strided_slice/pack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Tile/multiples"
  op: "Pack"
  input: "strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Tile"
  op: "Tile"
  input: "centered_bias_weight/read"
  input: "Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Pack"
  input: "strided_slice"
  input: "Reshape_1/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "Tile"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "centered_bias/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "centered_bias/ExpandDims"
  op: "ExpandDims"
  input: "Const_14"
  input: "centered_bias/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "centered_bias/sub"
  op: "Sub"
  input: "Reshape_1"
  input: "centered_bias/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "centered_bias/Square"
  op: "Square"
  input: "centered_bias/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "centered_bias/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "centered_bias/training_loss"
  op: "Mean"
  input: "centered_bias/Square"
  input: "centered_bias/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/centered_bias/training_loss_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Tile"
  op: "Tile"
  input: "gradients/centered_bias/training_loss_grad/Reshape"
  input: "gradients/centered_bias/training_loss_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Prod"
  op: "Prod"
  input: "gradients/centered_bias/training_loss_grad/Shape"
  input: "gradients/centered_bias/training_loss_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/centered_bias/training_loss_grad/Shape_1"
  input: "gradients/centered_bias/training_loss_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Maximum"
  op: "Maximum"
  input: "gradients/centered_bias/training_loss_grad/Prod_1"
  input: "gradients/centered_bias/training_loss_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/floordiv"
  op: "Div"
  input: "gradients/centered_bias/training_loss_grad/Prod"
  input: "gradients/centered_bias/training_loss_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Cast"
  op: "Cast"
  input: "gradients/centered_bias/training_loss_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/truediv"
  op: "Div"
  input: "gradients/centered_bias/training_loss_grad/Tile"
  input: "gradients/centered_bias/training_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/centered_bias/training_loss_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/centered_bias/Square_grad/mul"
  op: "Mul"
  input: "gradients/centered_bias/Square_grad/mul/x"
  input: "centered_bias/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/centered_bias/training_loss_grad/truediv"
  input: "gradients/centered_bias/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Shape"
  op: "Shape"
  input: "Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/centered_bias/sub_grad/Shape"
  input: "gradients/centered_bias/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Sum"
  op: "Sum"
  input: "gradients/centered_bias/Square_grad/mul_1"
  input: "gradients/centered_bias/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/centered_bias/sub_grad/Sum"
  input: "gradients/centered_bias/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/centered_bias/Square_grad/mul_1"
  input: "gradients/centered_bias/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Neg"
  op: "Neg"
  input: "gradients/centered_bias/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/centered_bias/sub_grad/Neg"
  input: "gradients/centered_bias/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/centered_bias/sub_grad/Reshape"
  input: "^gradients/centered_bias/sub_grad/Reshape_1"
}
node {
  name: "gradients/centered_bias/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/centered_bias/sub_grad/Reshape"
  input: "^gradients/centered_bias/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/centered_bias/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/centered_bias/sub_grad/Reshape_1"
  input: "^gradients/centered_bias/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/centered_bias/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Reshape_1_grad/Shape"
  op: "Shape"
  input: "Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/centered_bias/sub_grad/tuple/control_dependency"
  input: "gradients/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/pack"
  op: "Pack"
  input: "Tile/multiples"
  input: "gradients/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "gradients/Tile_grad/pack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/sub"
  op: "Sub"
  input: "gradients/Tile_grad/transpose/Rank"
  input: "gradients/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/Range"
  op: "Range"
  input: "gradients/Tile_grad/transpose/Range/start"
  input: "gradients/Tile_grad/transpose/Rank"
  input: "gradients/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "gradients/Tile_grad/transpose/sub"
  input: "gradients/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose"
  op: "Transpose"
  input: "gradients/Tile_grad/pack"
  input: "gradients/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Reshape"
  op: "Reshape"
  input: "gradients/Tile_grad/transpose"
  input: "gradients/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/range"
  op: "Range"
  input: "gradients/Tile_grad/range/start"
  input: "gradients/Tile_grad/Size"
  input: "gradients/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Reshape_1_grad/Reshape"
  input: "gradients/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Sum"
  op: "Sum"
  input: "gradients/Tile_grad/Reshape_1"
  input: "gradients/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_15"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "centered_bias_weight/Adagrad"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "centered_bias_weight/Adagrad/Assign"
  op: "Assign"
  input: "centered_bias_weight/Adagrad"
  input: "Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "centered_bias_weight/Adagrad/read"
  op: "Identity"
  input: "centered_bias_weight/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Adagrad/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Adagrad/update_centered_bias_weight/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "centered_bias_weight"
  input: "centered_bias_weight/Adagrad"
  input: "Adagrad/learning_rate"
  input: "gradients/Tile_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Adagrad"
  op: "NoOp"
  input: "^Adagrad/update_centered_bias_weight/ApplyAdagrad"
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  input: "^Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "Const_14"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "BiasAdd"
  input: "ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Square"
  op: "Square"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_16"
  op: "Const"
  input: "^Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training_loss"
  op: "Mean"
  input: "Square"
  input: "Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ExpandDims_1/dim"
  op: "Const"
  input: "^Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ExpandDims_1"
  op: "ExpandDims"
  input: "Const_14"
  input: "ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sub_1"
  op: "Sub"
  input: "BiasAdd"
  input: "ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Square_1"
  op: "Square"
  input: "sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_17"
  op: "Const"
  input: "^Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss"
  op: "Mean"
  input: "Square_1"
  input: "Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients_1/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients_1/Fill"
  op: "Fill"
  input: "gradients_1/Shape"
  input: "gradients_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/Fill"
  input: "gradients_1/training_loss_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Tile"
  op: "Tile"
  input: "gradients_1/training_loss_grad/Reshape"
  input: "gradients_1/training_loss_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Prod"
  op: "Prod"
  input: "gradients_1/training_loss_grad/Shape"
  input: "gradients_1/training_loss_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients_1/training_loss_grad/Shape_1"
  input: "gradients_1/training_loss_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Maximum"
  op: "Maximum"
  input: "gradients_1/training_loss_grad/Prod_1"
  input: "gradients_1/training_loss_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/floordiv"
  op: "Div"
  input: "gradients_1/training_loss_grad/Prod"
  input: "gradients_1/training_loss_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Cast"
  op: "Cast"
  input: "gradients_1/training_loss_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/truediv"
  op: "Div"
  input: "gradients_1/training_loss_grad/Tile"
  input: "gradients_1/training_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/Square_grad/mul/x"
  op: "Const"
  input: "^gradients_1/training_loss_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients_1/Square_grad/mul"
  op: "Mul"
  input: "gradients_1/Square_grad/mul/x"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/Square_grad/mul_1"
  op: "Mul"
  input: "gradients_1/training_loss_grad/truediv"
  input: "gradients_1/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/sub_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/sub_grad/Shape"
  input: "gradients_1/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/sub_grad/Sum"
  op: "Sum"
  input: "gradients_1/Square_grad/mul_1"
  input: "gradients_1/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/sub_grad/Sum"
  input: "gradients_1/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/Square_grad/mul_1"
  input: "gradients_1/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/sub_grad/Neg"
  op: "Neg"
  input: "gradients_1/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients_1/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/sub_grad/Neg"
  input: "gradients_1/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients_1/linear/linear/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients_1/linear/linear/gdp_change/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/gdp_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/gdp_change/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/gdp_high/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/gdp_high/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/gdp_high/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_1"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_durable_orders_change/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/manufacture_durable_orders_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_durable_orders_change/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_2"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_durable_orders_high/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/manufacture_durable_orders_high/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_durable_orders_high/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_3"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_orders_change/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/manufacture_orders_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_orders_change/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_4"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_orders_high/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/manufacture_orders_high/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_orders_high/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_5"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_10/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_average_10/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_10/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_6"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_20/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_average_20/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_20/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_7"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_40/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_average_40/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_40/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_8"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_80/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_average_80/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_80/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_9"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_change/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_change/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_10"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_rsi_10/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_rsi_10/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_rsi_10/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_11"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_rsi_14/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_rsi_14/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_rsi_14/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_12"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_rsi_3/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_rsi_3/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_rsi_3/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_13"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Const_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/gdp_change/weight/part_0/Ftrl"
  input: "Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/gdp_change/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/gdp_change/weight/part_0/Ftrl_1"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/gdp_change/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/gdp_high/weight/part_0/Ftrl"
  input: "Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/gdp_high/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/gdp_high/weight/part_0/Ftrl_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/gdp_high/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
  input: "Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_21"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
  input: "Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_22"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl"
  input: "Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_23"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl"
  input: "Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_24"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_average_10/weight/part_0/Ftrl"
  input: "Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_average_10/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_average_10/weight/part_0/Ftrl_1"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_average_10/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_25"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_average_20/weight/part_0/Ftrl"
  input: "Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_average_20/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_average_20/weight/part_0/Ftrl_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_average_20/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_26"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_average_40/weight/part_0/Ftrl"
  input: "Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_average_40/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_average_40/weight/part_0/Ftrl_1"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_average_40/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_27"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_average_80/weight/part_0/Ftrl"
  input: "Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_average_80/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_average_80/weight/part_0/Ftrl_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_average_80/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_28"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_change/weight/part_0/Ftrl"
  input: "Const_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_change/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_change/weight/part_0/Ftrl_1"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_change/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_29"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl"
  input: "Const_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_30"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl"
  input: "Const_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
  input: "zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_31"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl"
  input: "Const_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
  input: "zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_32"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/bias_weight/part_0/Ftrl"
  input: "Const_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/bias_weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/bias_weight/part_0/Ftrl_1"
  input: "zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/bias_weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Ftrl/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Ftrl/l1_regularization_strength"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Ftrl/l2_regularization_strength"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Ftrl/learning_rate_power"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "Ftrl/update_linear/gdp_change/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/gdp_change/weight/part_0"
  input: "linear/gdp_change/weight/part_0/Ftrl"
  input: "linear/gdp_change/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/gdp_change/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/gdp_high/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/gdp_high/weight/part_0"
  input: "linear/gdp_high/weight/part_0/Ftrl"
  input: "linear/gdp_high/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/gdp_high/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/manufacture_durable_orders_change/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/manufacture_durable_orders_change/weight/part_0"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/manufacture_durable_orders_change/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/manufacture_durable_orders_high/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/manufacture_durable_orders_high/weight/part_0"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/manufacture_durable_orders_high/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/manufacture_orders_change/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/manufacture_orders_change/weight/part_0"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/manufacture_orders_change/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/manufacture_orders_high/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/manufacture_orders_high/weight/part_0"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/manufacture_orders_high/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_average_10/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_average_10/weight/part_0"
  input: "linear/spy_average_10/weight/part_0/Ftrl"
  input: "linear/spy_average_10/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_average_10/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_average_20/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_average_20/weight/part_0"
  input: "linear/spy_average_20/weight/part_0/Ftrl"
  input: "linear/spy_average_20/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_average_20/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_average_40/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_average_40/weight/part_0"
  input: "linear/spy_average_40/weight/part_0/Ftrl"
  input: "linear/spy_average_40/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_average_40/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_average_80/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_average_80/weight/part_0"
  input: "linear/spy_average_80/weight/part_0/Ftrl"
  input: "linear/spy_average_80/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_average_80/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_change/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_change/weight/part_0"
  input: "linear/spy_change/weight/part_0/Ftrl"
  input: "linear/spy_change/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_change/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_rsi_10/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_rsi_10/weight/part_0"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_rsi_10/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_rsi_14/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_rsi_14/weight/part_0"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_rsi_14/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_rsi_3/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_rsi_3/weight/part_0"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_rsi_3/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/bias_weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/bias_weight/part_0"
  input: "linear/bias_weight/part_0/Ftrl"
  input: "linear/bias_weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/BiasAdd_grad/BiasAddGrad"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl"
  op: "NoOp"
  input: "^Ftrl/update_linear/gdp_change/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/gdp_high/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/manufacture_durable_orders_change/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/manufacture_durable_orders_high/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/manufacture_orders_change/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/manufacture_orders_high/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_average_10/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_average_20/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_average_40/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_average_80/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_change/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_rsi_10/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_rsi_14/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_rsi_3/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/bias_weight/part_0/ApplyFtrl"
}
node {
  name: "AssignAdd/value"
  op: "Const"
  input: "^Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "AssignAdd"
  op: "AssignAdd"
  input: "global_step"
  input: "AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^linear/gdp_change/weight/part_0/Assign"
  input: "^linear/gdp_high/weight/part_0/Assign"
  input: "^linear/manufacture_durable_orders_change/weight/part_0/Assign"
  input: "^linear/manufacture_durable_orders_high/weight/part_0/Assign"
  input: "^linear/manufacture_orders_change/weight/part_0/Assign"
  input: "^linear/manufacture_orders_high/weight/part_0/Assign"
  input: "^linear/spy_average_10/weight/part_0/Assign"
  input: "^linear/spy_average_20/weight/part_0/Assign"
  input: "^linear/spy_average_40/weight/part_0/Assign"
  input: "^linear/spy_average_80/weight/part_0/Assign"
  input: "^linear/spy_change/weight/part_0/Assign"
  input: "^linear/spy_rsi_10/weight/part_0/Assign"
  input: "^linear/spy_rsi_14/weight/part_0/Assign"
  input: "^linear/spy_rsi_3/weight/part_0/Assign"
  input: "^linear/bias_weight/part_0/Assign"
  input: "^centered_bias_weight/Assign"
  input: "^centered_bias_weight/Adagrad/Assign"
  input: "^linear/gdp_change/weight/part_0/Ftrl/Assign"
  input: "^linear/gdp_change/weight/part_0/Ftrl_1/Assign"
  input: "^linear/gdp_high/weight/part_0/Ftrl/Assign"
  input: "^linear/gdp_high/weight/part_0/Ftrl_1/Assign"
  input: "^linear/manufacture_durable_orders_change/weight/part_0/Ftrl/Assign"
  input: "^linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1/Assign"
  input: "^linear/manufacture_durable_orders_high/weight/part_0/Ftrl/Assign"
  input: "^linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1/Assign"
  input: "^linear/manufacture_orders_change/weight/part_0/Ftrl/Assign"
  input: "^linear/manufacture_orders_change/weight/part_0/Ftrl_1/Assign"
  input: "^linear/manufacture_orders_high/weight/part_0/Ftrl/Assign"
  input: "^linear/manufacture_orders_high/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_average_10/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_average_10/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_average_20/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_average_20/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_average_40/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_average_40/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_average_80/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_average_80/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_change/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_change/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_rsi_10/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_rsi_10/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_rsi_14/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_rsi_14/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_rsi_3/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_rsi_3/weight/part_0/Ftrl_1/Assign"
  input: "^linear/bias_weight/part_0/Ftrl/Assign"
  input: "^linear/bias_weight/part_0/Ftrl_1/Assign"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "linear/gdp_change/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "linear/gdp_high/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "linear/manufacture_durable_orders_change/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "linear/manufacture_durable_orders_high/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "linear/manufacture_orders_change/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "linear/manufacture_orders_high/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "linear/spy_average_10/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "linear/spy_average_20/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "linear/spy_average_40/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "linear/spy_average_80/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "linear/spy_change/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_10/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_14/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_3/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "linear/bias_weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "centered_bias_weight"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "centered_bias_weight/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "linear/gdp_change/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "linear/gdp_change/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "linear/gdp_high/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "linear/gdp_high/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "linear/spy_average_10/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "linear/spy_average_10/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "linear/spy_average_20/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "linear/spy_average_20/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "linear/spy_average_40/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "linear/spy_average_40/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "linear/spy_average_80/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "linear/spy_average_80/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "linear/spy_change/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "linear/spy_change/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "linear/bias_weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "linear/bias_weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/pack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  attr {
    key: "N"
    value {
      i: 48
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/pack"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: "global_step"
        string_val: "linear/gdp_change/weight/part_0"
        string_val: "linear/gdp_high/weight/part_0"
        string_val: "linear/manufacture_durable_orders_change/weight/part_0"
        string_val: "linear/manufacture_durable_orders_high/weight/part_0"
        string_val: "linear/manufacture_orders_change/weight/part_0"
        string_val: "linear/manufacture_orders_high/weight/part_0"
        string_val: "linear/spy_average_10/weight/part_0"
        string_val: "linear/spy_average_20/weight/part_0"
        string_val: "linear/spy_average_40/weight/part_0"
        string_val: "linear/spy_average_80/weight/part_0"
        string_val: "linear/spy_change/weight/part_0"
        string_val: "linear/spy_rsi_10/weight/part_0"
        string_val: "linear/spy_rsi_14/weight/part_0"
        string_val: "linear/spy_rsi_3/weight/part_0"
        string_val: "linear/bias_weight/part_0"
        string_val: "centered_bias_weight"
        string_val: "centered_bias_weight/Adagrad"
        string_val: "linear/gdp_change/weight/part_0/Ftrl"
        string_val: "linear/gdp_change/weight/part_0/Ftrl_1"
        string_val: "linear/gdp_high/weight/part_0/Ftrl"
        string_val: "linear/gdp_high/weight/part_0/Ftrl_1"
        string_val: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
        string_val: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
        string_val: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
        string_val: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
        string_val: "linear/manufacture_orders_change/weight/part_0/Ftrl"
        string_val: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
        string_val: "linear/manufacture_orders_high/weight/part_0/Ftrl"
        string_val: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
        string_val: "linear/spy_average_10/weight/part_0/Ftrl"
        string_val: "linear/spy_average_10/weight/part_0/Ftrl_1"
        string_val: "linear/spy_average_20/weight/part_0/Ftrl"
        string_val: "linear/spy_average_20/weight/part_0/Ftrl_1"
        string_val: "linear/spy_average_40/weight/part_0/Ftrl"
        string_val: "linear/spy_average_40/weight/part_0/Ftrl_1"
        string_val: "linear/spy_average_80/weight/part_0/Ftrl"
        string_val: "linear/spy_average_80/weight/part_0/Ftrl_1"
        string_val: "linear/spy_change/weight/part_0/Ftrl"
        string_val: "linear/spy_change/weight/part_0/Ftrl_1"
        string_val: "linear/spy_rsi_10/weight/part_0/Ftrl"
        string_val: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
        string_val: "linear/spy_rsi_14/weight/part_0/Ftrl"
        string_val: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
        string_val: "linear/spy_rsi_3/weight/part_0/Ftrl"
        string_val: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
        string_val: "linear/bias_weight/part_0/Ftrl"
        string_val: "linear/bias_weight/part_0/Ftrl_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/pack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/pack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/pack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/pack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/pack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/pack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "Concat"
  input: "report_uninitialized_variables/boolean_mask/concat/concat_dim"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init_1"
  input: "^init_all_tables"
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "ScalarSummary"
  input: "ScalarSummary_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/Const"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: "centered_bias_weight"
        string_val: "centered_bias_weight/Adagrad"
        string_val: "global_step"
        string_val: "linear/bias_weight"
        string_val: "linear/bias_weight/Ftrl"
        string_val: "linear/bias_weight/Ftrl_1"
        string_val: "linear/gdp_change/weight"
        string_val: "linear/gdp_change/weight/Ftrl"
        string_val: "linear/gdp_change/weight/Ftrl_1"
        string_val: "linear/gdp_high/weight"
        string_val: "linear/gdp_high/weight/Ftrl"
        string_val: "linear/gdp_high/weight/Ftrl_1"
        string_val: "linear/manufacture_durable_orders_change/weight"
        string_val: "linear/manufacture_durable_orders_change/weight/Ftrl"
        string_val: "linear/manufacture_durable_orders_change/weight/Ftrl_1"
        string_val: "linear/manufacture_durable_orders_high/weight"
        string_val: "linear/manufacture_durable_orders_high/weight/Ftrl"
        string_val: "linear/manufacture_durable_orders_high/weight/Ftrl_1"
        string_val: "linear/manufacture_orders_change/weight"
        string_val: "linear/manufacture_orders_change/weight/Ftrl"
        string_val: "linear/manufacture_orders_change/weight/Ftrl_1"
        string_val: "linear/manufacture_orders_high/weight"
        string_val: "linear/manufacture_orders_high/weight/Ftrl"
        string_val: "linear/manufacture_orders_high/weight/Ftrl_1"
        string_val: "linear/spy_average_10/weight"
        string_val: "linear/spy_average_10/weight/Ftrl"
        string_val: "linear/spy_average_10/weight/Ftrl_1"
        string_val: "linear/spy_average_20/weight"
        string_val: "linear/spy_average_20/weight/Ftrl"
        string_val: "linear/spy_average_20/weight/Ftrl_1"
        string_val: "linear/spy_average_40/weight"
        string_val: "linear/spy_average_40/weight/Ftrl"
        string_val: "linear/spy_average_40/weight/Ftrl_1"
        string_val: "linear/spy_average_80/weight"
        string_val: "linear/spy_average_80/weight/Ftrl"
        string_val: "linear/spy_average_80/weight/Ftrl_1"
        string_val: "linear/spy_change/weight"
        string_val: "linear/spy_change/weight/Ftrl"
        string_val: "linear/spy_change/weight/Ftrl_1"
        string_val: "linear/spy_rsi_10/weight"
        string_val: "linear/spy_rsi_10/weight/Ftrl"
        string_val: "linear/spy_rsi_10/weight/Ftrl_1"
        string_val: "linear/spy_rsi_14/weight"
        string_val: "linear/spy_rsi_14/weight/Ftrl"
        string_val: "linear/spy_rsi_14/weight/Ftrl_1"
        string_val: "linear/spy_rsi_3/weight"
        string_val: "linear/spy_rsi_3/weight/Ftrl"
        string_val: "linear/spy_rsi_3/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/ShardedFilename"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "centered_bias_weight"
  input: "centered_bias_weight/Adagrad"
  input: "global_step"
  input: "linear/bias_weight/part_0/read"
  input: "linear/bias_weight/part_0/Ftrl/read"
  input: "linear/bias_weight/part_0/Ftrl_1/read"
  input: "linear/gdp_change/weight/part_0/read"
  input: "linear/gdp_change/weight/part_0/Ftrl/read"
  input: "linear/gdp_change/weight/part_0/Ftrl_1/read"
  input: "linear/gdp_high/weight/part_0/read"
  input: "linear/gdp_high/weight/part_0/Ftrl/read"
  input: "linear/gdp_high/weight/part_0/Ftrl_1/read"
  input: "linear/manufacture_durable_orders_change/weight/part_0/read"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl/read"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1/read"
  input: "linear/manufacture_durable_orders_high/weight/part_0/read"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl/read"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1/read"
  input: "linear/manufacture_orders_change/weight/part_0/read"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl/read"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl_1/read"
  input: "linear/manufacture_orders_high/weight/part_0/read"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl/read"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl_1/read"
  input: "linear/spy_average_10/weight/part_0/read"
  input: "linear/spy_average_10/weight/part_0/Ftrl/read"
  input: "linear/spy_average_10/weight/part_0/Ftrl_1/read"
  input: "linear/spy_average_20/weight/part_0/read"
  input: "linear/spy_average_20/weight/part_0/Ftrl/read"
  input: "linear/spy_average_20/weight/part_0/Ftrl_1/read"
  input: "linear/spy_average_40/weight/part_0/read"
  input: "linear/spy_average_40/weight/part_0/Ftrl/read"
  input: "linear/spy_average_40/weight/part_0/Ftrl_1/read"
  input: "linear/spy_average_80/weight/part_0/read"
  input: "linear/spy_average_80/weight/part_0/Ftrl/read"
  input: "linear/spy_average_80/weight/part_0/Ftrl_1/read"
  input: "linear/spy_change/weight/part_0/read"
  input: "linear/spy_change/weight/part_0/Ftrl/read"
  input: "linear/spy_change/weight/part_0/Ftrl_1/read"
  input: "linear/spy_rsi_10/weight/part_0/read"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl/read"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl_1/read"
  input: "linear/spy_rsi_14/weight/part_0/read"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl/read"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl_1/read"
  input: "linear/spy_rsi_3/weight/part_0/read"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl/read"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl_1/read"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/ShardedFilespec"
  op: "ShardedFilespec"
  input: "save/Const"
  input: "save/num_shards"
  input: "^save/control_dependency"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "centered_bias_weight"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "centered_bias_weight"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "centered_bias_weight/Adagrad"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "centered_bias_weight/Adagrad"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/bias_weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "linear/bias_weight/part_0"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/bias_weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "linear/bias_weight/part_0/Ftrl"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/bias_weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "linear/bias_weight/part_0/Ftrl_1"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/gdp_change/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "linear/gdp_change/weight/part_0"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/gdp_change/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "linear/gdp_change/weight/part_0/Ftrl"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/gdp_change/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "linear/gdp_change/weight/part_0/Ftrl_1"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/gdp_high/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "linear/gdp_high/weight/part_0"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/gdp_high/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "linear/gdp_high/weight/part_0/Ftrl"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/gdp_high/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "linear/gdp_high/weight/part_0/Ftrl_1"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_durable_orders_change/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "linear/manufacture_durable_orders_change/weight/part_0"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_durable_orders_change/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_durable_orders_change/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_durable_orders_high/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "linear/manufacture_durable_orders_high/weight/part_0"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_durable_orders_high/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_durable_orders_high/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_orders_change/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear/manufacture_orders_change/weight/part_0"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_orders_change/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_orders_change/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_orders_high/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear/manufacture_orders_high/weight/part_0"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_orders_high/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_23/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_orders_high/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_23/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_23"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_23/tensor_name"
  input: "save/restore_slice_23/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
  input: "save/restore_slice_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_24/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_10/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_24/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_24"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_24/tensor_name"
  input: "save/restore_slice_24/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "linear/spy_average_10/weight/part_0"
  input: "save/restore_slice_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_25/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_10/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_25/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_25"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_25/tensor_name"
  input: "save/restore_slice_25/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "linear/spy_average_10/weight/part_0/Ftrl"
  input: "save/restore_slice_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_26/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_10/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_26/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_26"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_26/tensor_name"
  input: "save/restore_slice_26/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "linear/spy_average_10/weight/part_0/Ftrl_1"
  input: "save/restore_slice_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_27/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_20/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_27/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_27"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_27/tensor_name"
  input: "save/restore_slice_27/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "linear/spy_average_20/weight/part_0"
  input: "save/restore_slice_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_28/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_20/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_28/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_28"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_28/tensor_name"
  input: "save/restore_slice_28/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "linear/spy_average_20/weight/part_0/Ftrl"
  input: "save/restore_slice_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_29/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_20/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_29/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_29"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_29/tensor_name"
  input: "save/restore_slice_29/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "linear/spy_average_20/weight/part_0/Ftrl_1"
  input: "save/restore_slice_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_30/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_40/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_30/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_30"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_30/tensor_name"
  input: "save/restore_slice_30/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "linear/spy_average_40/weight/part_0"
  input: "save/restore_slice_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_31/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_40/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_31/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_31"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_31/tensor_name"
  input: "save/restore_slice_31/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "linear/spy_average_40/weight/part_0/Ftrl"
  input: "save/restore_slice_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_32/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_40/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_32/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_32"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_32/tensor_name"
  input: "save/restore_slice_32/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "linear/spy_average_40/weight/part_0/Ftrl_1"
  input: "save/restore_slice_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_33/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_80/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_33/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_33"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_33/tensor_name"
  input: "save/restore_slice_33/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "linear/spy_average_80/weight/part_0"
  input: "save/restore_slice_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_34/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_80/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_34/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_34"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_34/tensor_name"
  input: "save/restore_slice_34/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "linear/spy_average_80/weight/part_0/Ftrl"
  input: "save/restore_slice_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_35/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_80/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_35/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_35"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_35/tensor_name"
  input: "save/restore_slice_35/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "linear/spy_average_80/weight/part_0/Ftrl_1"
  input: "save/restore_slice_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_36/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_change/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_36/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_36"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_36/tensor_name"
  input: "save/restore_slice_36/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "linear/spy_change/weight/part_0"
  input: "save/restore_slice_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_37/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_change/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_37/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_37"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_37/tensor_name"
  input: "save/restore_slice_37/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "linear/spy_change/weight/part_0/Ftrl"
  input: "save/restore_slice_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_38/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_change/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_38/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_38"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_38/tensor_name"
  input: "save/restore_slice_38/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "linear/spy_change/weight/part_0/Ftrl_1"
  input: "save/restore_slice_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_39/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_10/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_39/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_39"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_39/tensor_name"
  input: "save/restore_slice_39/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "linear/spy_rsi_10/weight/part_0"
  input: "save/restore_slice_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_40/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_10/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_40/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_40"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_40/tensor_name"
  input: "save/restore_slice_40/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl"
  input: "save/restore_slice_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_41/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_10/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_41/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_41"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_41/tensor_name"
  input: "save/restore_slice_41/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
  input: "save/restore_slice_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_42/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_14/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_42/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_42"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_42/tensor_name"
  input: "save/restore_slice_42/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "linear/spy_rsi_14/weight/part_0"
  input: "save/restore_slice_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_43/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_14/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_43/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_43"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_43/tensor_name"
  input: "save/restore_slice_43/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl"
  input: "save/restore_slice_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_44/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_14/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_44/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_44"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_44/tensor_name"
  input: "save/restore_slice_44/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
  input: "save/restore_slice_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_45/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_3/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_45/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_45"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_45/tensor_name"
  input: "save/restore_slice_45/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "linear/spy_rsi_3/weight/part_0"
  input: "save/restore_slice_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_46/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_3/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_46/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_46"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_46/tensor_name"
  input: "save/restore_slice_46/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl"
  input: "save/restore_slice_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_47/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_3/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_47/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_47"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_47/tensor_name"
  input: "save/restore_slice_47/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
  input: "save/restore_slice_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 15
}
