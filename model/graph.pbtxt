node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_contentz?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\342\361z?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\362\024x?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\341Tw?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?\324\025x?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?-;{?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}?+5}
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_contentg<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221g<\210\221gr:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:\256#\r:+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:o<+:or\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;Rr\327;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\231\"\214;\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\'\0143<\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\211D\203;\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<\366\353M<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"u<k\"uz<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z<\306\227z
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\n\360z?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\032\341~?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?i6}?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu?\213Bu??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k??\210k?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\004@\\?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?\373\300K?iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??iJ??o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?o\3634?oa\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?a\213;?az\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?z\025B?za)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?a)U?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?\352\342R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?!\315R?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}T?_}b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?\200\016b?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?P\237j?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\232Be?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\270\223r?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\263\335n?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\252\253p?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?\302)n?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?R\214r?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\342\326u?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\273\205r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\031[r?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\r\353w?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\250\326|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?\220\t|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?0\240|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?/+|?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?j\251y?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?R\nw?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\261\336s?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?\325\370x?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?Ihp?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?_\342x?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?\242\323{?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?$\261z?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?g\244{?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\255\233q?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?\346\"u?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?p\317{?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?[}~?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?\032Pu?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?SKw?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?MS{?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?\306\330x?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?B\246\177?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?Lx}?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?\021uy?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?:(~?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\317O\177?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\204\212|?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\261p\177?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?"
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271\373\n\313\271h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<h\255\200<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\037\216\t<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\026YQ<\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274\261e2\274t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275t\244\000\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\233u\"\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\245\341\204\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\364c\231\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275\034\213z\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275:f]\275\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\207\365{\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274\217\217\242\274k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026e\273k\026ez_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<z_\177<\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;\326\217\277;v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<v6\324<5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;5 \366;p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273p\313\226\273pj\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021j\211<\021jh :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<h :<hl\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<l\203\'<[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=[4\033=\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\"9\273\274\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\321\353m=\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\211\245z\274\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\326\214\367;\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274\306\262*\274d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<d\324\226<dd\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<d\225\242<L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273L\250O\273l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;l\376\030;\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\035\"\355\272\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\274\201\341\"\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\2743\010,\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274?DR\274kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<kc\253<\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\370\346\014\275\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020=\\m\020= \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A< \263A<7\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\2737\247\223\273fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<fm\303<.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274.s\213\274\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=\277^\021=4Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\2754Ef\275\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Ao<\303Aoa\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a\256\013\274a
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\241<s?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\207ar?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\267\244r?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?\033\nr?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?4\332k?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\223\013d?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^?\014@^??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ??oJ?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?\271\355A?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?hK7?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\235\227!?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?\303w\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?fo\031?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?\374\007\030?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?p\307\036?po\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?o\215*?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?\t\005(?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?L\010@?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?\035\2369?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?{\352=?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?v\207E?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?\205jD?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?7\217D?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?c\305G?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?t\206J?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\023!S?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\0274M?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\371KO?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vM?\275vb?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?\252\353b?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?Y\207[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\322\321[?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\373\260d?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\265\033o?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?\005\256l?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?U\275k?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?\250xi?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?qfg?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\"\010e?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?\217\376f?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?2\246l?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\213\033U?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\035\261b?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\317*g?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\202\260e?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\3359r?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\247\253e?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\325^r?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?\200\034_?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?@\365h?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\244\272s?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?\240\220|?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?b\373c?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?\307\231h?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?e\232q?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\327\371l?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?\365\303y?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?inq?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?n\321i?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\316\310q?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\3271w?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?\341\217y?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?J\037t?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\352&y?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?"
      }
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274b\006U\274<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231f\273<\231fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fh\321\274Fhr\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275\r\231\266\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275l\033,\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275u\232`\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275l|\362\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{\357M\275{s\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Ps\274.Psa<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341a<&\341apuM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puM=puq2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=\177q2=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=U\206\003=\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004m\005\275\004mf&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331f&\274\331fe\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Ne\014<Nex\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273Mx\321\273\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\266\217_=\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275\310OT\275U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=U~b=\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275\256\274\242\275Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=Q\3054=\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\004b==\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}\024=\336}u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274u\344\234\274L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=L\017]=\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275\322\254\010\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275j)\001\275js\330k>s\330k>s\330k>s\330k>s\330k>s\330k>s\330k>"
      }
    }
  }
}
node {
  name: "Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "q$\331\274W\220\010\274\3577*\272.\356-\273~k\316:\244\244T<v\356\003<\270\242\201\273D\t\332\273\000e\335;W\346\376\272\237\204h\272D\234y\273k\035Y<\033Z <\265\257\027;c\003\007\274\325O\271\274\246\344\337\2739\360\262\273\304y\021<\352\212}\274\032\242I\274G\253?\274\376\315\265<*\007\247;\336\310\r\274@\346\341\273\221K\214\274\241\356\014=\246\367\275\273\245\252\374\2724&\301<\373\270\201:\346 \342\273\036@\225\273\212\n\027\274:t\271\271f\331\340<%Z\007<\312}\314\271\203\304\370:\341\247N;$[\316\273d|\256\273)\02049\253\031x\274w{\314\273O\227\035:\274\373\264<\013H\206;\220\204y<1&\021\2733\336\260\273F\360\224:\375\251i;\327\217\264;#_\221;vq\220\273\005\326B\272\312x\004<\027\264\027<\351lv\273\003\200(;b%\375\273S\237\256\273l>\207\273b\372\352;\200\031R;*P\264;\217\353\304;\177q0; n\277;NM*\274b\3663\274S\r\227\273\336t\030\274\371\233i:p\257\245;\014m\323;\265\305\036;\310\335\'\274\024\272\217\273\005\246=\272\236\264P<1\227\230\274\027p\336\273\"\3606\273\027\265,\274K><\2722\315\002<\032cu;@\340\263\272l\3729\274\236\023P\272wo\226\274\311\251\023\2732]D\273\313`\331;\262<\270\274<\2757\274\341\244\001;\\hq\273\000\r\200\273\013d\371\273X}\271\273\346\221\334;?\014\246\273\315\307\304\273H\314\326\273\217X\216\273\200\213\211\274\267cc<\213\"\201<?\225\255;T\344\251:z)\264;O\310I<\341>z\274\020\217\250\273\211\2050\274\323t\n<\342\351\227<\361\273l\273)X\007\274\2322\003\274\016\265\200<\230C\"<\017\216\037\274\334\300\034<x\200q<\345\t\341\273\315g\365\273\365\t\216;^\252\311;\017\320\021\274\337\245d\274\003\211\342:\265\014&;\315M4<8@\035\274\227\226\207\273\201\256\370;\3622M<H\021\272\273\224\003O\273v\304\370\273\003\240\260\274\200\332)\274\000\252\262<~\220\211\274\367\032\303\273~\245\223;\364\337\016<\025A\353\274T\331>\274\240\332\240\274\266\036];\207\346W=\360\341\311\274\305\317\254\274\353\250\303\273>\206H<\261hK\272\312\314e\2758\223\233;\177\272\037<\254\\\322\2749\024\371\273\023*\223\275lL\237\274\3020\021\275\320/Y\275\265mo\275!\\\272=2>\005={0\270\275\241\354\021\274\332\346\361<M\336\357<\245\357\000\274\316\205j\275]\240w\274%\033\r\275i\032r\274\t\001g=\372t\016=\016aB<\024\376i<\207\031D;\002\304\306<\265\241\252\274{Rf\275\246o\353;6\023);\346\373\000\275\'*(\275\311\251\235<\302\224O:\356\363\275\274J?\374\273\206!\002\275\025\027\217\275\371C\364;\\\373\216=\264\363\222<\274\345\250<A\022\300<R\343\213\275\253\351\245;a\037\256<\312\362\230\273q\023\276;P1B=\n\332M\273:\260\007\272\272\356\177\274J\321=\274{m\213\271]\325\005=\017\277\247;\371+\203\274\300X\013\274\312 \262\274\263\260\247\273\036\320\265\272\236\217\263;\344=\215\273\323z\234<W\036\235<\211\367\266<\306\016\375;\274t\000<N\014\340\274\022X\240\273\324\335\271\274\370\244Z\274\215~\207\273\200\326\377\274\316\373\370\273\264\0060<\006a\014\275l\333J<\374pS\273Qy\231\272\320\366\207<\010^\222;\246\026\004=\361|\234\274b\215\306\274\304y_\274?\270T<)\326\270;\232O\211\274\001r4=+\202\007<\234\370\n\275\202m&\274Eh\310\273\324\302\236;nc\016\275\231\221\215\274<\216y\273\251\212\252\274\264\277\220\274\244\207:<\2244`;\017#\343\271\346y\007\275\275\307\"\275\r\331\206\274P\317x<lV\352\274:\3650\274\362\223H\273\273\206\032=6\314\241<\001\177\267<\377\263\244<\377F\003<4\367%<C\202\313<\320{H;\313\251\344\274\211\3743=\303\366.;\033 \214\272\014x\225<@1\030\274\352\331\030\275h&O<l\330\235;/m\t=\257\014\005<\3568\210\273\262M\221\274\2260\237;\3548\017=\026\201|;\342\3451\274\203\217\2719H=\203<\201\337\031<\252\211\343\274\245\001d\273\200+\001<\270\205\010\273\022Q\245<\231\016\241\273\201|\273\273\303^\240<!\376\242;\272\246\006\273\264\277\337<\250\253\211;\315\035W<=\261\035\273x\260E<V\017B\274u\036\321\273\023g\247\274Y\263T;\203Y\223\273\365O\201<\252\030%<\177a,\272f\262\305\274\313\210\322:\277@R<]\207^\272\013\t\306:p0\244<\337\300\272<G\324x;\304Yd\274\224X\343;\273]\257;7\246\307\273\0041\255;\233\257&\273\264N\n<Wk\222\273\201\265\217\274\032\200&\274\020\265\326\273p\260\251;\254\272\3439^\242\306\2745v\310\273\017\221$<\211\2634<\221\023\266;5K\321;\207AG\273\035\306\257;\263\356\257\274\306\031X\274\326\253\032\274\001/\001\274\346\353\221;@\223\222\273\276Ux<O\241?<\237\216\275<\343\256.<\025\035\264;\007\323\026<\336\265\222;|\202\033;,0\204<\362=\265;\247\264\205;\367\t,\273\341T\006\273\210\212q<xg\302\272\036\204E<\3271b;j\302\314\272\220\362\342\272!\2111<\251\376v\273\003v\022\274\326\262\340;\262\212\251;\304o\222\273\222`\272\274d\252\246;\253\217\256;\362\313C<T%\226<kt\274;\037\2325;\313\231`\273\031\217K\272bu\215;\016\241>\274:\2267\274\017\270D\274It\200;1jF<\033\204C<uA\353;\211\262\354;\210F\232;K\025\300\272\254\272\013<\252RB<\027\220\216;\303\231\236\273\n\022h\273\345\375\304;\345\354+\273\310BO\274\020\031\360\273\026\370C<J b;\310g\334\273\203\364\203\274\203\314X\274m\0131<\305\225\213<\0252\272:\242\026\022<\260L\177;\354\033\334;\366\377c\273Q\375S<\331\266\307;!\262\260\273JU\341;(\350\031\273T\270n\273M\204\020\272\235iQ\273\245\373\005\274\"r\022\274\"\325u\274\346&%<\256S|\274I\263)\2730\302\026:\357\354\026<\360\333\'<\220\037\220;t\215\242<I\246\215;\374&\320;%\213\337\273\001\225\2579\017\013j<\322\225\3737\372\267\3738\013S\025\2747\254\315\273\235\353s<-c=\273BK\223;&\312\211\274\006\215\1779$N\205<\013/\300:3\357\202\273\374\377\343:at\340\272o\212\037\274\"2\253\2720v\023<\n.+;\353\315\273;Y\037\017\273\253`\376:\335\2058\274\270\032\213\273\312VD<~\005\203;d\365\247:\364\302\223;\235.8;\243\216\2529:k\033\273\351\362\246\273\331\343\373;\030\353\271;\365Y:;\327\245\332:\346\322[;\221\021n;1\225\020\274e\321\257;\374b\224;O\276\006\274F*\310; +\354\273b\3707\2749\351\271\274\276\363\262\272\223w\031\273\017\232\347\272rp\227\273\260V\352\273\374\210u;\213\234Q<i\245\276\270\364\320\311\274\035*B\274\017\357:;`\363\004<)\376;\273?\375\301;\177\005\2028.2n<\323\302\024<\340\304\245;\320\323@;\276x\304:\257\260\026\274`:c;\344\355\202\273l\353\236;\305\030\027<D\325\266;s\003\210:\223\322\013:&YJ<\306\243_;\301\236\257:(\314~;<[\353:\020\360s;\231\210,\273\033\311\001<\333\333\360;{N\263\271\256K\305\273\262\224\341\271n\014\371;\323\317\207\273\244\t\212;N}b\273\244\\\204;\373T\337:\355\202<\273{n\273;\312p\332;\251\321B;\337\214A\273\317+\014\272\346\355\356;\203R\177;\276O\257\272\261F\"<R/s;\364\tI\274J\267Y\273\341n\037<DR\3319\340\307\316\272\321x\006<\367\302\217:\301\256\227\274l\270\007\273\\&U<i+\035\274iE\224;]\253\234\274\356\226\006\274\177b?\275\000\365\303\272\336n\034=\025\025\217:\360\304\016<+\374\225\273\037\342\262\274\006,\262\273\271\255\343\272G\340h\274\017\343\373\274\345{T\273\277\222-;\030\204m\274\3706-<\010\337\251<\304v\213\273\035HN\274\023?&<\222\276\034<\016\357\335\274\343\346R\274\373\357\250\272\252n\273;\356>e<\251\017\032<\010<\366;\222\362K<N\272\207;z{;\271\225\306b\272n\336\004:j\320_\274\247\370\034\274\267b\\\274[\343\205\272\253@c\271\320\230\310\274\366\004b\2741\343?\274\211\346\356\271\317I\307;KY\242<\257\262~<\032\277\376;7\363\342:\226\031\203<\336\227\217\271\n\350\007\273\351\022\216\274l\316p\273i\221\256;q2\222\271d\366w<\314\206\330;\315V1<\242\345\213;\230\325\304\273\370W\215\273d\366\213\273v2\255<\t\247\233\272O\241\207;d0\233\27247\277\2731\252\374;\362D\253\273\021\254\275\274XqB\274\261\031!:S\221\215\273\362\242o<\\B/:\334\345W\274\203/\003\274\035K\333:4\277\227\274\376}\204\272\373\252\3069\017Y\225;\365\356\377\272\307\216\264\273\330,\311<[!:<\316BX<\252\261\323\273\307\230\207;\363l\323;\3257\021;T?:<\272\237*:\352\274A:|\230A:m\314\007\273\345\323!<p>Z;\017\252\203\273\356\304\374\273\363\207o<\305\246\0309\227\230\312\272\234\251\302:\216\340\2479\373\332\3449\245>\264\273\004\335w<\035\245\';\303\307i\272\257q\203;U\027!;,\265\3219\306\3141<zr\232\273eU\346:\332\036\206;W\t+\274\177_\357;\364 g;\2454\246:\203\371\310;\0372\227\273\243\335l\273\177y[;&\0321\271>k\034;\001F\310;\017D\22295\300\211<;\250\021<\026\353\371\272D\t\201\273\317|\010\273\255a\014\273\265[\005\274\222G\313\271K6\206\274\256>\246\272M\245_<\317\035\003:\301!\370\272\301b,\274\211\023=<\034\263\311\273\004i=\273\013\306\'\273\344\211\235<\336k.<\255x\226;\033.@:\350\202f;\036:\274\272\016P\244;\000>\245;U\262\200;\313,|\271\372/_\273\203\210\304:\361N\036\273<\355\035;\3349\304;\353\200^;\177\240l\272\334:\022\272np\016;vJ\000;\023I\336\272\377\203\225\272_u\022<\224\344\002:\365\262[;\231\230\214:\2618I\273t\037\370\272\316\243\230;\352\325\340;I>n:\333C\211;y{v;=\213\323\273A\207\262\273Vy\267;\353d\016;%\243\007\271\336Y\311;{0\362:\260\312-\274\t\316{\272\'Uv<\216\300\276:\232\017]\272\031\253P;rJ\005<C8<;\324#\216\272\335\373\212\272\203[\252;\344~\212;\322\303U\273\211C\314;\275\037\036;\321\302L;}2_\274n\365=\274\203\232M\273\371T(<\317\244\336;(\\\n\274\200l\261\273\".z<\325\250\222\273\331q\304\273\264\030Z;\346\373\2709X\230u\274\375\236\355:jl\254\2735\244]\274A\370;\274\'x\r<;0\n;o1J<$\202\312\272;\373y\272\t\361\031<\210\222\307;Yo\022\272\316fo:\003?(<\360\003?\272\035s\217;\034[\0359p\023\003:\274\321\373:e\\\006\273,Y\003\273\344\3006\2730\363\025\274|\227\3249\320,(\273A\234\270;\360p\033\274\333\267&;\304\226}<\225\201k;\006dQ\2704W\370;\302\377\267;\3208\216;\305{;;\001\361l:\272p\300\273\240\251\257\273\306\366\002\274\317\272\234;C\301B:\201;\377;\t\312\365\273m\316\233\271\220\301\020\273hl\261\273\326\025\257\273\036B\001<\226^\225;\267*\243\273\332?Z\274O\206\3237\254\022Z:\241\262W;v\344\275;\374\300\006<-\021R\274\212-\026\274\343\251\373\273c\005\032\274%\307\203\272\177\205\261\273\260\377\250;\226\302*\274/\344\010\273\373\315O<\204\nR\274\274(r\273\216\335[8as\333:\243\351D<VC\3469\346|(\274\305Kd\273D\nO;\366B><0\334\035<\263\213\024<\226qJ<\206\265q;\213\315\034\271\230\200><\217\305\342\273\017\343\202\274vlR\273;\335+;E\365\265\273e\201\037\271B.\353\273\227N_<\024LT;\202@\031<\025\232/;\225\364\200\273)\347=\273\365\227\212\274F\303\212\273\013O/\274RM\304\272\224*\250\274\0163\027\274r~\370\274\003P\207\274G\302-\275\317\330;;\205Qj\274e0\275<_\210\213<\267\266\202<H\276\241\273\204@6;\004*\r\2750N\236\274\020M\372\272:yw<v\250\232<\367\240\000\273\2439d\273\023\323\356<\274?\343;aa#<1j\253\273\353R\316\274\224\032\263\274X\261\356<\301^/\272/\221\306\274D\024\003\274\276\320X<\334\017Z<\341\246t<\364\000\210;\271</\274)\364\307;V\342\304\274559\275#7\202;\002\330\213<N\221\300<\017\372z\274\275\245:\273hk\216\274/\350\303\274\347\035\204\273\337=\311<\232^\214<\003\r\200;w`\313<\303)\223;\374[U<\206<\367\273\232\351\203<X\256&\274\217\213\346;!N\201\272q\211q\273\374\271\237<\240+F<W\360I\274\201\203\260:\245y\016=\252\274\310:\221\337z\274c~\n\275\260.7<\003\022a<\020\237J\2731W\220;\212]L<\332\261\327\274\005\364\241:\031\225\232<\210\241\213\273\353gB\272\232`\r\274\210\006\230\274\327\246h\273\3127\254\274\247\257\033\273S\306\177\274\322\252\301\273\322n\301<B+\261;vR\323<\343\000S<\003\250?;\326\211\351;\211\204H:41\353\271\201\016c\274\263-\004<\370!E\274\311L`\273\320\022X\2744\225I;r\n\211\273=\223\020\274z\365\200<0\246\372;\3313\036<]?\020<\354\356D;\304\343\016\274<\rF;\254\361\2129(\233\177<\027\345:\273\024e\244:\324\333\261:^A\205:j\030.<\242\265\330\272\372\030\337:\200\331\265\273a\307\370;\346\245\262;F\241\002<US$;N\202T8\352$U\273\277\262\330;\022\003\230:\026b\206\273AS\263\273\217\314Y;\212\245\022<\317\375\3379\236\037L<&:\266\271\213k\326:\244\246M;\013Y\377:\"\034\347\273\017Q\356;\"\\\023\273\351\210\233\270\037\271\226;\337I\304;\025i\266:\212\224@\273\362\025\235:\375\221\227;\027k,\272G\272\210;\335m\222\272S\357\016;\000`\245\272m\304\227\273irf\274\023g\240;\\g\"<\0355\241;7B\376\271\364$e<\013\203s;;\351\\;\205\204\225\272\256\233b;\206vq\273WE`9\332\034\001\274\216\014\243:_\232`<\363\266 :m\014\316\273\317\345|\273M\031\243;Z\005\301;\017\370\001\273ya\035\274?U5\272J\370\003\274$\305k\274\235\215M;\203\201\007<:\333\212\273`\364N\273v\375/<\253d0\271(\235\250\2730n\340:WaH\274\242\200\251;\313RL<\262O\265;N\213\203;\301<\\\273\024\001\277;\344\222\213\273f\236r\273\035\342X\274\311`\247\273\004+\347\273\306\204a\273I\214\213;2/\037\273\024\276 \274\004\346\277\2737$4\273\352\274d\274\301o\036\274\324\262\375;G\270\351;\037.\252\273\301\361\252;\005\211\036\2710\025\252;o\213\231\273\034\276\336\273z\010\210\2744\331#\274\026\304\264;\010\237\242<2m\r<\n\007\3239\025\205\277\272w\n\3069\335=\323\270\323\340\304;\020O\247;\0373\024;\244\251\035<\000\311\227\272@\312X\274g*\371\272}be\274\232\032);\253\324\006<\273:y\273Sc\314<G\037j;*\221\315;:rr\272Jp@\274\345\013\250\272\314\311y\273\342\241\233\273\016U\223\273a\260O<\351p\333:\\\205_;\tX\010<\271\210\252;\330a\375\273\252\220;\274\232\216\374\273/\212\217\272z\323u<)\203m<\373\351\274;\374/\236\273D\227\264\272Q \035\274\327\303g<\374\306\017<\223X\225;JHG\272\371\230\331:)\320\210\271\264\306\2109\002\n\n;\264\020\2729\032E\256;P\252U;\3008Q\272\306x8:\206\275Q\273\201\000\267\273\247\241\027;\r\347W;\372\273\347\272\007m?:db\341\273_\"\205;\\M\337\272\314\257q:\334\rp<\323\366\371;L\3064\273\353\202\202:\276h\027;/\3652<\303d&<\'\264\206\273X\324\270\272g\237\262:0\240+\273\324;\351\272F#|\273\377:\253\273\2120\032\274\016\221\321;om+\273@\204\233;\230Z\254\2720i0;\303\360\363;L\270\";N\262\220\273\351\312\347\273\376\324\373\273E\364\224:VM\206\273\277]|;\307\3572<\372 \235;\373\265!\272^\nW\274\347z\311\273G\377B\274\304(q\272hk^:=\233\330\272\212\\\224:p\007\375;\350\317\315\272\034,\206\273Q\350\013<V\312\236\274\354\212 \274\202*B\273[\364\212\271\273n\312\272\374\2420\274\037\361\321\273-\233Z:\002\343\211<\013G\235;\2533U;@\2577<\333\263\353\271\020\315\306\272\233\300\3068\375\326\031<\252v\r:\302\032\240\272\025\356\204\273\003\340\3058\270A1;\243*t;\364b\312:J\263\354;:1\374:k\306\311\273\220\262\246\273\026\366\004<\233\304-<2\017\246\272(\362\23495\025O\274\371\365\203\273\243\212F\273\217\021\256\27327\256\273\244<\366;k\013\351<\033\321\225:\233\3074;\230\303*\273\240\253 \273 \205W;$A\250;\233(\315:\321@V\272\003\242\2767>\274\210:=I\302;[\241\310:\371 \222;\177\030Z;\036\210\362:X\326>;%~\2728Xy8;\256\205\013\272i\2417\273R\276\363;\200\202\314\2735\263\272;\310s\2717,P\277\272\316]\305;\000\320\2549\366\034\372:\353\353\235:\266\316\345\271\277\342\211\270:O\256;^}\320\273\232l\021\274\300\234\263;\313\325\367\273Th\213\273\275>6<\362\330\207;\330f\024\273g\035\263;\336\242:<\177M\006;*\236\305:H\330N;\227eK;\222\301\353\271\210\333\021:K\336\230;_\204\236\273?\024\247\273\241v\033\273\202\341\337;\311\261\305\273_\263\200;\311\263J\272\r\376\236;\021\356e\272\212{\200;\245\000\263\272\262\230v;E\352\350\273\315\214\2638\302p\310\273\322g\313;\204\022\310;qw\037<\345\034\276;\333kg\273\n\234\201\274\3536\253;\367k3\274\244\255\270\273\345i\220;\026\355\241;&w\031<\241\215~;@k\225;~I6\273\3562\300;\177}\257:\\\344\230\273\201\030\243;\362\330$<\0169\223;\236\'f;\\b\217;\374l\253\267\010\360`:\001.\273:\266?\007<\330\300\324;\205\014\266\272\336y\277;-f8;+\3676:\tV*\273#\030!\274g\356\246\272.\026+<W\324\025\274q!\226;\251\344\035\274\257Y=\273\203\277*\271E\330;\274\312\344W\271\354Un< \236^;\257\375\013\274+]\261\273\315\314\227;DN\310:\247\361\214;\242\206\336;\324\302\352\273v\315\270\274D\351>\274\364\2400\274i\230\'<j\274\001<\273\027\006<u\237\223\273\266\360\332;\320m\366\272$\264\310\272\236\324\n<\343\006\006<Z<\333;\027+\336:\331\240\030<\341\221\230;7uV;P{%\273\026I\035;~\024\215;ij?:P\223F;k\\\355\271@\343<\273\017\007\236\272\323\326\245\271\204\350x\270jg\033:j\353\377:\334h\n<;\234\231:\250\337\2438p\302\214\273\247\335\253\273/\\a;Y2\311\272\243\374+\273\314\202\020;H\266\257\272\313\220p\274\326Q\177\273~\275\222\2731\206\355:\272]v\273\353\304\242;\306N\201;\345\016|\270\0275]\274\210Z\021\273#R\032;\255\016(\273X\376\231;\003\003\224;wj\217;\002r\233\272\232\270\014<\372\241\010<w\273\020;\210b%9L\366\032:\007\006\002<\021<\006;\363\341\016<\030Pc;\022\263)\274t,\353\273\336\'\264\272\347{/\273t\307\000;c\235\232\273\225t\267\273I\024\311;\257&n\272z\006\300\273W\326\206;I\r\231\273\320\177\031\274\212\237\214\273\307&\227<\307c\355;\372d`;IW\310\272\371\311\020<\320s\276;)\022\016<\177\347\273:O\252\242;\374\035\223\273D\366H;\204\354\201;8\301\036;\313\213\223;\303\240$\273\010\027\033\2731\306\250\271v\234N;\265\333\n\273q\235\241;\362\031\361\273s5\203;\335X\216;*#\004\273k\344\207;\001\215\366;\013}\233;\2011\210\272\276\350 \273\237\201\027\273^c\224;h\301\234;_\273\267:\370X\2079!\367\250:\3277\202:\001\367!\273~3\260\273\354\207\266\272\270Y\007\273\210\210\017<\253st;\345\2642\273\367\200\016\274\327p\313\273\354\366\315\2717\200\316;\313\365E\273\257\206\006<\317\306\275;\201\373\32396\322\272;\022\370\022;\022\277\236;\352\252\202:LZ\000\272>\333_;+\000\345\273\373\024\'\272z\361\005\273\2655\204;4\231\0308\340\037\035:r,\276:\361\033\371\273n\006\202;r&\350;\253\246=\272\022G2\273(\030\214:\321\363\270:M\234\016\274\024\022\203\274\267\362\020\274+\305`;\267-\344\273\033\324\t<\353o\262\273#\242y\274\367}\000\273\333\356\340\272\232a1<r\202X<\205Ct;~\223\033<\226\343\200;!\014N:-t\356;\226\313\035;\32087\273\360\2714:TK!;\030(\236;\271\311\215\272\262\333b9 \333\026;\341\222\216;P\330\376\2732\342l<Nd\337:\205\347\026;\022\221\0249\023>\t\273c\007\252\272\3301\201\273]\232\236\273\256\005\255\273\262\240\331;\027K\312;\2232k\273\023\343-;t\312\020\272\337\351\362\273tF$;\347\267\027\273\256\302\311\273!\320\265;\336\351\252;i\304\333;\"\003\223;\354\235\347\271\006\250\327\273\234\267a\274\202\\^\272\311\236\030<\240\3352\274\033\217R\274\211\2524;\177l\210;\tgJ<\270\177c;\245C.;H\214\262;\272\265\256\272\250o_:\225[\326\273)\003\2268\252p\302;\356$\002;+%\323:\333z\0249/\242!\273\357]b\273\036\363\3039\312\251b;\3038\344\272\361\260\013<]\210\216;c\255\213\273Ke\025\274\033\270\013:\024u\202;\333fX\273\217\177\264;\376\343h;\033\242d;\\5\317;s\273\2779\007PQ;\366\001 ;H\307\036:\"H#9\230q\267:\2137\253;\025\024\324;Q#\007;z\034\217\272"
      }
    }
  }
}
node {
  name: "Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\330z_\276\205a\220\276\221A\223\276O\026\242\276\247\247i\276\316\031A>\271\366\227>\001\221\t>\257$\246\275\r\245\357=m\375\032=\332f\266\273L\3362\276^\367\203>\301w\267>\234\307\300>\311\320\243<Mw\234\276pv\262\276\326\263\302\276wA\251\275\351\222\216\276\340F\267\276q\344\317\276r\242\035=8{\327=\356,l\275/C)\276\314\037\246\276\376\003%>g\225\232=\225\023&=B\265\220>\035H\224>e\220\272=#\315\332\274\004\rR\276\211vX\276\007\026\227>\032\233\260>\241G\251>\346\321\262>Dm\303>n\364\023=7M\021\276*\351\006\276\250\000\303\276\013\375\324\276y\322\301\276\342lk>\016\016\214>/\377\302>\250\276\230>\030\342\301=S\305\377=t\250c>2C\247>\036\367\302>1\017\317=X\025g=c`\231>\361$\313>/\341D>\204N\200>\016\004\303\275\336Pg\276\222\357\231\276\366\027\003=c3\t>\315\363\207>qp\264>(\201\303>\007P\333>\026oA\275]\020\200\276\2716\234\276\317\034\304\276\354\215\253\276\t\212\221\275B\260\023>\346~S>qH)\276#\332\177\276\213u\207\276\250dM>\017\260L\276Q\355\212\276\020\353\231\276f\325\304\276DE\307\276n8\336\274\226\325\270=\315\364\323<Y\225\215\276\221\027\224\276\257\267\333\276\330\252\337\276\221o\345\276\311L\303\275\363\\\270\276t\346\317\276\335\313\252\276\345Z\272\2767\t\312\276\241r\337\276\245o\351\276\217B\361\275\247Uh\276\340;\243\276\2511\304\276\270\315\323\276\022j\356\276\377\245X\275\207g8>\367\313q>\204\017\201>\305N\244>f\220\320>\306\201\263\274\t\277\351\275z\374\204\276\"6\326\274\0219t>\260R\023>)\370W\275g\320B\276\201\362\014>D\364\177>\rXp<\316%,>7\320\235>g#\376=\353\2749\275\225Wp=t\242>>6\024\240\275\303\260\216\276\336\255\\\276${\333\275\202\003G>*\374\241\275Nz(\276\250\265\226=xM\214>\3505\261=X!F\274\231\360H\276\264[\304\276D\267\326\276\371\267\t=a\277#\276s\017\\\276\234\016\325\275\215\374\252=F\025\212\276:\322\251\276d\270\314\276\024-\241\276\237v|>\317\223[;f\224\024\276\244\005=\276>\004%\2741\201\261\274\242W\273\276w;\226\276T\356\005\276b\215\227\276Z\335\250\276\005\376\345\276\274\301\353\276Ie\363\276\271,\371\2763\036\374\276$}\264;~\373\341=\242j3\276]\007I\276E\010\327\274\355o\351=\364\351^=\032:l\276\253p\215\276\234k\267\276\226D\305\276&q\235=\221\321[>{\306\202>(s\234>\334y\242>\263\"\312>\342M\241=!\021\206\276\204\016=\276\242\303\030\276&\311\243\276\017\300\320\276\311,4\276\342o)\276\266!\232\276\323<\253\276\305p\326\276&\200\360\27608\303\276V\320\350=\362\314:>o\222\203>\325&\247>$\312\007\276\0207\304\2752\352\202=\013\316\224<\222\332\246=;\354\255>\331\025\225>\317a\217>\375B\301\274\254\223+\276\026\025/\276\217r\211>\245B\231>\016\263\010\274\210i\375\275D\234\232\276\364\"\251\276\374\352\255\276?[\010\276#\331\\\276{JZ>P\317\262>\266\311\325>$\322\335>\027\200\345>\re\203\275br\364\275~b\230\276\036\256\266\276\251s\277\276^\230\344\276\376Y\351\276\303^K\276\327\211\274\276\036I)\276\002\371E\276\235\250S\276ud\010>\207vE>\311\010\307>\352\304\211=Y\365\'\276\215\006\200\276\273\270I\275Gz\004=F\t8\276\0039q>\201|\214>\267\275\276\275\204\221(\276F\231W\276\336\211\343\275T\215\260\276n#\311\276\255:\316\276\221\274\343\276u\304\355\276\207P_\276/g\023\276Qj\032\276\335+\310\276@\022\347\276>s\355\276\211\322X\276\311\037\253\276|\226\273\276z\314\300\276!L\013>CK\200>\316\322\254>\215e\307>1y\320>K\216\333>\025b\354>\272\354\355>\\;\020\275u\304\204>\006\247\212>\215K\177>\374\033\265>\327?\027>\007\300q\276o\232\206\275\273@\2759\214\312\214>\352\364\237>a\256a>\246\257\250\275\262\224];9\320\235>\217\333\246>\tf\301=U\240\314=:0\225>\013\323\264>\340p\006\276\304\326*\276\245\254\023\2733\345>\275h\013\206>\234\304\006>2 ^\274e\\\207>]\375\233>L\013i>\302\022\320>\210`\326>\223@\346>\301\033\270>$\r\326>7t\215=,u\204\275aM\227\276I=S\276\355\013\206\276\323\027\362=zlw>\205!`>&0n\276\331\354A\276\003\362\304=&\277\224=\2602\350=\331\254\273>\274\272\337>\366|\343>5H\232=O\\/>\335\033u>\346\364<=\245.%>M]q=\325w\200>\262\306m=\253G\216\276\031V\265\276\362\363\307\276\214\332?\276\2366,\276\276\024\315\276\246\277\327\276\372\277\334\275\304a\342=\202VF><^\215>t\247\032>\215\277\202>\277Ok\276\200\025\251\276\231\340\301\276\266;\322\276\210iz\276!f\231\276\225\215\362=RJ\206>}\216\306>Q\352\325>= \335>\250\236\347>&\002\354>\330\202\356>\270Q\370>\315\t\372>\3028\373>\234\255\251>\002tL>??\307>t\253\237>u<\321>\021\263\331>9\335\245>\313\333I>\027\223\300>\272\270->Y\003\013\2761\025\252=\323\272L>\262f\\<a^\251\276\023\2236\276)\325\330\274\205\200L>\273\254\262>\355U\301>?\343\310>\254\316j>\030$?>\260\'\224>\222[$\276\220\252\240\276(\302\310\276\365\200u\276\332H\262=\246\027\200>\010\265\241>2|\274>+(\313>n\334\240>\365C\313>]\254\344>Of\352>\262\257V>\002=W=\251\376Z>d\333\236=}\315\203\276\377j\255\276\267\356 =|q\352=<\025\254\275\304j\235\276\337\255\304\276\353\377\300\275\310I)>\343\t;>\273\307\222>\000\030\246>2O\302>(\024T>\244^\270>\371\255\313>b\035%>~\256\214>\032\037%>\321\245\340\273\036L\n\275\3130<\276\260\220\267\276+\377\331\276\230\263\356\276\245u\375\275\200\264\225\276\021\200\240\276\247\336\222\276\332\274s=v\354{>Y\322\231>\260J\326>\365\014\335>\266?\346>a\362*>\204C2>\251\253\271>g\314\271>~\216\272>\2433\346\275\036\225\201\276\256t/>*\031\235=\315\3239>\224\353[\276H\311R\276|\276>>D.U>\274\201P=\202\276\334=U\371D<\244\'\220\276\007\271\233\276\266\n\344=P\031;>\247\276\232>\240\363#>\245qf>k2i\276v\371\230\2769\323\366=\377BL>\022>h>\315{\241>\335x\267>\275I\272>\303\346\331=\335@C\276y\2330>?\001\226>g\370\254>\023D\272>\030\372\320>I?\341><\212\254\275R\335\346=l\017j>c\331\311\275K\350\316=,\351\371\275\255\\\230\276q\366\324\276\252\036\327\276\013\312\333\276J\357\337\276z\337\351\276\207!\363\276\361@o\276\240\2544>m\2220>*\366\232\276\031\024\275\2765\267\214\276\211\232\360\274\022\306\306\275\177\354\261=\246\377\265=,\335\261>6\324\316>\236u\332>\212\341\340>\201z\344>\367.*\275+=\245=\347\207\250\275\252\302\352=G\221\233>\\\206\272>\246\006\300>\362\264\303>1\344\353>e>\360>s\006\362>[\242\366>J`\370>k+\373>\272gZ>\213$\277>\013\200\333>\202k\315>\374\004\274;/\036\213\274\212\'\207>>\203\354<x\2407>\035\351I\274\362\375 >\233\303]>\207\033\361\272\262\324r>h\216\266>8\254\307>\223k$>\017T\360=\2026\254>\201\217\306>\2115\207>Z\230\320>\'\251\334>+F\265\275Z{(\276\023g\010>\026\333\022>\345\031b=%\372\221>xN\234>\263\353\205\276\231\320\222\276\370u\330=7\226\340\275\351\nS<\361\211\214\2764*\253\276h\000\346\276\320\326\346\276)w\230=\217\241\254=c\2522>b\257\233=a\204_\276\222\337\206\276\361\202\217\276-\004\304\276K%\350\276w8\352\276J\001\273\276\332x\331\276\315\004\375\275\337\3619>s\037\275=\010W\000\276z@\211=\211\010K>\324pG\276\013w\220\276?\020\225\276\330T\367\275\035\352\034>\371 \205>{A\246>$B\312>[9\323>#;\316>+\366\254>\334\346\261> \223\200\276d\345\266\276\255z\331\276\347r\333\276\272\010\334\276\275P\366\276:\003\372\276\244\370\373\276\366\013\374\276\321\362b\276\312IC>\327N\241>\230?\267>\260y\274>\320+\336>\207\037\330>\371\321\234>\217s?\276\251\240s\276\247J8\275E\307]\275\301m\224>B\206\263>\311H\323>\260\032\334>OT >-\333\253\272\022\274\007\276\362\\\222>\275>z>Pn\231>\243Qm>\212\300N\2757\210@>\247Z\267\274\313X\257\276\001\306\312\276\253\367\276\276&\331\314\276\226j\213=l\340\251=\2743X\276y\257\232\276\253\221k\276\220\212\310\276\340!\313\276\024a\277\276\346%\310\275\237\227)\276\274\"\234\276\320!\223>c\356\267>\347\245\322>\n\241]>\265\221\207>\'\347\251>\230\355\264>10\332>\363\273\333>Z\030\336>\004\034\341>\t7<>;\020\311>^\322\326>T\363\007>\246\244*\276\233\352\\>\234c_>Y\301\007>U\347>>\204oM>;gg>\3272b\276\261\267\227>\320\305\247>`2\210>\305F\260>\253\006\303>\023V\306>Z\010\356>\334!*>\262\227\\>\177\336\237>\210\241\026\276\236c\300=y\2078>G1Z>\220\332\253>X\274\202=\311\216\274\275\360\021\224=\343\353w=\345\236F>6\253\267>\202=\272>]r\357>\201\257\365>\374n\277>\215O\036>W\031<=1\356\205\275\352\026\231\276R\345\234\276\264]\342\276\302\230\344\276\023\364\224=\213\220\256=\300\374\361:\276\217\212\276\365c\276=Wf\216\275b\203\016\276-\342O\276\300\302\207>P\223\262>\270\022\301>\023\306\303>T\374\321>m%\227>\376\342\300>\n\221\330>q\225\344>\243c\327>\270\237\252=\301s(>^\202E\275*q\004>s\005\252>CQ\305>w_\222>\\\322X>\365\335\240>\203\272\277>\354\321\353=y?\331\274\227G\267>\364x\273>\\\245\324>\344$\333>,b\204=\313\n\257\275\nhQ>\364\301\267>Q\215\276>*W\330>\006\027\346>\367\032\325:c]>\276\263\327\204=\020\233\020>\316y\006>]\025\246>{C\267>\326\3433\276!\303M\276\273$\201>\235\007\214>\370\024a>\351\005\231>\034\207\316>\3213\331>\241\253\245>\3610W>\345E\266>YO\322>C\216\007>$\256\233>=\024\261>\3602\310>*\032G\276.\353\252\276\3605\270\276\034\333]<\n\325#>4@\236\275\207V>\276\214p/>rp==\346\376\321\275F\023\021<\201s\273<\262\021\241\276\324\265j\276V\314\240\276\332\343\324\276\033\225\346\276\303\n\031\276\274\332\247\275\303aH>*\316\r>\304\033\277=\2334\232>\367\377\273>F\233\250>\326\017\261>\261\001\342>n*\304>\355\227\331>\264I\332>\327i\335>\013\230\350>\344\370\003>3b\245\275\272i\201\276\264\024\326\2768\023\302\276\325\344\323\276\377\'\374<\273\024\206\276@\033\375\275\261\320\207>\'B\235>E\272\233>\221\233\311>n\361\333>K\023\346>C\266\353>q\233\355>g\312\227;\337LG\276\230\371\254\276\351\225\267\275\275<S\275\203\277g>+\017\243\275\210\025\270\275\317\3515\276\336\242\243\276\237\025\310\276\212\371\311<T\\%>G\355N\275\021U\233\276!\255\232\276\243Ey\276\341\250\226\274t\001Y>\2742\264>\374b\317\2759\002|\276\n\300\246\276\325Y\307\276\230|\312\276F\007\333\276\264\035\023\276\334b\241\276\000Y\255\276~\304\341=^\t\'\276\222\001_\276)z\\\276\033\244\351\275\261k\203>[i\207>-\243\017\276\343\271]\276x\374e\275\004\214\200>\313x\264>\017\014\320>\212\212\344>\230\363\350>\2618\344>\255\362\362>\211Q%>\332`?\276\233Mk\276k\315\377\275qHx\276\325\242{\276^z\273\276Bq\006>\032\234F>a\276\245>6\247\263>)v\n>\353ys\2732\330\250\276\366\026\272\276\301\014\330\276\377X\333\2765i\362\276\223u\366\276\262\"\374\276;f\375\276d\331\376\276S\207\343\276\315\252\353\276\367\020\212\275m\003\340=\370\316i>Dy\r>\247\2210>\320J\203\276\377\324\256\276s\323\262\276\350]\024\275*M;>\370g\021>\201\377[=b4\254>U\246\273>\276\027\317>\265\311t>\327\3539\276G[\242\276\226\277o=\243\027L=\024.O\276\246\312\203\276\334c\234\274\356\214\027>\277\031\213>\245\t\232>\037\307\023=f\266\r>!#d\276)W\311\276v\014\247\2763\344i\275\033\374*>\351\027\256\274\332\036f\275%\214o\276li\265\276\003\022\275\276Y$S=4.O>\212\237n>\306\021\273>\365=\303>\355\351\327>\276oX>\340\232\252>\032\320\302=\3263@>\025\344\037>\236\270\263<\006\260\242>~\310\304>\242\027\212=\336<\273=V\223\275>\271p\300>\373x\002=@\247\211\276\326\276\315\275\365\344\223=\215\303\260<\352\004\310=\205\016\205>f5*\276\237M\020\276\355\002!>\314\312\212=\374\306E=\361\335 \276:\200\260\276\004J\273\276=\330\340\276\200|\343\276\315w\360\276\243\250\363\276L1\200=\242u\007>\210\010\250>\324\036\301>\016\260\306>\244\263\324>sW\326>\035-\307>\000\001\023\276<\250\236=\301\2311\2766\346e\276\326\352\265\276<\024o\276\030B\226\276c@\302\276N\310\253=\244\034L>^\023\233>\205d\273>I\016\305>\r\311F=W\355\373=\262)\006>\026M\276>\370/u>\016\273\206>\364T\226>\365\255\243>\024\006\341>\276p\240>\271\331\260>\363\344%\275\3518b>\003\016\242>\007\\\312>_c\323>X\235\323>\226h\350=^\035\235>\241\235\250>0~S<\0005V\276V\242\014\274\254y\206>\343\361\212>\202!\323>\031a\307>;\353\317>;x\336>v\327\345>\2606\212\275d{D>G(\221=\300 \207=>i\204>\356\315\275>_\006\307>G\356\356=\264a5>/\230\251>%E\202>\244\030\275>\235am>\311(\242>O\026\020>\320\364S\276\234\312\324\276\004\207+\276/\020\t>\221ag>\312\270L>\013\310\303>\365\206\317>\303\261\331>\254\034\254>\347\244\305>\021\273\304=\340\246\333=\006,\205\276\225\322(\276T(\221>z\364\225>*\001\305\2747\270\033\276\345\250\221=\304\321n>\316\364\354=E\270\\\276\260\267l\276\375\277\271\276\266\235\341\276r>\226\276\003\201\"<\016\334\330\275\247#>\276\321\242&>\212\241\036>\324\275\231\275\035=/<\236Y\233\276<\216\237\2756RZ>P\007\222>\362\240\251>K\217\036>\256\'\216>\212\221s=c\023\271\275]\353\251\276\004\322\277\276\360\370\325\2766r\336\276\234H8\276\2166v\276\013\013\302\276*\024\326\276i\332\335\276\"\331\361\276\2043\367\276\204\0104\276.\366\344<R\235\322\275\321\354y=\366\026_=e\032c>\031j\260\274\024_e\276\'\230\310\276@<\334\276\342s`\276\334\3434>\277-\206>\202c\210>\3158J>]\250T>\320\005K>\341q\271>uP\326>O9\337>\016#\362>&%\303>\2122\'\276\212\266O\276\314\313\275\276\244\225\201\276\026\037.=\"\225\226\275\224l\241>\311q\255>\231&\302>\305~\252>\021w\253\275\207\002\354\275\263rY\276\326\356\233\276\333;\273\276\320]\002>\305\016)>B,z>\200\324\271>0\034\317>!\261\"=\350r\\\276\350O\235\276)\253\243\276\355\312\026>\r\022\235>\273\026\262>\223M->L;\351=-\262.\276)\362,>\277\302\214>\025\305\243>N\314\217>T\355\236>j$\222>\177\376\226>3\226\273>\327\037\301>&\263\351>5\001\362>F\030\266>F=\300>\004\'D\275\"\326\231\276\241\342\300\275\377\034\357=\031\201\246\274O\263.=\230z\231\276-kT\274\361\037\322\275E\335\306\274\373\200\276>j\321\326>\314\347\207>\316\345\221>\020\237\252>\002\021\337>,C\356>\301\030\202>\226\n6>\326A`>H\032\317<\351\376\263\275\335\311\203\276\251k\274\276\322\267\341\276; \321\275\007G2\276\370\337E=J\344\221\274\033\026\372=F\307\244>\273\332\267>\215\301R=\252zP\276\311v\251\276Vo\204\276I\375\253\276\000\274\233\275\255\003\201>\"\246\243>\263\252\216>\323\323L\276\002\277\224\2769\323\306\276\351\302\311\276Me\253\276i!\271\276\272$t\276\267\370L>\265\000\276=\325\234\004\276\207[W>a\265\177\276\035\017\252\276[:\265\276p\202\266\276\310\025\300\276\203\367\344\276+&\356\276\317j\317\276?\202>>\370Z\202>\201.\231>\037\372\312>3\374\275>\226\032\206>\316\204\207>\214\311\323>B\023\326>;\323\217>\212pV\275\226?5\275\277B*>\033\010\241>\376\224\265>\202s\342>\0060\350>5\232\323\273\367\261C\276k\230\n>\374\017\237>XH|>%\261\201>T\236e\276\263\243\223\276q)\252\276s\200\310\276\326\275\333\276\300\243\021\275\321{\257>{\305\262>\216\267\274>\352.p>\004T\323=\366/U>}\302\243>\233~\261>\2677\204>(\301\204>\001\031\241>\346\361\337>\314|\346>\350\203\362>],\367>\303%\371>\352\203\373>\316\225\373>ev\375>\307\241\306>\357\320\243\274\303\347\241>3\272L\275|%#>\334\352#>\316+*=w\325\220>@p\225>\333\240\261>\201T\301>\311\013\225>HB\214>\316#\340>\257\021\275\275/`\240\276\214\307)\275(pj\276\034\321\230\276p\314\320=\321\246A>\241\237\254=\202\200m>\345\365\276>\341\013\307>\354\352\315>\214\255\333>\032\'\346>\345z\311>\375\333\316>1\022\352>-Yi<@\346O\276\245\222\212\276\332d\344=~\016\006\276\005\0019=)\243o;n\356W>B\350\r>\032\372\221>\236m\027>\tT\227>h\276\013\276Hi\005\276fD\243\276\302\355\037=b\na>\316\361\265>\355N\314>\224\247Q>L\276Y\276\023\331P\275\321\233s\276\305p\232\276\002`\375\275\225\261;=b\253y>\211\320\230>\273\375\264>\356D;>\366\207\234>\355-\250>\306\245c<\342[J>U\333\267>\t\335\312>Rg\327>?\324\343>>\313\342>\"C\346>\314%\354>\036X\371>\013E\374>\305q\275>/\234\332>m\231\343>k\356\345>\245E\032>\275Y\210\276C\231\225\276\247\207(>a\211\371\275!\"\370<\030\212M\276\034\276\177\276\034\237\201\276\370B\314\276c\022\315\276\242H%>%yc>3\371\215\275\032=A\2760%\002\274(\236N=\230\020J>i\242\250>\022%\031\274\356:\252\276i5\307\276CV\331\276\312\357\n\276fT\t=Z\337->\346X\"=\272\3376>N\264\320=\270\257\354<\265\317\207>9c\272>\327\026\322>VY\327>\r\030\353>\267\254\360>T\n\364>\006\262\216>{\030\250>\263+\311>\343\365\315>\372\225\337>\014\177\274>lk5<\376\t\300\275\300/\376\275\247\004\007\276\260@\214<_\313\215>y\223\346>\275\035\352>\257j\352>\302GP\275\251l\213\276\214\272\244\274=\206\331\275\201\325k\276K\370\271\274\310\272\367\275\371\266\323\276\030\037\336\276\340\343\347\276x7\237\276W\336\275\2769_\017\275#\246\010>X\004\004>\001y\241\276\341|\257\276)\":\276\323\320\203\276G\364+=cAU>g8\236>\211tV>yY\300>\364G\335>N\227\342>\253\020\343>.x\345>k\023\366>\374\002\370>cq\374>\317S\375>\263\261\360\274\006\236H\276\212Ye\276i\260\220\276\357\207\t\276@\267\220\276\245_\277\276\3623\215\274\327\344j\275\370\\\202\276B\031^\274\376\\=\276C\260\261\276\261$\306\276t\250->qz\204>NP\230>\340Wa>A0\262>I_\312>\005_\340>\252J\343>\344\230\354>rI,>\230@}>J\206\247>\030f\273>b\321\325>+\237F>!\233\204<\212\346\032\274\223gR>\237\000\245\273\370\\\201>`\'\030\276\336\356D=\221\"J>0*\211=\243\321f>\330\215\271>Y$\320>\242\352\243>c\234\347=\027\327D\275>XC>\306W\242>\033\231\260>L\315\263>\221|\305>X\335\321>\225Z\013<\031I\225\276\334/\251\276`\244\302\276:}E>\214\355\220>v\r\275=\247\351g\276\255\'\247\276l\"\252\276\310Z!=B\317\273\275\025\255O>\330S\234>s\315\237>\336\241\310>\210\270\323>\255%\345>O\016\350>\237\374\303>\221(\336>\334\017\316\275C\272\004\276\266\347f\276\031\350\266=v\320\273=Z\230\022>L\247\202>y|\220\276\322\337\030\273\234Qy>\360;D>\274Ik\273\334\277\213=\352?\'>\3433\220\276\201\304\330\276@\177\346\276\"<\224\276\303\335\270\276\214\213\006\275\262\333\"\276\217/\256\276\317\313\265\276G\337\275\276cg\221=/!\216>.g\241>\315\216\306>\211\323\321>\377c\324>\025a\347> \301\353>\301\ro>\262\177\202>\263D\250>\017w\321>\236\000\222>$S\226>\336\r\277>|\367\340>\tf\336\275\376^\211>J\024\225>v\346\246>\n@\250>XN\366=\266V7;\262\262k\276<t\265\276\021|\325\276\035i\322\273\026\273@>\245Y}<\227\300\367=<\311\246=D\017{\276\305\270\243\275\025\3616\276\035\025\253\276\034\005\215\273\235t4>\254\357\235>zq\272>j:\250>1.\214\275B\307\247\276ij\254\276\255\'S=\017\365H\276\024G\251\276\253\222h\276\304U\211\275\323\263Z>x\251\206>\024\276\232>(\342\274>\365\346\213>\324\375\226>\227\244\370\275\304\315\355\275\227\264M>\353I\206>\345\234\236>\374\034\241>!\030K\274\031#q\276\217\023=\276c8\032>o\010\315\274\023\341\245>\030D\304>\336\217\271=<\344Z\276UK;\276.\231#=\314\177\355\275\263\322\021>T\213{>C\237\244>\265\213\315>\276n\317>\016g\337>\371S\350>T\204\352>\260A\353>7\325\361>=\345\372>\350\252\375>\361%\376>,f\266>"
      }
    }
  }
}
node {
  name: "Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\324>\305\275\034%\002\276\035\246\004\276m\236\017\276;Z\003\276{\003\025\275\236\342P<\021)?\274\255>S\275\207A\244\273^\250\223\274\254\220\307\274o\305V\2757\234M=\016\253\340=.\205\373=\261\313K=\277\310\302\275>\024\003\276\247\266\034\276\343r\250\275Pq\036\276\304pM\276\256.s\276\337+\257\275\344\210f\275z\206\301\275\204X\374\275hD=\276\263r\335\272\350x\320\274(\342\t\275\2624\213=\356\376\222=\252q\020=Qx9<\334\021\021\275\341t\030\275\312\250\307=<\270\003>\025\036\001>\215N\t>\023\212\027>\363\352\307=\374:i=A\245m={QJ\275\214\350\257\2751\230\245\275!v\217=\2126\274=\022\230&>\240\027\024>\025k\315=\341_\332=\237@\002>\205\265!>\356\3019>\r\231\010>\002&\000>U^4>\313Me>\034\0077>x\354E>\376d\321=\0166A=m\253\355;\226n\213=r\212\276=\033\242\010>\260\3730>\311\377A>4\261d>_\220\302=\3779\370\273\321\0335\275\226\016\340\275\002Y\315\275-eF\275\013\202:<\203\274\005=\325\266l\275I\t\272\275\207[\305\275\362\354\347<\374Y\330\275\202\306\021\276/\270 \276r\022T\276\276ZW\276\301\273\000\276\365\225\266\275\243$\312\275\345f-\276V\3701\276\360\375\203\276\2302\210\276#\352\215\276C8H\276tO\220\276\\y\237\276y\264\224\276\206*\232\276\020\356\237\276\260i\252\276\013~\261\276\247\310\206\276<\003\220\276s7\232\276pX\244\276Y\232\252\276\345\366\275\276\2235b\276\362\251\274\275J\252a\2759\250;\275\"\t\303\273\3050\223=k\207\346\274\274\372i\2750m\346\275\270EV\275\272\r_=B\331\003=y\375\213\274\350_y\275\333\330\001=\217P\244=\343\317\255<~p\215=\026.\007>\\\\\263=\362\313)=O\007\202=\262\006\301=\205{\n=\270\251>\275\037;\021\275C\031\226\274+\363P=k,H\274\325%\032\275Z\366d<\302\231\261=\"\265:=\341\305\273<Q\360\357\274\367x\021\276P\020;\276k\r\"\275\230m\340\275\356\317\006\276\377\355\322\275\322LJ\275\236\323#\2760\201F\276\270\312w\276]\246a\276\260)\261<\000\337d\275k\016\343\275\256v\000\276\264.\234\275\307\366\240\275_\342T\276\262\216@\276\r1\026\276\336UL\276\246\304Z\276\310\307\235\276\017\246\246\276kv\264\276\236\347\303\276\200\360\317\276\305)1\276\267\210\342\275*\250I\276\355\013Q\276,\346\026\276\347\234\301\275\316]\325\275g\016,\276Ci;\276\032\273\\\276\362Pj\276\312&\336\2754\367>\275\265\317\327\2742\231\277\272\210\367\202;\035\323E=|&\254;\277v\272\275o\222\232\275\371O\216\275\302Q\373\275\325W8\2764J\005\276_\"\003\276\251x(\276\326u4\276\3652b\276\201 \225\276\300^\211\276j\204\270\275\025\354Z\275X\\Q\274U8\374<\252k\253\275\303\215\226\275?}\370\274\216\362\036\275\"\237\322\274Y\002\216=2c}=\257\335w={\324\231<s\2747\274\357\206C\274\242\006\227=P\275\257=\r\214\010=\273\340\326;\007$h\275L\305\220\275\360\017\231\275\013\215T\275F\026\211\275l\007]<\225\306\243=\013\202\022>\001t&>\237}:>7=i=\013\362\030=n\3458\275\251`\261\275}$\313\275\370\0209\276\336\033J\276g\r\024\276.\013a\276\014[\'\276%\376.\276=\3721\276)\010\273\275pD\220\275\334:c=\357\224u\274\211c\265\275\003e\376\275\346\024\223\275\020\363J\275k\224\316\275[FI=\016X\222=L4\n\275\214hx\275\373\245\235\275\205mp\275Q9\027\276\330`;\276\372&C\276\006dk\276\346|\204\276\224\266Q\276\313\370@\276~\002B\276\215d\203\276\266O\237\276tY\250\276\202>\203\276/\213\226\276|\370\234\276\311\325\236\276\230\226\023\276\271\240\232\275\364\347\361\273\2230==W\033\210=\215\206\274=\353&\030>\034\331\036>q\201Q=\226?\030>\372r\035>\256+\031>N\365?>\315d\027>v\271z<P\247L=\207h\201=\277\222\023>a\336$>\255\023\023>\235\030\224=+\253\260=\267\375/>\326J8>\231K\006>hF\007>\332\2772>J\014J>\211L\211=;\275W=\254\321\242=\016H\216=\336\\\014>\217\213\343=\020\336\244=+#\027>G\272&>\013\210\031>!\202i>\334\274s>\221\n\211>\'1\200>!p\216>E\177F><3\033>!F\021=VGK=\353\270\314<\010\365\303=S\202\t>\034\013\005>->\003\274\222m\2628=\035~=\211Ui=s\224\204=\021\327\035>I\324f>\234(q>B\003\017>\374\321\'>r\222:>\021\210\r>\0255#>\216\271\016>\002\3413>x9\r>6\220S<\225i6\275+~\240\275\336\354/\275PN#\275\345|#\27661;\276\024\006\334\275t\275\020\275)\020\002\273\364k\017=\324\310t<\215RE=(\225\243\275r\360\014\276\364\2021\276\315\212M\276d\261)\276\261\305;\276Og\217\275\336hy:\215\221\335=P\214\026>L\367)>\032\rI>\250\233W>I\217_>[\026\210>\005R\217>\020\241\224>$r\207>\315^y>JV\224>S[\214>\365\331\235>\233[\242>h\352\230>w\333\215>\215\354\237>\354\362\207>~\204(>\2529K>\007Wc>L\312/>W\000\226\274y\274\200<\306\'M=\003\025\361=\357]H>e\r]>W\tg>?\223E>\346\236=>\253\177R>\214F\272=\373\336a;\212y\223\275=!.\275}\014 =\002{\325=\245\273\r>\365S.>\257\220B>\24074>\305\271Z>\231\251\203>Z\353\212>\311\260`>\256{:>\264}W>\022\\9>\234\327j=R\312\201\272\307\247\241=\347\232\313=\267+-=\364\034\212\275\364\032\n\276t.f\275\02540=b\241N=]\020\305=\201\003\354=\\\236\026>i\373\360=oj6>+\235O>HO\035>\251F=>/\026&>\343\206\001>\200\206\367=\267\370\261=\355g\001<\026\372\201\275\255\317\035\276\032\330\207\275\357Q\026\276\353o\"\2762\350\034\276\356q\217\2756\310\364;\006z\031=\237\'\025>\r\231(>\2749D>\2500\006>\220\374\007>\370#M>\250EM>\035\333M>\325\016\325=\024>==\023\360\014>\364}\343=n|\014>n|\364\272B\331\342\270G\366\322=\370g\343=\2010\233=Z\310\262=\005\026\220=S\364\217\2745\267\350\274N8I=cS\216=\t\315\345=\351A\263=U\230\323=\361\014\204\274t\305Y\275V\372\\=Y\255\253=S\210\277=\244\203\002>\337\\\027>F\341\031>\007\177\354=\217r;=\314-\362=%T&>\224A;>\311\225G>+\003`>0\307x>E\351\322=\366Z\027>\377\3419>\261\306\221=\223K\371=\t\276\035=\014\227\200\275\001AE\276haK\276bkV\276n\025_\276t\237u\2764\220\212\276\257Lb\276\007\235\242\275h\362\243\275s\262Z\276r\246\202\276`bh\276\035\263\031\276\223\373\'\276\326\017\336\275@\331\334\275\277\\x<\323M\231=\261\370\326=Qa\372=\232\212\006>|:,=W\227\212=\226w\363<\021\206\214=\200\370\007>y\'*>\035u0>D\3643>\017(z>\345\016\205>\">\210>\034y\221>\253\255\225>\271>\236>\272\223\205>@\347\231>r\323\250>\324\243\245>ke_>L\000X>ce\204>!AB>\357\316_>\250L&>\272\'F>\r&S>\225\t\037>]\204O>\253~}>\250\276\207>\307\224W>\324HM>D\270\201>g\263\215>\307\236\177>\007m\234>^\344\244>Si\001>\222\032\255=\301\214\">\276z%>uH\016>:^K>!\302R>\002\013T\274\374\000\376\274\252\"\240=\315\250\251\273\301Y\370<\\]\317\2750\351\022\276\347\241\222\276Q+\224\276\216\272\203\275\374\266r\275\331\251\223\274\331E\033\275\334r\367\275\264\026\016\276K2\024\276\212\256C\276i\234\207\276B\343\212\276\026^\201\276y\217\221\276\240\267W\276\2507\270\275\357\210\327\275\007\350\027\276\324\213\271\275^\242$\275\202\324\014\276C$2\276\210\3255\276\231\363\021\276\027\273\201\275\321\006\202\274!-\244<\274\260\230=:\316\273=\275w\271=y\r\255=\214\263\262=\276\341%\274\'\213\207\275\277\017\007\276\204\321\013\276 \354\014\276\361\233q\276\346n\214\276\266Z\232\276\203\341\232\2761\"{\276\211\362\274\275\340\230\033\273\"O\026=\212$:=\367E\364=H^\360=zq\320=z\'N\274x\007\t\275\230R~:\344\264l\272\240\346\272=R\177\377=\230\2361>\227\235C>\016\263\014>\356G\315=\211+\203=\360\2760>\3074&>s\2159>\201]->\340\010\343=\254\314\036>\343\323\323=l\252\205\2758\364\377\275\021\353\365\275.i\021\276\2376\341\274[k\272\274/2\317\275\313`\020\276\223\201\001\276T\341T\276,\310X\276\002\330T\276\347\005$\276J\325.\276\234\302L\276\211na<\355C\243=\333\304\021>\373\351\300=\277\002\353=\303T\025>\202) >\027XS>\337\031V>\016\202Y>Z3]>\027\236A>\327\203v>\r\t\203>\225\261M>\272_\332=D\024F>\001\330F>+\3752>\262\241<>\370\333>>\363,B>W\357\321=fUZ>\260\357h>\326\333Z>\345\'t>\215\202\201><\304\202>\233\240\237>$\017l>d\013w>p\345\207>\276~\327=]S$>\332\232<>\335aE>~nm>D[%>\304\023\342=Cm\016>\217\274\013>\327N\">c\302U>\350\367W>\375\017\235> 1\255>.$\235>r\372x>_4W>\336\0314>\236\264{=\nHg=\220\270\333\275\256\223\357\275\232\267\301<\246\230\345<5\"\t<=x\261\275\346\306\265<\265\376\361\274\335\261W\275\365\034\226\275\242M\260=\350\013\026>\330\270-> \2321>\340\336D>\031\3202>\357\307P>\351xl>\201S\200>R\327|>@}E>V>P>\310\263&>os;>\267\242i>\257D\200>BMn>(Fb>\t\321t>#\216\202>B>Z>\254/=>\031 \210>z\002\212>\247d\226>(1\232>\253)`>\312\312/>U\376b>\267\355\215>\272.\221>\352N\237>t7\252>\354~=>\0327\263=\243\256\024>JX)>\216\312&>\230\315_>\314\337n>L<L=\306\361\024=\241I3>\022\251=>\206\332/>\265|I>\245_\200>\220\263\210>\203y|>M\367f>u(\206>\2547\223>6\216b>Q\353\206>\356T\216>\234\210\227>\020\352\222=q\312F\275\277d\232\275\273\036\335<[J\247=\360\220\320:j\0031\275\033\314\232=\025\327\030=\353U5\274{\236\201<n\r\232<\020\332\310\275s\334\244\275Y:\357\275\361fE\276\300\353v\276G\245\036\276\204 \n\276,\360\361\274\320r$\275@&A\275\204\207\376<2J\231=\3301\216=^\t\235=\345\325\031>m\326\020>\3677/>\325F0>\374\"4>\017\252C>\345w\036>\250\203\364=\317\302\222=\311#\\\275\\\350C\275n\251\242\275\023q\242;\314L\323\275T7\211\275\274\303\305=\014\376\376=\\\240\375=\210\2349>m\014^>\214jw>\222\254\203>q?\206>\001\004\'>\202\317\257=\215\177\022\274\343\326%=3\336D=\002\214\367=\000V\362<\232o\326<\017\254\274\271}\243x\275\275\206\345\2756\004^\274\236\202\r=x\370\243\274\325\350\006\276\312\227\006\276\253e\366\275\353\016\233\275\236\242\232\273\'\236\236=*\007K\275\271\270\356\275\001\036\'\276\327\021X\276r\372\\\276\324Dw\276\033\0135\276\315>k\276\272\373t\276\362\202\307\275F\325,\276\252\r?\276cu>\276B\373)\276\311Q%\275\323~\024\275J\017\347\275\366\271\n\276\021\377\314\2752\2005<\037\301\250=\227\367\014>,\350J>U\037[>\005fY>\203\240\205>\024\322<>%\0054=?\316\244<j\221\035=\250\344\303\273qv\354\273\247\371\203\275\257\r?=\344e\215=\000\024\003>s\371\022>\302\352\321=0\276\224=j\245\210\275@\345\300\275\255:\037\276\340S\'\276\323N\200\276\031\360\216\276\212J\260\276\001]\274\276\037\306\320\276Fz\306\276\004\305\314\276\006-\201\276\231\016\'\276\300\372\270\275\325~\327\275\024\347\273\275X\010@\276u\326h\276[\261l\276\264\251\033\276a\330\210\275W\t\226\275\n\355\256\275WQ\030=W\277{=\356P\303=\376\273\216=#\361\027\275`!\335\275K\r\220;\035\371\004;K:\237\275o\331\316\275\302s;\275\213\016\246;9\246g=%\030\220=R\004\302<\3749A=\221\236L\275\224\341/\276h+\036\276\257\244\251\275\355\320H:v\330=\275\274Ea\275W\376\330\275\274\230(\276\t\3531\276\270\242\215\2751\250\003\274\225\264\261;2\256\252=M\337\304=9\247\007>\331_\310=o\204\023>Z\217\304=\346s\361=\211\330\346=N\247\274=\033A#>D\337F>\375`\372=\022\377\001>\253kf>\364\376i>\334\306\r>\221\351%\274\2446\366<\002\000\233=\307\032~=>~\237=\366\321\367=J\242{:\232\242\302;\374\257\236=\277qj=\002\023[=:\010\026<\007\300\224\275\247\245\261\275\373X$\276\217\367+\276<\340Z\276\007\364j\276\237e\261\275\214\306p\275!A[=AY\311=\306\247\335=m\366\007>W\300\n>\'\237\007>.p/=\361R\246=\035\225\'<f\034\017\274\374\001\234\275\245\360f\275\236K\240\275_\327\371\275\362\275\202\274.~\341<\270\252\236=\022a\362=\032\005\007>K}\211=\350\037\253=\033D\256=\246\236)>\352\302\017>\271v\026>j4\036>\203f$> %_>\207FJ>D\004T>\010\366\t>gJ<>\322\254[>\351\272\201>hv\207>\324\225\207>\014%Z>\323\220\200>\366\306\203>^\256A>x\013\335=\017\030\014>nCO>\231\'R>\214\220\214>\364\261\211>9\002\216>s:\226>|=\233>*\3172>\276sf>a\353@>\253\235?>)\324c>\374\342\205>\224)\212>.{X>!Ob>\345\373\202>\034\000w>3e\213>\254\212{>\363\323\206>_5l>\022\016\372=\255l\257\275\232\374\230\274e\'\263=\362j\004>$\255\372=\242\003b>#mv>\023 \204>\230$u>O\311\204>\177\363H>\017\234J>\335%\225=\177\315\257=W!K>\253>O><\344\340=\224\317s=\205?\331=\020\330\035>\205\232\000>\267\222\327;e=\205\272\375\034\250\275\213j<\276\222[\025\276\317\350a\275\254f\264\275R \345\275\266\323\022\273\2518x\273k\266Q\275\033\255\004\275x4\007\276g\225\230\275\222#\034=Jn\241=\350\244\332=&o\222=%\321\352=a\251\213=1\372\361<\021D\252\275\322\243\361\275\244L%\276\307l9\276\321\336\005\276\246\312\026\276\3053S\276~<q\276H\243~\276&j\233\276\217\342\251\276P!s\276\237\216$\276\344\210?\276\222m\007\276\201d\010\276\021[\235\275Ud\344\275\263\236 \276\356%u\276\356\022\215\276\375\361[\276\277\2135\275\000=C<,\321m<>Or;\274\307\332;_M\275;\202\312l=VH\310=\313_\353=\n\3147>p\212(>i\315\242<L\350\035;\007\355\330\2754s\244\275o\020\231\273\336a\022\275\000\207\007>\rm\031>\215\3357>`R.>\355$|=2\310O=\345[\221<\251k\263\274\367\256k\275\374\237D=l\252v=~B\257=V\376\020>{\2010>6\r\266=\226\3463\274\261=\207\275\t\303\226\275@\352?=kY\005>n\321!>\307\207\353=\216\362\321=\244\263\251<\241\023\335=\372I\033>\022\3310>\2717)>\21502>\207\014/>[\2760>z7?>\331\311A>\257Cg>\274\034|>\277\373l>`7r>\371\0160>-\027\230=\204\305\316=\257D\014>\243\350\325=\'v\350=\352\202\247\273\267\nT=\354\301\306<\204\026\034=h\222G>0\332z>U\250K>\230\037S>\037\315d>\374\313\223>\367\376\250>\200\224\206>\215\305u>{\020~>\307JN>\244\376->r<\326=\234\264\335<\265\006\245\275!9E\273f\332\000\275\376\271\300<=b\361;\025\214\"=\343n\357=\223\255\016>\034\234\225=\016\341\204\274\361\014\276\275\340F\237\275:\003\357\275\353\033\200\275x0s=\307\342\317=jF\277=%\365L\275ew\315\275\305\n6\276\221q;\276E\347/\276\221};\276f\233)\276w\326k\275\362\371\225\275+>\347\275\302\306\213\273\3523!\276\225\023U\276N9c\276\245\216d\276\255\345l\276\325\001\220\276\006?\234\276\006\325\225\276(j\263\275\335\2020\2752\324a\274.\372\227=c\022\217=F\266]=\2214a=\021\221\007>\265\263\013>7\\\364=\\\341\201=\007\366\203=[\204\301=\316l\010>\t@\030>\332\342X>Q\311g>\372%\355=\277\024%=\311\230\372=\346\346L>\341\3259>\327\030<>\013\021\202<\314\313\317\274\262\254a\275\326\360\323\275$\310\025\276\246\216W\275\030h >y@&>\345\0015>\013L\027>\364\257\365=\241:\022>\360\3024>{\006?>\030\2342>\243\3122>\370\316;>\320\037k>\002@v>ik\212>\356\251\224>l%\232>>\177\242>\246\301\242>\267\013\253>R7\243>\3068u>\223@\230>\302a$>\374\353W>g\034X>\210\2047>\323to>\342?r>ew\201>o\272\206>\327D\200>\023m~>\'\271\230>y\031\007>\325\032\267\274\026rW=f\262@\2757N\276\275\000\206+=w~\246=\371\321V=X\026\327==\tB>\016\022O>&\365X>\014\246m>C\226\200>\021vx>\241\200|>Sx\216>\256\2348>$5\276=\344)e={\334\004>%\316)=\320^\253=\363\304\223=\352\312\375=~y\337=\226\357\031>6\251\377=\203\376(>\364\325/=\307l4=\261\2226\275\370\213#=\274d\332=\217\201?>\006\266e>\325`.>\220\0058\274\375E\017=%\306m\275\305\277\310\275u\010_\275\310.\010\274\2608\212=\242+\303=\214\246\001>\026[\303=V\376\014>\263\223\026>\255\251\264=\252Z\003>k\235G>y#a>^%t>zS\205>\n(\205>\272\232\207>#\342\213>\226v\241>\r\254\256><\324\240>\317B\255>o\252\262>\222\010\264>\031M\226>\230)\357=!\354\307=\\\331>>OL\205=\232\021\325=\211\375\005\272\300?\343\274Di\360\274m\\\003\276o\363\004\276\202s\322<j3^=\360\230\321\274y\326\215\275v\374\277\274\2363\n\274\322\275\010=\342\336\274=\364\273\202<\334\302\023\276\364\335J\276Pyt\276gx\026\276\216\000\255\275\025\r\326\274\307\265Z\275\025\'\263\273\254\230\227\274\257\202\363\274\207)\026=\335\206\273=[l\006>\027{\020>\r\346C>\t\260Z>\027Rj>\005\265I>4eW>5^o>Cus>lj\202>z\236|>\315)G>\'\3100>/\205*>\261:)>\014G0>\317\305G>\335/\213>\355\214\217>_\334\217>\017\\,>ufq=j\355\330=\256\246\232=\033E\320<>7z=\204/\013=\342\247\'\2764\213I\276W5l\276\320pH\276\364\\g\276\242\321\010\276\240\251\216\275N*\220\2752kK\276y][\276\246W1\276\321\030G\276p\362\347\275\345\0359\275\213\352T<\177\016C\273\206F\310=\300U->:*>>\333m?>\250\226D>]\323\200>\313\203\207>\214\205\237>RT\247>\357p\033>\264\244w=\325+5=\213\305F<\357b\r=\335\323\302\274\323Q\253\275\305\271\311\2734\347\210\274Q\266\245\275\327\356\327\274B\265\234\275\350(!\276\177<@\276\000B\211<\230\363\223=n\305\305=\tA\244=\331\210\022>\276\2316>C\351d>\305\tl>>4\202>\"sE>\365\305W>}\246n>VD|>}?\212>\325di>E\rA>\311T;>\315\253U>\0368,>\376\364W>\217\344\257=\357\263\000>\340\177(>\021\352\005>QB->\201\377g>\325*\203>\\rr>5\311B>J\370\026>>\344A>\232\330h>\224\214s>\217\243u>cU\200>q\264\204>\1772F>U\326\226=\361R>=\212\215\341;\235\217\007>\253\0030>\335\216\361=\034\021\233\274\313\374\271\275%\263\302\275\242\210\005\273\365\035%\275\373\330{=\212x\361=\0304\371=\325\2110>(\033C>\023Eh>\"\223o>\301\003e>rg\200>a\370\350=\323$\322=\363$\207=\344\260\357=:\235\360=\220\221\000>\031\'\025>\005v\004\274\203h[=\211\213\017>\326l\001>Z\360\230=\373=\267=^\020\340=k!/\275e\352I\276Q3\177\276\203SJ\276\207\376s\276\023W\000\276\310^&\276n\312w\276,3\200\276\031 \204\276\362s\375\275\300G?\273\264\345\323<]]\274=\267\301\356=\274!\371={\354*>\215K9>\002X\025>Be\032>\267\036->\022\323O>e\354=>\213\261?>!<S>*eu>\"\374\323=\302\324Y>,\023d>\365-r>\303\027s>\037TK>\335N2>p\303\322=\250\371\334<Cf/\275\247\340+=\224>\330=\326@d=\352\304\253=\026\200\232=\312S\331\274r\244\317;H\311\305\274\002\242\304\275\201.\221\274GA7=`\266\344=\312\207\031>\370n\022>_\230>=[?\302\275\'\255\320\275\360\rc;\306M\270\275\331,.\276b\245\017\276\2431\304\275\014\237y<\363\225+=\222y\177=h\212\322=\210L\264=f\273\302=\250L\236<{a\244<]\223\243=\323\255\311=\362=\351=\3761\354=\033@\227=B\270\236<\224&\313<R\370\227=!\255.=\273y\027>\311\026A>\321\273\344=t\362\207\274U)\036\274!\352)=\246s\216\2733*\203=zC\322=J\374\014>\024\350D>\325\355G>\001\201b>\327\302u>\356\236z>\004\372{>0d\204>I\\\231>\314\311\254>\213\003\262>\305\214\242>"
      }
    }
  }
}
node {
  name: "Const_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\324>\305\275\034%\002\276\035\246\004\276m\236\017\276;Z\003\276{\003\025\275\236\342P<\021)?\274\255>S\275\207A\244\273^\250\223\274\254\220\307\274o\305V\2757\234M=\016\253\340=.\205\373=\261\313K=\277\310\302\275>\024\003\276\247\266\034\276\343r\250\275Pq\036\276\304pM\276\256.s\276\337+\257\275\344\210f\275z\206\301\275\204X\374\275hD=\276\263r\335\272\350x\320\274(\342\t\275\2624\213=\356\376\222=\252q\020=Qx9<\334\021\021\275\341t\030\275\312\250\307=<\270\003>\025\036\001>\215N\t>\023\212\027>\363\352\307=\374:i=A\245m={QJ\275\214\350\257\2751\230\245\275!v\217=\2126\274=\022\230&>\240\027\024>\025k\315=\341_\332=\237@\002>\205\265!>\356\3019>\r\231\010>\002&\000>U^4>\313Me>\034\0077>x\354E>\376d\321=\0166A=m\253\355;\226n\213=r\212\276=\033\242\010>\260\3730>\311\377A>4\261d>_\220\302=\3779\370\273\321\0335\275\226\016\340\275\002Y\315\275-eF\275\013\202:<\203\274\005=\325\266l\275I\t\272\275\207[\305\275\362\354\347<\374Y\330\275\202\306\021\276/\270 \276r\022T\276\276ZW\276\301\273\000\276\365\225\266\275\243$\312\275\345f-\276V\3701\276\360\375\203\276\2302\210\276#\352\215\276C8H\276tO\220\276\\y\237\276y\264\224\276\206*\232\276\020\356\237\276\260i\252\276\013~\261\276\247\310\206\276<\003\220\276s7\232\276pX\244\276Y\232\252\276\345\366\275\276\2235b\276\362\251\274\275J\252a\2759\250;\275\"\t\303\273\3050\223=k\207\346\274\274\372i\2750m\346\275\270EV\275\272\r_=B\331\003=y\375\213\274\350_y\275\333\330\001=\217P\244=\343\317\255<~p\215=\026.\007>\\\\\263=\362\313)=O\007\202=\262\006\301=\205{\n=\270\251>\275\037;\021\275C\031\226\274+\363P=k,H\274\325%\032\275Z\366d<\302\231\261=\"\265:=\341\305\273<Q\360\357\274\367x\021\276P\020;\276k\r\"\275\230m\340\275\356\317\006\276\377\355\322\275\322LJ\275\236\323#\2760\201F\276\270\312w\276]\246a\276\260)\261<\000\337d\275k\016\343\275\256v\000\276\264.\234\275\307\366\240\275_\342T\276\262\216@\276\r1\026\276\336UL\276\246\304Z\276\310\307\235\276\017\246\246\276kv\264\276\236\347\303\276\200\360\317\276\305)1\276\267\210\342\275*\250I\276\355\013Q\276,\346\026\276\347\234\301\275\316]\325\275g\016,\276Ci;\276\032\273\\\276\362Pj\276\312&\336\2754\367>\275\265\317\327\2742\231\277\272\210\367\202;\035\323E=|&\254;\277v\272\275o\222\232\275\371O\216\275\302Q\373\275\325W8\2764J\005\276_\"\003\276\251x(\276\326u4\276\3652b\276\201 \225\276\300^\211\276j\204\270\275\025\354Z\275X\\Q\274U8\374<\252k\253\275\303\215\226\275?}\370\274\216\362\036\275\"\237\322\274Y\002\216=2c}=\257\335w={\324\231<s\2747\274\357\206C\274\242\006\227=P\275\257=\r\214\010=\273\340\326;\007$h\275L\305\220\275\360\017\231\275\013\215T\275F\026\211\275l\007]<\225\306\243=\013\202\022>\001t&>\237}:>7=i=\013\362\030=n\3458\275\251`\261\275}$\313\275\370\0209\276\336\033J\276g\r\024\276.\013a\276\014[\'\276%\376.\276=\3721\276)\010\273\275pD\220\275\334:c=\357\224u\274\211c\265\275\003e\376\275\346\024\223\275\020\363J\275k\224\316\275[FI=\016X\222=L4\n\275\214hx\275\373\245\235\275\205mp\275Q9\027\276\330`;\276\372&C\276\006dk\276\346|\204\276\224\266Q\276\313\370@\276~\002B\276\215d\203\276\266O\237\276tY\250\276\202>\203\276/\213\226\276|\370\234\276\311\325\236\276\230\226\023\276\271\240\232\275\364\347\361\273\2230==W\033\210=\215\206\274=\353&\030>\034\331\036>q\201Q=\226?\030>\372r\035>\256+\031>N\365?>\315d\027>v\271z<P\247L=\207h\201=\277\222\023>a\336$>\255\023\023>\235\030\224=+\253\260=\267\375/>\326J8>\231K\006>hF\007>\332\2772>J\014J>\211L\211=;\275W=\254\321\242=\016H\216=\336\\\014>\217\213\343=\020\336\244=+#\027>G\272&>\013\210\031>!\202i>\334\274s>\221\n\211>\'1\200>!p\216>E\177F><3\033>!F\021=VGK=\353\270\314<\010\365\303=S\202\t>\034\013\005>->\003\274\222m\2628=\035~=\211Ui=s\224\204=\021\327\035>I\324f>\234(q>B\003\017>\374\321\'>r\222:>\021\210\r>\0255#>\216\271\016>\002\3413>x9\r>6\220S<\225i6\275+~\240\275\336\354/\275PN#\275\345|#\27661;\276\024\006\334\275t\275\020\275)\020\002\273\364k\017=\324\310t<\215RE=(\225\243\275r\360\014\276\364\2021\276\315\212M\276d\261)\276\261\305;\276Og\217\275\336hy:\215\221\335=P\214\026>L\367)>\032\rI>\250\233W>I\217_>[\026\210>\005R\217>\020\241\224>$r\207>\315^y>JV\224>S[\214>\365\331\235>\233[\242>h\352\230>w\333\215>\215\354\237>\354\362\207>~\204(>\2529K>\007Wc>L\312/>W\000\226\274y\274\200<\306\'M=\003\025\361=\357]H>e\r]>W\tg>?\223E>\346\236=>\253\177R>\214F\272=\373\336a;\212y\223\275=!.\275}\014 =\002{\325=\245\273\r>\365S.>\257\220B>\24074>\305\271Z>\231\251\203>Z\353\212>\311\260`>\256{:>\264}W>\022\\9>\234\327j=R\312\201\272\307\247\241=\347\232\313=\267+-=\364\034\212\275\364\032\n\276t.f\275\02540=b\241N=]\020\305=\201\003\354=\\\236\026>i\373\360=oj6>+\235O>HO\035>\251F=>/\026&>\343\206\001>\200\206\367=\267\370\261=\355g\001<\026\372\201\275\255\317\035\276\032\330\207\275\357Q\026\276\353o\"\2762\350\034\276\356q\217\2756\310\364;\006z\031=\237\'\025>\r\231(>\2749D>\2500\006>\220\374\007>\370#M>\250EM>\035\333M>\325\016\325=\024>==\023\360\014>\364}\343=n|\014>n|\364\272B\331\342\270G\366\322=\370g\343=\2010\233=Z\310\262=\005\026\220=S\364\217\2745\267\350\274N8I=cS\216=\t\315\345=\351A\263=U\230\323=\361\014\204\274t\305Y\275V\372\\=Y\255\253=S\210\277=\244\203\002>\337\\\027>F\341\031>\007\177\354=\217r;=\314-\362=%T&>\224A;>\311\225G>+\003`>0\307x>E\351\322=\366Z\027>\377\3419>\261\306\221=\223K\371=\t\276\035=\014\227\200\275\001AE\276haK\276bkV\276n\025_\276t\237u\2764\220\212\276\257Lb\276\007\235\242\275h\362\243\275s\262Z\276r\246\202\276`bh\276\035\263\031\276\223\373\'\276\326\017\336\275@\331\334\275\277\\x<\323M\231=\261\370\326=Qa\372=\232\212\006>|:,=W\227\212=\226w\363<\021\206\214=\200\370\007>y\'*>\035u0>D\3643>\017(z>\345\016\205>\">\210>\034y\221>\253\255\225>\271>\236>\272\223\205>@\347\231>r\323\250>\324\243\245>ke_>L\000X>ce\204>!AB>\357\316_>\250L&>\272\'F>\r&S>\225\t\037>]\204O>\253~}>\250\276\207>\307\224W>\324HM>D\270\201>g\263\215>\307\236\177>\007m\234>^\344\244>Si\001>\222\032\255=\301\214\">\276z%>uH\016>:^K>!\302R>\002\013T\274\374\000\376\274\252\"\240=\315\250\251\273\301Y\370<\\]\317\2750\351\022\276\347\241\222\276Q+\224\276\216\272\203\275\374\266r\275\331\251\223\274\331E\033\275\334r\367\275\264\026\016\276K2\024\276\212\256C\276i\234\207\276B\343\212\276\026^\201\276y\217\221\276\240\267W\276\2507\270\275\357\210\327\275\007\350\027\276\324\213\271\275^\242$\275\202\324\014\276C$2\276\210\3255\276\231\363\021\276\027\273\201\275\321\006\202\274!-\244<\274\260\230=:\316\273=\275w\271=y\r\255=\214\263\262=\276\341%\274\'\213\207\275\277\017\007\276\204\321\013\276 \354\014\276\361\233q\276\346n\214\276\266Z\232\276\203\341\232\2761\"{\276\211\362\274\275\340\230\033\273\"O\026=\212$:=\367E\364=H^\360=zq\320=z\'N\274x\007\t\275\230R~:\344\264l\272\240\346\272=R\177\377=\230\2361>\227\235C>\016\263\014>\356G\315=\211+\203=\360\2760>\3074&>s\2159>\201]->\340\010\343=\254\314\036>\343\323\323=l\252\205\2758\364\377\275\021\353\365\275.i\021\276\2376\341\274[k\272\274/2\317\275\313`\020\276\223\201\001\276T\341T\276,\310X\276\002\330T\276\347\005$\276J\325.\276\234\302L\276\211na<\355C\243=\333\304\021>\373\351\300=\277\002\353=\303T\025>\202) >\027XS>\337\031V>\016\202Y>Z3]>\027\236A>\327\203v>\r\t\203>\225\261M>\272_\332=D\024F>\001\330F>+\3752>\262\241<>\370\333>>\363,B>W\357\321=fUZ>\260\357h>\326\333Z>\345\'t>\215\202\201><\304\202>\233\240\237>$\017l>d\013w>p\345\207>\276~\327=]S$>\332\232<>\335aE>~nm>D[%>\304\023\342=Cm\016>\217\274\013>\327N\">c\302U>\350\367W>\375\017\235> 1\255>.$\235>r\372x>_4W>\336\0314>\236\264{=\nHg=\220\270\333\275\256\223\357\275\232\267\301<\246\230\345<5\"\t<=x\261\275\346\306\265<\265\376\361\274\335\261W\275\365\034\226\275\242M\260=\350\013\026>\330\270-> \2321>\340\336D>\031\3202>\357\307P>\351xl>\201S\200>R\327|>@}E>V>P>\310\263&>os;>\267\242i>\257D\200>BMn>(Fb>\t\321t>#\216\202>B>Z>\254/=>\031 \210>z\002\212>\247d\226>(1\232>\253)`>\312\312/>U\376b>\267\355\215>\272.\221>\352N\237>t7\252>\354~=>\0327\263=\243\256\024>JX)>\216\312&>\230\315_>\314\337n>L<L=\306\361\024=\241I3>\022\251=>\206\332/>\265|I>\245_\200>\220\263\210>\203y|>M\367f>u(\206>\2547\223>6\216b>Q\353\206>\356T\216>\234\210\227>\020\352\222=q\312F\275\277d\232\275\273\036\335<[J\247=\360\220\320:j\0031\275\033\314\232=\025\327\030=\353U5\274{\236\201<n\r\232<\020\332\310\275s\334\244\275Y:\357\275\361fE\276\300\353v\276G\245\036\276\204 \n\276,\360\361\274\320r$\275@&A\275\204\207\376<2J\231=\3301\216=^\t\235=\345\325\031>m\326\020>\3677/>\325F0>\374\"4>\017\252C>\345w\036>\250\203\364=\317\302\222=\311#\\\275\\\350C\275n\251\242\275\023q\242;\314L\323\275T7\211\275\274\303\305=\014\376\376=\\\240\375=\210\2349>m\014^>\214jw>\222\254\203>q?\206>\001\004\'>\202\317\257=\215\177\022\274\343\326%=3\336D=\002\214\367=\000V\362<\232o\326<\017\254\274\271}\243x\275\275\206\345\2756\004^\274\236\202\r=x\370\243\274\325\350\006\276\312\227\006\276\253e\366\275\353\016\233\275\236\242\232\273\'\236\236=*\007K\275\271\270\356\275\001\036\'\276\327\021X\276r\372\\\276\324Dw\276\033\0135\276\315>k\276\272\373t\276\362\202\307\275F\325,\276\252\r?\276cu>\276B\373)\276\311Q%\275\323~\024\275J\017\347\275\366\271\n\276\021\377\314\2752\2005<\037\301\250=\227\367\014>,\350J>U\037[>\005fY>\203\240\205>\024\322<>%\0054=?\316\244<j\221\035=\250\344\303\273qv\354\273\247\371\203\275\257\r?=\344e\215=\000\024\003>s\371\022>\302\352\321=0\276\224=j\245\210\275@\345\300\275\255:\037\276\340S\'\276\323N\200\276\031\360\216\276\212J\260\276\001]\274\276\037\306\320\276Fz\306\276\004\305\314\276\006-\201\276\231\016\'\276\300\372\270\275\325~\327\275\024\347\273\275X\010@\276u\326h\276[\261l\276\264\251\033\276a\330\210\275W\t\226\275\n\355\256\275WQ\030=W\277{=\356P\303=\376\273\216=#\361\027\275`!\335\275K\r\220;\035\371\004;K:\237\275o\331\316\275\302s;\275\213\016\246;9\246g=%\030\220=R\004\302<\3749A=\221\236L\275\224\341/\276h+\036\276\257\244\251\275\355\320H:v\330=\275\274Ea\275W\376\330\275\274\230(\276\t\3531\276\270\242\215\2751\250\003\274\225\264\261;2\256\252=M\337\304=9\247\007>\331_\310=o\204\023>Z\217\304=\346s\361=\211\330\346=N\247\274=\033A#>D\337F>\375`\372=\022\377\001>\253kf>\364\376i>\334\306\r>\221\351%\274\2446\366<\002\000\233=\307\032~=>~\237=\366\321\367=J\242{:\232\242\302;\374\257\236=\277qj=\002\023[=:\010\026<\007\300\224\275\247\245\261\275\373X$\276\217\367+\276<\340Z\276\007\364j\276\237e\261\275\214\306p\275!A[=AY\311=\306\247\335=m\366\007>W\300\n>\'\237\007>.p/=\361R\246=\035\225\'<f\034\017\274\374\001\234\275\245\360f\275\236K\240\275_\327\371\275\362\275\202\274.~\341<\270\252\236=\022a\362=\032\005\007>K}\211=\350\037\253=\033D\256=\246\236)>\352\302\017>\271v\026>j4\036>\203f$> %_>\207FJ>D\004T>\010\366\t>gJ<>\322\254[>\351\272\201>hv\207>\324\225\207>\014%Z>\323\220\200>\366\306\203>^\256A>x\013\335=\017\030\014>nCO>\231\'R>\214\220\214>\364\261\211>9\002\216>s:\226>|=\233>*\3172>\276sf>a\353@>\253\235?>)\324c>\374\342\205>\224)\212>.{X>!Ob>\345\373\202>\034\000w>3e\213>\254\212{>\363\323\206>_5l>\022\016\372=\255l\257\275\232\374\230\274e\'\263=\362j\004>$\255\372=\242\003b>#mv>\023 \204>\230$u>O\311\204>\177\363H>\017\234J>\335%\225=\177\315\257=W!K>\253>O><\344\340=\224\317s=\205?\331=\020\330\035>\205\232\000>\267\222\327;e=\205\272\375\034\250\275\213j<\276\222[\025\276\317\350a\275\254f\264\275R \345\275\266\323\022\273\2518x\273k\266Q\275\033\255\004\275x4\007\276g\225\230\275\222#\034=Jn\241=\350\244\332=&o\222=%\321\352=a\251\213=1\372\361<\021D\252\275\322\243\361\275\244L%\276\307l9\276\321\336\005\276\246\312\026\276\3053S\276~<q\276H\243~\276&j\233\276\217\342\251\276P!s\276\237\216$\276\344\210?\276\222m\007\276\201d\010\276\021[\235\275Ud\344\275\263\236 \276\356%u\276\356\022\215\276\375\361[\276\277\2135\275\000=C<,\321m<>Or;\274\307\332;_M\275;\202\312l=VH\310=\313_\353=\n\3147>p\212(>i\315\242<L\350\035;\007\355\330\2754s\244\275o\020\231\273\336a\022\275\000\207\007>\rm\031>\215\3357>`R.>\355$|=2\310O=\345[\221<\251k\263\274\367\256k\275\374\237D=l\252v=~B\257=V\376\020>{\2010>6\r\266=\226\3463\274\261=\207\275\t\303\226\275@\352?=kY\005>n\321!>\307\207\353=\216\362\321=\244\263\251<\241\023\335=\372I\033>\022\3310>\2717)>\21502>\207\014/>[\2760>z7?>\331\311A>\257Cg>\274\034|>\277\373l>`7r>\371\0160>-\027\230=\204\305\316=\257D\014>\243\350\325=\'v\350=\352\202\247\273\267\nT=\354\301\306<\204\026\034=h\222G>0\332z>U\250K>\230\037S>\037\315d>\374\313\223>\367\376\250>\200\224\206>\215\305u>{\020~>\307JN>\244\376->r<\326=\234\264\335<\265\006\245\275!9E\273f\332\000\275\376\271\300<=b\361;\025\214\"=\343n\357=\223\255\016>\034\234\225=\016\341\204\274\361\014\276\275\340F\237\275:\003\357\275\353\033\200\275x0s=\307\342\317=jF\277=%\365L\275ew\315\275\305\n6\276\221q;\276E\347/\276\221};\276f\233)\276w\326k\275\362\371\225\275+>\347\275\302\306\213\273\3523!\276\225\023U\276N9c\276\245\216d\276\255\345l\276\325\001\220\276\006?\234\276\006\325\225\276(j\263\275\335\2020\2752\324a\274.\372\227=c\022\217=F\266]=\2214a=\021\221\007>\265\263\013>7\\\364=\\\341\201=\007\366\203=[\204\301=\316l\010>\t@\030>\332\342X>Q\311g>\372%\355=\277\024%=\311\230\372=\346\346L>\341\3259>\327\030<>\013\021\202<\314\313\317\274\262\254a\275\326\360\323\275$\310\025\276\246\216W\275\030h >y@&>\345\0015>\013L\027>\364\257\365=\241:\022>\360\3024>{\006?>\030\2342>\243\3122>\370\316;>\320\037k>\002@v>ik\212>\356\251\224>l%\232>>\177\242>\246\301\242>\267\013\253>R7\243>\3068u>\223@\230>\302a$>\374\353W>g\034X>\210\2047>\323to>\342?r>ew\201>o\272\206>\327D\200>\023m~>\'\271\230>y\031\007>\325\032\267\274\026rW=f\262@\2757N\276\275\000\206+=w~\246=\371\321V=X\026\327==\tB>\016\022O>&\365X>\014\246m>C\226\200>\021vx>\241\200|>Sx\216>\256\2348>$5\276=\344)e={\334\004>%\316)=\320^\253=\363\304\223=\352\312\375=~y\337=\226\357\031>6\251\377=\203\376(>\364\325/=\307l4=\261\2226\275\370\213#=\274d\332=\217\201?>\006\266e>\325`.>\220\0058\274\375E\017=%\306m\275\305\277\310\275u\010_\275\310.\010\274\2608\212=\242+\303=\214\246\001>\026[\303=V\376\014>\263\223\026>\255\251\264=\252Z\003>k\235G>y#a>^%t>zS\205>\n(\205>\272\232\207>#\342\213>\226v\241>\r\254\256><\324\240>\317B\255>o\252\262>\222\010\264>\031M\226>\230)\357=!\354\307=\\\331>>OL\205=\232\021\325=\211\375\005\272\300?\343\274Di\360\274m\\\003\276o\363\004\276\202s\322<j3^=\360\230\321\274y\326\215\275v\374\277\274\2363\n\274\322\275\010=\342\336\274=\364\273\202<\334\302\023\276\364\335J\276Pyt\276gx\026\276\216\000\255\275\025\r\326\274\307\265Z\275\025\'\263\273\254\230\227\274\257\202\363\274\207)\026=\335\206\273=[l\006>\027{\020>\r\346C>\t\260Z>\027Rj>\005\265I>4eW>5^o>Cus>lj\202>z\236|>\315)G>\'\3100>/\205*>\261:)>\014G0>\317\305G>\335/\213>\355\214\217>_\334\217>\017\\,>ufq=j\355\330=\256\246\232=\033E\320<>7z=\204/\013=\342\247\'\2764\213I\276W5l\276\320pH\276\364\\g\276\242\321\010\276\240\251\216\275N*\220\2752kK\276y][\276\246W1\276\321\030G\276p\362\347\275\345\0359\275\213\352T<\177\016C\273\206F\310=\300U->:*>>\333m?>\250\226D>]\323\200>\313\203\207>\214\205\237>RT\247>\357p\033>\264\244w=\325+5=\213\305F<\357b\r=\335\323\302\274\323Q\253\275\305\271\311\2734\347\210\274Q\266\245\275\327\356\327\274B\265\234\275\350(!\276\177<@\276\000B\211<\230\363\223=n\305\305=\tA\244=\331\210\022>\276\2316>C\351d>\305\tl>>4\202>\"sE>\365\305W>}\246n>VD|>}?\212>\325di>E\rA>\311T;>\315\253U>\0368,>\376\364W>\217\344\257=\357\263\000>\340\177(>\021\352\005>QB->\201\377g>\325*\203>\\rr>5\311B>J\370\026>>\344A>\232\330h>\224\214s>\217\243u>cU\200>q\264\204>\1772F>U\326\226=\361R>=\212\215\341;\235\217\007>\253\0030>\335\216\361=\034\021\233\274\313\374\271\275%\263\302\275\242\210\005\273\365\035%\275\373\330{=\212x\361=\0304\371=\325\2110>(\033C>\023Eh>\"\223o>\301\003e>rg\200>a\370\350=\323$\322=\363$\207=\344\260\357=:\235\360=\220\221\000>\031\'\025>\005v\004\274\203h[=\211\213\017>\326l\001>Z\360\230=\373=\267=^\020\340=k!/\275e\352I\276Q3\177\276\203SJ\276\207\376s\276\023W\000\276\310^&\276n\312w\276,3\200\276\031 \204\276\362s\375\275\300G?\273\264\345\323<]]\274=\267\301\356=\274!\371={\354*>\215K9>\002X\025>Be\032>\267\036->\022\323O>e\354=>\213\261?>!<S>*eu>\"\374\323=\302\324Y>,\023d>\365-r>\303\027s>\037TK>\335N2>p\303\322=\250\371\334<Cf/\275\247\340+=\224>\330=\326@d=\352\304\253=\026\200\232=\312S\331\274r\244\317;H\311\305\274\002\242\304\275\201.\221\274GA7=`\266\344=\312\207\031>\370n\022>_\230>=[?\302\275\'\255\320\275\360\rc;\306M\270\275\331,.\276b\245\017\276\2431\304\275\014\237y<\363\225+=\222y\177=h\212\322=\210L\264=f\273\302=\250L\236<{a\244<]\223\243=\323\255\311=\362=\351=\3761\354=\033@\227=B\270\236<\224&\313<R\370\227=!\255.=\273y\027>\311\026A>\321\273\344=t\362\207\274U)\036\274!\352)=\246s\216\2733*\203=zC\322=J\374\014>\024\350D>\325\355G>\001\201b>\327\302u>\356\236z>\004\372{>0d\204>I\\\231>\314\311\254>\213\003\262>\305\214\242>"
      }
    }
  }
}
node {
  name: "Const_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\227\205\303\275Ss\r\276\377\367\020\276\303\335 \276\356F\r\276\263\345\313:\270\262\216=<\306\347<U\025\032\275ix\001=2\337\034<\335R\272\272;\016M\275\364\010\331=\227\304;>}oL>\311\277\234=\362g\006\276o\3650\276\016\321P\276\030U\305\275\272\246D\276\216\201}\276\023J\224\276\366r\235\275\345\312\033\275\267:\275\275G\303\007\276\224_[\276L\351\370<\352>I\273`\307t\274(z\355=\331%\367=\025\221\203=\204\317\337<\252)1\275\346M<\275\363\301\024>\002\213<>\212W8>1!C>m#V>\305.\372=\262Ya=\216\270h=\234\255\332\275/-\037\276\323\367\025\276li\276=\030D\374=\247\016\\>\347\005?>n\217\357=$N\001>\227\214 >l\245M>0\231n>.b\033>\277#\r>\215/\\>\326n\216>,#Q>\331zf>m\314\246=\356\005\304:?\341\\\275\250ZB=\377\357\261=}\321\027>\235%Q>\'hh>\231\365\212>\034\326\234=\342\022w\275.Q\331\275\314\031<\276\233\006-\276\247!\257\275\014#\313;\236C\033=\250h\273\275j\223\n\276\322 \022\276\002-<=Q|\013\276#\3049\276\354\035L\276\267\241\204\276x\214\206\276X\023\n\276\314\331\246\275\000\230\304\275k\023J\276\215JP\276\342y\235\276)1\242\276@\255\250\276\304\253P\276\035*\241\276.#\262\276#\267\242\276\nf\251\276\303s\260\276\371\337\274\276\263\342\304\276\\\216\204\276\204?\222\276N\327\240\276\350\236\256\276{\320\266\276\240\252\315\276\254\244E\276\327\273\370\274\305\270j<i\320\322<\240\331\231=\215\377)>\206\313\014<?\324\r\275A\313\352\275\351\237\376\274\022+\331=\223`\224=v\271\251\272}\207\204\275N7\200=\003\236\377=\303?\030=wi\317=z\0279>\031\344\351=y\177==\220U\237=.\232\370=\241M\357<\273\204\253\275<\300\207\275j\227\036\275(\001\213=\310\227\337\2744(\203\275\355\\\206<\232\365\366=\252\343i=d\246\267<K3b\275\342\323N\276\266}~\276![(\275W\277\007\276\352g$\2767\222\363\275\331b+\275a\260B\276k\325l\276<\351\222\276|\331\202\276\237\210\177=s\200.\275\217s\352\275g\263\010\276Q\177\210\275\342^\217\275:\254u\276[9Y\2760\013\035\276\352\331d\276^Ww\276\315\022\263\276\372\r\274\276\267\221\311\276F\230\327\276\001\247\341\276af\027\276\274Q\226\275KLA\276N\364J\276u\350\377\275\257\310j\275\274%\223\275\371\031)\276\341\251>\276\342\262l\276\211\035\177\276.\035\236\275\r\253\226;NW\376<~\223\202=\260\215\221=\020\346\004>\300\226\\=U\342\311\275Z\222\231\275Fr\206\275\013\305\026\276\010\013g\276\010\206\026\276]\030\023\276\334\351I\276\304\366Z\276(\'\214\276\311\241\264\276\320n\242\276\033\374{\275\323\371Z\274\346\035\"=<\215\302=:7\237\275i<\202\275P\212S\273R!\207\274\332\3174; [\010>\000\363\366=\365\034\362=\257\0169=\236j\260\273\214\222\330\273\250/\001>\225\257\022>\031\020R=\027U\322;\353p\275\2757\354\347\275\214x\364\275!(\236\275\365\013\321\275u\244\034=\254\220\014>\276^`>\201]x>G\t\210>\207\005x=r\326\374<\202\350\262\275Uw\021\276\026:\"\276\212W\203\276\021\275\214\276\021\271A\276OC\217\276\304!G\276\3314Q\276{GU\276s\235\242\2759\370D\275\263\244\374=\211\267M<\037\364\300\275Ix\022\276\333\270\211\275\335v\020\275`\324\343\275\360)\276=\300\375\366=\2066\003\275\035m\215\275\241\343\273\275\353\250\203\275Z\244>\276z\200k\276\237\024u\276[\261\222\276\332M\243\276Z\241p\276g\204V\276\310\010X\276\222=\232\276\201:\271\276\231N\302\276*\255\213\276])\244\276T\364\253\276m?\256\276\247\372\323\275=\305s\274\220\025\215=\377\315\006>7\267\036>L\354<>\373l|>\364\306\201>%\t\252=\231XR>\202~X>\201\237Q>B\267\200>{`?>\312\362&\274\247\037+=\224k|=\224\3703>\\\265J>7\240.>\3212y=pG\251=\260oR>~n]>\324\353\016>\345j\020>9=Q>#\323q>v\304\026=N#\206<M2x=\243?9=ww\034>\216\273\344=\006\006\202=\206\366+>\343{B>\364\241,>1S\215>5\241\223>\262\271\245>\'0\227> \307\250>\246\230H>\n\007\007>\021\346\363\274O\375\275\273P\273!\275VB\240=~\202\014>)\243\005>\201\014\206\275\303\204U\275t\302A=\257\007#=\0163W=\3024?>\"C\215>\251F\223>\223\262\022>\331\3305>5(P>-:\013>\374%,>e\324\013>\'aE>\'\213\007>P\345D\275=\024\370\275\236\032&\276a\362\320\275\351\023\306\2754\250y\276\246\213\211\276\243\320\027\276\371\210#\275\356\013\t<|\355y=!\332\361<\346D\240=O\341\341\275\"\204<\276\352\257h\276Q\276\204\276\001\246Q\276\304\036i\276\314\225h\275\200h%=\016~0>\304Z]>Z\375r>\345\222\212>7w\222>\371\325\226>\314\036\260>| \267>\375=\274>\037\002\246>Z\233\223>\221\244\260>Yt\243>\r5\270>\2725\275>\322h\255>a\221\232>\272-\263>a,\214>\235\302\365=\031\2435>\317e\\>\210\366\016>\260\\\333\275\334hS\275\320\262y;\014c\333=\\\344Z>{bu>M#\201>\242\nP>\301\326C>;&c>?\211N=\274$\206\275\363\314\037\276j\310\334\275\223)\240<\272\014\347=\204\021#>\220\037N>z\\h>\347\337Q>\313\245\202>\301\305\235>\r\031\246>Y\210x>]7=>\"hh>A\3568>\342\032g:\367\204\231\275\252\024\\=\240\020\256=\023\275\226;\030\244\n\276\350\017Y\276\305\374\276\275\335r<=\206\365e={\262\362=\204t\023>\375\247>>\377\263\017>8|b>\023\360\200>ti3>\3743_>\204\216:>\302\302\000>\333\021\357=\013\001~=\247\034d\275\311\354\030\276~\353\200\276_\311\344\275\350\206U\276\240qc\276\353\235Z\2760\270\252\275q\252\347<7j\216=\220)R>U\215h>G\n\204>\013\366\'>`b*>\322\205\201>d\232\201>\030\372\201>\241`\307=3\340C<\327\347\031>\252y\343=D\010\031>>\267<\275\367c1\275b\n\342=\'\025\371=\334\007\216=\237\'\262=\275Ix=\216}\213\275\243+\252\275wo4=\234j\232=cG\016>\335\355\312=b\316\374=\374\216n\275\364\014\336\275\303cj=\035\027\314=Ls\350=ep%>\336,B>\334\261E>\256\233\010>\004\022\254<#A\n>\305\323I>}\342e>,Uv>\362%\213>V\221\232>\203B\253=v\241\032>\354\277K>\022H)=^7\356=\367\363J;\321\222\373\275^\221\206\276\245\246\211\276\200_\217\276\231\370\223\276\'\360\237\276\211\362\257\276\'\004\210\276\321\001t\275\376\005x\275\031\347w\276\331\315\224\276\356{\200\276\206&\023\276\266q\'\276\325d\256\275\302\252\254\275\221\260\245=\254\'\034>\024\270?>Q\017T>K\370^>eC\216=\223\264\327=\220\2675=\346R\317=Q5@>\237\250j>Rlr>\311\337v>\225S\244>\r\236\254>3\357\257>\340o\271>\247\255\275>s\030\306>]\014\233>:A\264>S_\304>\3644\277>\305~T>\3762I>\331c\212>s\030+>\010\325Y>\212,\005>F\3518>\265\202M>\305\252\374=L\361L>z\311\207>S\373\223>o\365R>\337=C>QR\212>\337\221\232>\321\r\205>\252^\253>\014\204\265>\304\235\254=\002\305\377<\231\252\021>\234\355\025>D\324\352=\\\tP>N\213Z>\212\274\232\275\345_\306\275?g\202=\374\006-\275\210u\014<\322\320\033\276\004\204L\276\257d\257\276\272\314\260\276\263\343e\27502L\275\204V\036;3\305\316\274\316\334\013\276\203\231#\276\246\260+\276\377pi\276Ix\240\276%\006\244\276-\244\225\276\262\271\250\276\030\362`\276\373-V\275@v\233\275\336\236\020\276\2549v\275[\026\010<\227\'\r\276\n#@\276G1E\276\343\213\017\276`=\331\274\243\350\032=.C\256=&@\035>Q\2342>\327\2050>w\370$>\316\347(>?\340 \274=\312\305\275\300\275?\276g\376E\276\002\201G\276\326_\240\276\013\316\263\276\026\222\300\276\243\014\301\2765\323\221\276iwx\275\304fc=\241\342\323=\203\006\352=f\277N>\212\200K>b\0160>Z=5\274\314\236+\275\240f)<R\357\360;-\355\017>\226{<>mCy>\330\025\207>?\3163>#\203\355=h\232q=>\250Y>\353`I>\3476c>\357?O>a\"\335=Wy3>\233\247\301=\253\245\007\276\357\233M\276\267\243E\276\014\342_\276c\241%\275\202\275\010\275\035{\020\276\350)D\276\372\260,\276\2734\211\276In\213\276\3367\210\276\321(@\276)\271O\2766\275y\276t6\211=\2675\026>=r^>\356G\023>Y1->\364\367S>\223\037a>\310`\216>%\357\217>\\\356\221>\317+\224>\347\332u>\242;\235>}S\246>\205\276k>\\\301\245=\374wX>\235\210Y>J\\:>\336>I>%\307L>\277;R>X\336r=\253\326p>\274P\202>\322Zn>r(\211>@]\223>g\033\225>9\033\271>\271\233q>\224\335\200>\267\227\222>\007Md=|\362\020>V\3664>|\014B>\017\n|>\261\233\022>\303\265\221=\347\214\360=\020\221\350=\373\226\031>CZh>]\226k>f\311\263>\244M\304>\274\t\255>\304t{>\034\322J>\014\017\030>\305$\336\273D0Y\274\251pQ\276\214\317[\276\364\036\3019\360\371\333;\361i\245\274\'\203\022\276\326A\200<Y\031Y\275\t\310\252\275\032\311\342\275\227\372\345=f\301>>c\347Z>H\234_>\007ew>\265\260Z>\022\352\200>\006\036\222>\001\'\236>\341\357\232>\"qX>\256\277h>\230\306\">\0023E>b\225\205>\030F\225>\031\307\205>P\244v>\020\276\211>Y\335\225>I\206_>c\016->\252\333\227>\377h\232>\036\305\252>g\232\257>?\304U>*0\013>`\035`>\263\215\230>\013\335\234>H\002\257>\352\t\274>\316\255\037>\343\265\355<\234\020\361=\301H\027>R\257\023>\361\352g>\201\356|>/\0379\273\261\"\242\274V\0268>\270\266E>6R2>x+V>\r5\217>\312s\231>\377\262\211>\tKr>hJ\223>\342,\244>3@a>\277k\217>\360_\231>\277w\245>>op<v\316\377\275\2761\036\276\205\351@\273\262\027\226=\273\322\365\274o\307\257\275UU\241=\250\264\345<\332\273\021\275\334\311P;\251\331\370;\251\377\026\276\3724\367\275\004G+\276B{\203\276\314\251\235\276Hc:\276E\262\034\276\206\r\310\273\020\275\262\274p<\005\275[\255\234=X{\010>\250\236\376=?j\t>]ji>\321\355Y>\375N\177>\255M\200>\003\304\202>\255\272\214>*\363Q>\007\251\016>\317\203b=\303\267\005\276nx\365\275\'*&\276\033\013w\274\370\\&\276\354\355\326\275\203\275\000>y\236$>\016\230#>(Mm>u\342\213>\204\027\232>\t\333\242>\255\267\245>\030\032,>\243\031f=\177\361\215\275\235\256\005<\225\315\243<SA\004>=\263\222:\303\260h\273\032\223&\275\241\377\370\275\004\326=\276\275\364\376\274\353\033\037=\211+\036\275\216\3359\276rc9\276+\203\'\276\241=\277\275\336\274M<q}\375=\373Pr\275\017L\025\276\231\277O\276{U\204\276\235\'\207\276sO\226\276\314DI\276\331e\207\276\313d\215\276\017\215\227\275\274F2\276\313\266J\276O\331I\276\356\t+\276\236\335$<\360\264~<tc\327\275E\360\r\276\241O\260\275\243\250\210=\331\275\035>\201\353]>)e\217>\343\207\227>\215$\226>\031!\257>4\325d>\235\331\310<\344\235\355\2736V\247<\255\212)\275^\2450\275m\214\371\275]\237L=\234\345\247=\255\267&>\017\255;>\235\204\363=9\236\224=\367l\367\2750\222\036\276\322\207h\276\330\303q\276[\230\247\276\032*\265\276p\344\320\2765\336\331\276\336\271\347\276\213$\332\276\213l\337\276\372Jw\276\345\370\003\2767.!\275\321b}\275\204\3035\275 :>\276\237\206t\276[\241y\276i\226\007\276#>\234\274\002\017\360\274/ZI\275Jx\343=\216\221\017>\312\2628>j$\014>\225\330\000\275\020\204\005\276\0104\320<;\345\263<\203\220\273\275\3366\374\275\220\"-\275\273\334\360<\007\\\312=\251\334\357=\307\266.=\362\375\234=\325\271\217\275\242\251e\276\233]K\276&\332\276\275S\264\270</ 8\275\r\355j\275=i\004\2761\362R\276\355\267^\276z\247{\275\325W\274<3W)=\263\213\022>\314\344\">\234\307P>c\367\025>y\031S>\263\017\003>\353J\">t^\031>\031*\352=,\211X>\356\n\203>!0\016>$Y\025>\232|\215>&\235\217>m\345\020>R\312v\275\217\327\3009\362%\212=\312#E=[&\224=\333\355\013>+\005\021\275C\027\342\274~J\246={\352Q=\242\211:=~\251\261\274n\342\t\276\301\235\034\276\246\364w\276\373M\200\276l\362\231\276\330B\242\276\004\227\274\275\304\025S\275\3216\316=\213\274\037>*4,>9EK>\304\303N>\306=I>J,:=\014\234\324=QD\323\273\350\352\r\275\203\335\004\276u\311\305\275\230\300\002\276\257\224?\2761z\201\274\270\335D=l/\361=\033\302/>L\240A>V\013\254=\007\204\335=NA\342=\217:d>\330P9>\257\300B>\275\351M>T\013W>k \223>,\202\200>s5\207>\035\020\014>\2530Z>)\024\203>\217|\234>\241e\243>`\214\243>\272\227k>e3\222>\261\241\226>\32619>6\311i=\322e\334=\367<X>\227\205\\>\211^\236>\364\366\231>\205\227\237>\357.\252>5\202\260>\323\247\023><\231d>\300\247->\024\264+>-\323e>C\373\217>\003\350\225>U;N>\206!^>\326\217\212>\277\013}>C`\226>sC\200>UY\216>9\203e>\236xo=\227&D\276\002t\256\275\355\367\220=\360>\003>\255\002\363=\306N}>x\347\212>\211\222\225>\214}\207>Y\253\224>0zH>c\373J>\304\300\232<.a&=-gV>\367\377[>}\017\253=\323\232\200<\275\317\263=\317\337!>s\'\357=]$7\275\305G_\275j\007\037\276\313\021\210\276\215\016U\276t<\231\275\220G\361\275ZC\030\276l`\020<p\035\327;\374\236\177\275\346\367\013\275\010\261/\276A\242\260\275iw\213=\356\215\365=\035\246\036>\223\211\316=Q\312!>\365\373\260=\357\253\346<\342\242\001\276\0202.\276U\231c\276\304\022{\276\211\321)\276\267u@\276\2644\206\276\306\200\227\276\023\013\237\276;\025\274\276bQ\311\276\010\345\202\276\031\350\027\276r\253>\276\206\351\337\275c\356\342\275t\311\372\274\301y\263\275\262\277!\276\366&\212\276Y,\240\276\034\377f\276a\\3\271\014\034\213=~\235\221=\241\227\\=\303\025m=\330\257f=\257\302\003>G\2568>\347\243N>\272w\215>\303\376\177>\315\r\210<0{\023\274\230g\037\276\213\304\355\275\032CL\273W\341C\275\321\3143>\326\374H>1\356l>\202U^>\203.g=r\363\'=\272n\324\273UP\177\275\247=\343\275\326BW=W\354\217=,\243\333=\213\357<>\"|e>\332\370\301=\035\224:\275\350\301\356\275WK\001\276\200\210\\=\235\372&>\320+J>\304t\t>V\336\354=\031\314,\273(e\372={(8>\302\340S>\022)H>\000\203T>\210IO>$\324Q>\312\326g>9\313k>\337;\221>p\370\236>\213\306\220>c\216\224>\240{->\205s-<I\232y=\023\006\000>.\335\224=\030\316\266=h\324\261\275xF[<D\237\326\274\306p\350\272[\331k>\2245\224>`\363c>\265\273m>\223\217\202>6\260\252>x\252\300>\336\000\220>\354\271~>Z \205>\2147C>_\177\023>\\MN=;\361W\275OU7\276\375\201`\275ut\271\275\263I\234\273l\005\335\274\214\244\304<^\211\014>W\002,>u{\213=,>e\2752\344\033\276\234\317\003\276\311\3435\276\320\257\274\275+x\250=#O\014>0r\377=\220\344\236\275R~\020\276\211\250m\2761\312s\276~\nb\276\026\207p\276\305?S\2767\370 \275K\231\202\275!\341\376\275\217\010\t=\372\3258\276\306kw\276\266\022\204\276\245\342\204\276\032#\212\276\244\206\250\276\240\312\265\276\317\357\253\276\230x=\275\343\005\'<nQA=9Z\034>~%\025>vv\364=\362\304\366=\210l^>\001Jc>\307\341C>F\251\277=^\327\302=8d\020>\251\003I>\351\221^>[\001\227>\305A\237>G\031\002>\3702n<\253U\013>\352Hr>TRV>:UY> \327\311\274\r\223\235\275c\337\351\275\376=1\276\031\342c\276cU\240\275\242PE>\036\024L>=\246]>^>2>M&\010>\000\345(>h\343W>a\244e>\367;Q>\026\201Q>4K_> \'\221>Re\230>X9\253>\r\316\266>Z\303\274>[\201\305>h\306\305>B?\316>\024\337\277>\265\025p>\267)\245>]\221\367=\331,L>\247vL>\306A\034>\rLs>\021nw>\374)\210>\315\356\217>!9\205>[h\203>\215~\251>\321\r\251=\260~\335\275\325\214\001<(D\344\275\322K\'\276\2609\353<\033\276\246=\275\020/=2J\353=x\373b>\340\247r>\311\313~>\243&\214>\367\373\227>@\017\221>{\266\223>4>\250>(/2>\317\216E=\316\206\017\273\335R\356=\323\023\212\2736\351y=_\2327=Ka\376=\376\006\321=\002#(>c\036\377=\377k=>\241]\271;\205\275\364;\362\354\343\275\243\300\256<L\032\357=U\261a>Z\202\207>\"\344?>\341\241M\275\t\346l<\262\223\315\275\354&\027\276\2207\255\275^\003\230\274\203;\256=\252%\371=HP&>3\005\354=\260\2760>\350\213=>\213\211\276=\256\372\032>\352&u>1\027\212>\033e\225>Jo\242>\362\'\242>\377\036\245>\300_\252>\336c\302>=\000\317>\210\177\270>\032E\306>\022\350\313>\211V\315>\177\"\234>)\323A=\037\314\264<\226r,>\007\236\025<\210\232\215=m\306~\275\021[\302\275\ti\306\275-sY\276\0045[\276:\240\256<\272\341x=\350dF\275~\214\327\275\025k\032\275g\333~\274\272\327;=\315\243\002>%\347a<\2237D\276-\303\200\276w\316\226\276\224\256*\276\333\033\250\275J\204\236\273\004\0273\275@\250\256<pv\324:\025\'\201\274\364\333\240=\327!\032>\362FL>\310\203X>\260F\212>\020\277\226>](\237>\177K\203>\312\356\213>\346\240\232>&\033\235>\270\221\247>\025\346\237>\335.]>\013\0255>\233\253)>\3618\'>y\0225>\202Ra>9l\252>\224\251\257>\022\013\260>\301\242\026>\301\003i\274\016\211\213=\227\327\307<\266\3769\275@\274\217<\235\032\261\274\212z\203\276\345\354\223\276\0030\244\276GQ\210\276F\337\230\276\027\005\"\276h5\207\275Ej\211\275Bts\276\244(\203\276\014WH\276\275\033e\276\340\347\325\275\356^&\274\024\324\207=0\263&=\213\300+>U\353|>\nZ\207>\260\t\210>\321\362\212>{.\253>\025\255\261>\377A\307>\263\260\315>\020\363\025>^L\325<\336\212\244;\274\240\027\275\256E\251\272\311\030\243\275\331o\036\276}\031\007\275J\237B\275\372\221\010\276\300GE\275\246\220\356\275U\355]\276)\275\200\276\341\342\r=7x\324=\343\361\010>\325\253\340=~\276A>\032\303l>\227\227\220>3\212\224>\030\377\241>\245lb>\003\271z>\3148\214>\271\347\224>\003\343\243>\250\330\200>\006\007A>;\3007>F\246b>y\376\035>\252We>\014L\023=\213)\320=\200\016&>\360\006\345=w\325/>\333J\201>\341\270\224>\002w\205>\221\231A>\177\360\376=\'MC>\240\333{>\263i\205>\354\350\206>\303\363\216>\225R\225>V\2648>\323N\277:\2664\021\275F\024\264\275\025\257\373=\31598>ng\321=\273{\236\275\362X%\276\215]*\276\363E\307\274c\223\231\275z\276\217=E\226\023>X\237\030>\\/[>\220\037r>xO\217>\357\231\223>\311\373\212>\371N\234>\200\225\302=o\244\241=\251\376\322<RS\336=\227\313\337=\242\010\373=^i\037>\025\323\225\275\026\254\337<\255j\035>\342\276\010>Ffm=\t\244\245=D\037\345=})\316\275o\323\212\276\230 \244\276\253~}\276\367>\225\276\304\322\n\276#\';\276\310\326\215\276\320\266\222\276\331G\227\276k\357\335\275\203Z5=Y\333\241=\\\226 >\265e=>\230rC>g\305x>\326k\204>\316\177M>\"\027T>M\276l>\206(\214>\002\323x>\031>{>U\370\212>\270\206\240><\274\263=\326zx>\311\266\202>9\270\213>\nQ\214>O,X>\253\300/>\260\223z=t\240;\275a\270\t\276^o\337;\344t\322=o\"\005=c\010\232=\257v\200=\261\335\243\275\316A\337\274\270<\216\275\010\277&\276;\327\"\275o8S=\025\303\021>\227\272C>\274\3168>\255\306\025=z\257\025\276tV\036\276\365T\245\272Ld\372\275B\336]\276a\2532\276\023\211\343\275{R\037=\253\375\225=\r\210\314=\364t\033>u\234\003>\177|\r>\037\332\221<xU\233<6\215\340=\024\256\013>\203]\">P\211$>%x\261=\332(\207\273iX\265;\257\347\270=i\253\024=\014 H>i\006}>\334\303\000>\307:`\275\273e4\275\241M\014=\353]\376\274\365j\221=F8\000>\356\2750>\322ww>2.{>\255\347\215>u[\231>DA\234>\253\027\235>\222\030\245>/\311\274>w,\317>1\256\323>\276s\272>"
      }
    }
  }
}
node {
  name: "Const_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\365s\232\274\202W\307\274G\211\270\274\343\237\271\274\222\006\234\2741f\265\273\022\232\025;\354\250\304\272\314\025\357\273\361>\000\272\376P\017\273@25\273\006A\301\273\215\240\333;\336$u<\234\350~<\202\344\325;\rmh\274\354<\232\274\265\210\262\274\316c@\274\205$\306\274\202`\005\275\236\374!\275\271\026\203\274a\314!\274\205\260\207\2748*\254\274\212\302\n\275K\222\001:\017\223\233\273\204\236\304\273_|\204<r\342|<p\275\371;\216\0014;\314?\275\273\216\315\264\273f\337\245<UV\323<\312\307\272<\322\375\265<\017(\273<\242\030r<\342\177\n<\0300\376;\362\267\326\273\212\265;\274\035X \274\230S9<\223\315c<\010y\331<\365\220\262<~#p<\372\306h<\216E\203<CN\237<\364q\260<\244\020{<\331\206V<7\026\235<\226\377\322<\0027\241<?\033\244<o\3353<\343\236\245;C\313Y:\277~\355;\235z\032<\357\016]<\214^\220<\235\341\225<\301\223\262<\333?&<{VC\272\023H\235\273\301[N\274F\360,\274C\026\243\273\342\037\257:\343\'^;OF\310\2732I\032\274\212\221\025\274\264\217W;f\\^\274\245f\225\274I\357\232\274\302\205\327\274,\251\307\274!\004t\274\2074%\274\346\341(\274\336;\236\274}q\224\274\204\213\004\275t\200\377\274&&\374\274L\246\263\274\230\330 \275X\3668\275\235. \275I\326\035\275\377\202\034\275.h(\275\265C,\275\n\223\003\275\250\351\010\275c\017\021\275\332Z\032\275T\351\032\275r\017G\275j@\002\275i\244p\274\250U\013\274\230\001\325\273@\317m\272\354 *<\016\034\216\273v7\013\274\025\326\214\274\230\033\002\2742!\037<\211%\263;\232x#\273\366\311\031\274\266a\275;\t4i<\345:\203;\314\311I<\022\351\311<L\366\201<{\365\364;0\263.<\362\027y<\206&\270;\227\245\362\273\010\314\247\273h\004\031\273l\'\001<\202h\310\272\316\206\246\273\355\370\024;|\242\\<I5\344;\242\253_;\355\270t\273\311\002\267\274\330q\357\274\323\333\337\273\325\262\253\2746\310\305\274\351\271\221\274\013\005\007\274\002\353\004\275\037f!\275\372\261V\275\373K6\27550\377;\300\371r\274\031(\002\275\006\331\n\275 \006\242\274\217\274\227\274\243+\203\275\313\366\\\2759E%\275\224\331n\275\276\275r\275\202E\344\275J\303\357\275X\307\t\276\367#\'\276\351$E\276\2721\320\275\300\245\204\275\001\262\004\276\236D\000\276\226\242\267\275\240\300f\275iXl\275_\236\312\275\034p\321\275\313\334\366\275F\032\371\275oP\200\275\302\207\325\274\217;T\274Z\353\236:\225\244x;\304e\323<L\261\217;\230\3275\275\022\257\n\275\017\357\347\274\315\370V\275\026\035\247\275\301\335k\275`\271R\275\205o\207\275\301\t\210\275\n\033\261\275\371\254\010\276\273\007\355\275T\3456\275\261\031\311\274W\326l\273Ym\225<\311\221-\275\212\304\n\275fn>\274\272|o\274\376\340\002\274\002\356\027=\220\260\370<\240<\333<9\225!<\323\376\310\272\264?\324\272\005\360\353<\372\204\372</#S<\362\023\200;\241\354\200\274#L\231\274zI\224\274\242`;\274\246\220g\274\242I\225;\326\374\261<\026e%=\243\3271=\232y=={s\207<\246\237*<\02421\274\3123\260\274\226\305\274\274\257\nC\275Z K\275xU\021\275\027Oz\275\002\3126\275\340\2550\275\243\334#\275F\352\257\274\226V|\274x\037\200<\005xH\2733\003\305\274a\224\t\275c=\232\274f\321C\2745\314\320\274\017\352\216<=\260\276<F\017\030\274\326&\216\274\343`\254\274\221dp\274\n\3660\275\200~\\\275\017\346T\275Mb\204\275\246K\226\275g\247h\275\n\204F\275w\0215\275u\354\212\275\203\262\300\2759\254\312\275\007$\236\275o\231\277\275\350F\300\275F\342\263\275\311\366@\275\212[\316\274\025l(\273\310\263\203<\222\233\262<p\023\355<\3432J=\311\325@=\2256\211<n\212h=\307iZ=\010m?=Rdr=\016R5=\364x\305;\372%\213<x,\241<h\351I=V)T=C\021.=r\356\262<\244I\305<\3531`=\347\213W=-\257\027=\016[\t=\306\2708=\210\252I=Z\236\231<\020\027`<\376\341\237<\267\013\200<\314=\006=\270\323\313<n0\214<!p\t=\2710\016=\031\205\357<\000\026U=\236\370N=\370El=\371+J=\263\310c=H\304\036=&t\354<\235g\363;\274\273\035<\023\215\226;wY\230<k\361\324<\3204\272<S\226\241\272\222|\2609\"tD<\033\370#<\207\351)<\343\033\344<\356\016>=\267\3228=h\021\342<\037\201\377<J\357\006=\'=\304<\345\027\330<\311\336\256<\363\323\334<\313\261\244<\013t\024;\360\273\346\273\300iG\274Lq\317\273\031\021\256\273vd\325\274\231x\354\274\252q\214\274\304u\266\273\263\2751\267\261#\275;\246\226 ;\266\205\347;\323QP\274l\374\274\274\0177\356\274\333\261\007\2755\372\324\274\322V\340\274\312O7\274\310d\3629\334\263\261<\021S\360<\370\252\000=\277\202\026=\276\004\030=\310U\021=\320e@=\035\232A=\230\025==\352b\037=\327\035\007=6\2711=\250\234\031=\211\3777=5\0232=\362\237\031=\327.\003=K\r\037=\333Q\000=K>\243<\013N\306<Q\033\331<\000_\241<t\0270\273l4\016;,\035\336;h}\213<\004K\004=\326\211\014=[\222\010=\240\'\333<\305\336\276<\263\355\313<\355\000A<q\027\006:\021\257\'\274\326\022\273\273\215\370\276;^K\204<\315\325\254<\303\272\321<\020\330\337<\267\342\275<\317\010\353<\005\252\026=\n\254\027=]m\353<I\250\270<m.\323<\361\341\251<\036W\353;-\006\010\2711\\0<T\007R<\321`\262;:\353\032\274~u\245\274\276!\014\2748c\376;M}\007<\345A\177<\007\336\217<\266\306\263<hm\207<\014y\333<\301$\363<\327\256\261<\370v\323<\3761\254<D\336~<\237\314\\<\306\366\026<\200\204r:oi\352\273\361M\241\274\033K\017\2741\277\257\274\013;\261\274T\257\233\274\365\342\021\274\214\321\237:\345N\246;\352\365\272<Eu\310<\371\375\343<\223\206\231<\341k\214<7O\352<\322\200\322<\326\336\275<F7M<$\005\267;6\350\230<\003\226g<\242\267\211<\017\036\003\267`\253^95\260v<G\230s<\016\201\037<\317M)<\210\227\375;\375\210\351\272\215\3625\273\377\032\271;\314\017\364;\2043C<\354\006\017<\272z\035<}\223\300\272\037\350\247\273\021\233\314;\227{\027<\355C\033<\002\340N<\315\352c<-\261Q<\000;\031<5\276y;\211\250*<]9n<\242N\200<\301\210\177<\274\354\213<,\364\230<,\310\017<ZYQ<s\347\177<\332&\330;\336@<<\333\261z;O\021\330\273\364\277\323\274\320\351\310\274\311\'\306\274\263\206\277\274q\022\316\274\302B\355\274\256\025\273\274\230,\026\274~\234\010\274\317\007\356\274\267\243\025\275\033\340\371\274q\311\246\274\373)\253\2745s^\274\252\222G\274\214\017\r;\262\363&<w\246a<\366\310v<\323+t<[\243\246;/\343\374;\355\221Z;x\\\362;\231\352v<l\311\230<\033\006\221<\335G\206<\310\357\325<u\315\331<,\232\315<\032\353\325<\215\217\315<]\240\324<\257\032\253<.y\325<\224O\367< T\333<\203\306\227<\241 \205<\306\305\260<\t\222\177<Pd\222<d\202S<1\202z<l\225z<\370[6<ayy<m#\242<h\365\247<1\310\200<\322v_<\327\037\233<\214\233\250<\234l\215<\232\301\311<N\037\321<\350\334@<\244%\370;`\233\200<\023Rm<\006\310=<\030\324\222<\221\036\214<\223\201\243\272\346bC\273\205\253\025<\374\361\325\271t\322s;C8_\274\212\014\240\274\343\331j\275K\325Y\275\037-f\274\343\204?\274^\0301\273.\333\325\273\2516\315\274\307>\340\274A\341\326\274\231\227\023\275Tep\275\364\373d\275~\346E\275\"\252e\275\323L*\275\224>\235\274\322\221\254\274\r\337\365\274\271E\224\274PJ\376\273\244\007\373\274\237\017\037\275hO\024\275M\306\342\274\276\005M\274\233B9\273\2239\213;\366\342x<m\332\216<\371\003~<5[W<5\037I<>4\241\272\355\020\036\274@m\250\274\336K\237\274\3717\221\274\247\206\030\275\265\201:\275R\306Q\275\357`?\275C[\027\275\216\033\201\274\257\314M\271\030\020\341;q\327\375;\017\206\261<H_\235<\321\274{<pk\345\272\230{\237\273ea\3329b\344\0019\317\030d<\377\r\230<\256_\332<%H\344<1\333\237</\326^<\216\333\010<-~\335<1\337\275<o\257\311<\024.\254<\036>^<M\275\235<[\177M<\212\024\031\2745\340\232\274\t0\207\274\304-\231\274\242\334s\273\30474\273\344*h\274Z\221\242\274\353q\206\2746\302\375\274BZ\354\274^\232\322\274\252\374\234\274\223\265\233\274r6\264\274r\260\032;\026]L<\256P\277<]\027w<\334\003\216<\006\032\260<&\315\256<\330\031\363<\362\016\337<*\307\315<%K\276<\032V\233<b\037\326<\231X\331<\356\363\244<\004\2135<_\313\277<&N\255<\321\022\220<}\216\214<\221\255\200<\341\306m<3\013\004<0-\255<x\300\256<\254B\226<?\032\245<s\277\246< \304\230<Z;\333<\360p\241<\0261\236<G\332\254<\361i\033<\274\375x<\331F\212<\234\271\205<\3207\246<\362\273e<>\301\030<>@;<\025\322%<\200\2448<\262\266\200<\307|k<c#\351<\007f\n=1\336\351<XK\264<SP\222<\334\353f<\306\027\256;\021\037\221;\321\243-\274\324\366.\274\031\2401;\341e=;B\272j:\213\231\014\274\014\2000;\236\007K\273\2731\260\273\006\251\351\273_\2625<Z\237\241<U\264\263<\021\342\246<\206S\260<\360\230\223<\tE\252<M\344\276<`\000\311<\265\246\262<0\370\206<\357|\204<\306\027J<\342\236Y<\326\250\216<\212\240\231<\251A\203<\261\216c<\"\374l<n:r<\215k@<\243\003\034<\306\025\211<\037\316}<\371!\213<\314\007\205<\361TA<,\252\021<\307rH<\213}\215<\222\353\205<\241\274\227<j\213\244<\035mG<\337\025\305;\335\003,<\213\005;<\3713&<\300Gq<\360qt<-\223{;\267\214);\362\253\203<$2\201<\331\232[<\352\367t<\3326\253<\265Z\257<\250[\225<\347\201|<\345o\230<\304\256\250<\002C~<\332\007\241<\003\300\242<\221\246\251<\332\010\316;9\310\232\273\037H\347\273?\230?;F#\020<l\000\2459\203\252\225\273\353\025 <\001b\233;\314\365\222\272{\217\002;\334T\n;\021X;\274\245E\016\274\334\327L\274\025\330\275\274\253j\375\274?8\246\274{\224\206\274\2751t\2732K\233\273\241\322\247\273\332c~;Q\314\023<j6\371;J=\373;\267^\205<\177\314d<\233\224\207<K\342u<\266md<e\376i<R\3063<\177\334\003<O\231\232;T\244\201\273(\231Q\273\021\251\251\273:}\3309\205\253\004\274\300J\244\273\331\216\034<{UB<C\363-<l\356\206<\005e\243<\346e\263<\322\236\266<\322\307\252<\3730[<\366\377\352;C\\@\272\365\341o;|\345\201;;v.<\32038;4,\024;\346[D85\210\235\273e\010\025\274\263\206\217\272q$M;\201\032\331\272\234DZ\274\335UD\274\214\301$\274\245J\310\273\'\240\226\2713\326\353;\346\333\243\273NJO\274,\020\225\274\300\037\312\274\323\236\275\274\016\020\322\274\300 \230\274<)\324\274\351}\316\274ZE;\274u\363\260\274\035H\272\274\375\247\247\274a\n\213\274h\364\223\273\036\236p\273\027\367K\274\365}j\274/*%\274\242\312\266:\250\t$<?\255\215<b\256\334<Y\362\341<\207\252\311<\321\260\006=u\235\275<\035\363\317;TG8; \231\240;\277\363\030\2722\210-\272c\267\345\273\304\305\305;\330\024\t<\355\245\203<\217Y\212<\205\001><d\227\377;\213U\004\274\027\0005\274\325\373\236\274\0018\232\274\226\264\016\275\332\254!\275&u{\275\342[\216\275\030\021\310\275N\366\260\275?\330\270\275^1\177\275\245\217*\275\035\361\300\2749\232\321\274\203\376\250\274KaE\275\005\312u\275E;e\275\362\222\031\275\320%\214\274\212\230\214\274\377\376\227\274\021\317 <\313Kx<\213\245\272<\013\204\200<\223\275\010\274\214\233\332\274d\352\024;\213\371\274:\rx\244\2744\360\315\274\323\0372\274\312\255\021;\"-\200<\355F\222<\255\311\320;\274\3248<\363\3337\274\253\"H\275\213\342&\275J\376\261\274\357\341\326:\376\355F\274\016\274\\\274\000M\340\274\\\2339\275\335\0226\275U\235\226\274\250\036\226\272\020\210#;\320\374\315<\263\325\332<\257\321\023=\270G\320<-\360\032=+G\311<\352\355\351<C\201\312<_0\232<\232\202\017=\'\n/=S\316\334<_X\320<\213\216d=kvR=8\200\002=\017\265\336\272DA\r<\260\303\246<\207]}<\233\330\222<\247B\342</9\224:\023\270\013;\310{\235<\225_[<\223 :<\234\255\037;\325\301i\274\325!\203\274\373.\006\275\212\253\001\275M`,\275\324\2720\275\201\315\223\274\357\221;\274y\331X<\370\207\302<\242\260\304<\376}\346<p\241\324<p\177\273<O5\003<\340\226n<\312n\023;\266\347\211\272\371\211O\274}\000\016\2748\354<\274\347\017\225\274H\030\023\273b\210\240;\205eX<Y^\243<\223N\251<\025l.<2\340I<ii9<\260\r\311<\236\037\237<\235U\230<\376\002\223<\353\256\213<\222\254\315<d:\254<\200u\247<\031\017Z<O\364\232<\2632\264<\025\021\336<a?\332<KH\304<\365\335\227<R3\272<4\352\257<\371\257~<\354\220\023<\36416<s\003\225<\275\020\211<\213I\331<\346l\300<\354\024\271<\007\321\275<\005\030\271<\2736c<\373\254\234<r\342w<\000\247]<\240\007\206<\262i\245<\241\002\237<z\307q<\027.k<*Q\214<MPr<\265\037\214<q\034k<\233\343s<\244^H<\221\337\336;\rf\323\273}\204\270\272\231\032\375;\305\037;<\253\001!<\023\241\261<X{\273<\001\273\301<\333b\245< \210\256<\3225\201<\377gk<\326\265\275;\232\211\317;o\204\225<\247\350\212<X*\034<{\216\246;\270\357\024<s\340]<\246\351)<\265\2722:Z\336\025\267\016\031\354\273sK\235\274\212\002n\274\324)\272\273$\311\021\274\360l1\274_)\247\270m\361i\271\024\233\235\273\037\0217\273P.[\274\260n\363\273r~\226;\213\375\025<#\266B<\274Q\372;^}G<\261J\350;\336\366F;\300\234\024\274sMP\274:\003\221\274\366\254\233\274X\254Z\274\254lh\274\241\237\257\274p\234\310\274\225\317\310\274.i\014\275\366*!\275\245\226\353\274H\360\240\274\361\243\266\274p\225}\274\322\307f\274\266\367\003\274):;\274B\264\205\274\370\222\357\274\357\314\017\275\224\010\334\274l\005\323\273\370d\002;\\\036\r;\255\n#:\345\353k:\323\207<:\336v\307;b\265%<m\2536<^P\232<\341\366\201<>;\031;\234\336\3159\316&F\274\006\311\014\274U\353\254\271\271\357r\273\370F\240<\241\315\252<\257\260\310<\330;\255<\265\343\010<--\320;\034M\025;!\035\021\273g%\305\273\331\313\306;\037\177\344;\322z\031<\351G\203<\273\001\235<a\033\'<;\246\221\272\230\'\001\274\177\\\004\274\2633\317;<n\233<\331\376\266<\217B\200<b\366Q<\345W<;\312 ~<}3\264<0(\304<ni\252<u\203\245<\025\265\222<}\300\205<\036\361\207<\016\230y<*\006\230<^\010\241<@\254\212<4\333\201<j\2709<~\216\250;\316G\334;1\013\024<\032\316\325;\004\366\325;\310`\243\271\244\024^;\327f\306:\000\302\017;T\250{<]e\252<Aj\204<\367\330|<\224\342\202<P\371\307<FI\000=\344>\307</M\250<\240b\241<\342\312z<\004\332F<@U\363;\352\024\001;\243\221\331\273c\364g\271_\361&\273\\E\002;\357\204\036:\242\345B;p\235\032<\037\376/<r\237\271;\032\021\245\2729\001\003\274\312\251\312\273\227+\027\274\223=\237\273\374\241\264;)\221\030<\030\006\000<\227\256\232\273<w\037\274P\370\235\274\243\036\225\274\234H\200\274\200L\177\274\370\240U\274R\034\236\273\223n\274\273\310\270\020\274\271\331\213\271\312e\216\2749\376\306\274\307\343\310\274\t)\267\274Za\260\274\222q\354\274\r\245\001\275\373\032\344\274\346[%\274\305\356\234\273T\320\265\272\360[\022<\'\335\371;\312\303\263;\316\201\244;\276/V<u\217H<\254\035\"<Y`\253;\335\363\234;\263t\335;\363\001\033<\354X\"<\014\007~<\201\205\200<1\214\013<$9I;@\032&<\377A\232<\323\031\201<\231|l<>\007\321:\n\355\016\273\240F\231\273\"\254\022\274A\226Q\274\270\347\234\273\242\033\263<\237m\251<\017\345\254<\020\312\207<\336wO<\306\234k<\241W\220<\366e\215<\252\336q<s\263Y<3;S<\022U\213<\357\243\210<\3048\234<\261P\245<l^\242<P\265\247<\242K\227<\353\006\235<e\022\211<\353\215L<4\262\223<\030\213,<zHp<\227DX<\346\251,<\211Hu<GXa<\360\006g<\370\235a<\217>D<\017n/<65m<\354\240\355;\273\357\275\272n\013o;\205Qe\273\010\336\343\273!\225x;\210\351\352;+>\220;k*\022<\006-\227<\314*\227<:\030\223<k\321\233<\215C\243<TG\217<\033\343\204<?d\232<\236JM<p\341\331;O\220{;\271B\036<j\207T;W&\324;\275\347\247;R\254\023<\035\212\357;\031\023&<:\n\001<=\021,<\037\267F; \3327;\3163B\273\360z@;\254\t\006<_\"\205<\341.\243<\266jp<PH\205\272@hy;4\227\320\273\20200\274\003\036\274\273\030\207=\272\013\215\000<\310p-<i\004`<O\373\037<\013xg<n\004d<\334\247\007<\0343D<\n\302\243<\214\340\264<\235\334\274<Z\221\312<*\265\265<8\236\251<\233\016\243<\254\277\320<\322\205\354<\233\313\311<\357S\341<\277}\337<\016\333\315<$N\245<\252\354\026<\033\237\351;Z\260\202<O\325\306;\202\226\035<\340T\213\267b\363*\273\232z#\273\204\312K\274B\245:\274Q\305<;\214\243\271;Gm(\273\232V\352\273SL\025\273\00751\272M\254V;<M\025<H\'\344:\244h\226\274La\333\274$\177\t\275\357C\256\274(\301F\274\376\313j\273\n\244\355\273\236\216\007\272m)\r\273\037\034Y\273\225j\231;k\372><\244\355\207<{\320\206<\006N\277<\346\342\316<\232i\322<\222\356\251<\340\245\252<\251\250\271<\r3\254<\033n\261<\251\362\233<\320#m<Q\'C<\330\270*<\214\233\030<\274\007\022<e[ <nW\207<\275^\202<\320uk<\345\311\023<\205o];*\235\311;q\351\207;v5\263:\010\030S;U}\335:\246\017=\274\\\021c\274*\327\206\274\227\263X\274\335\362y\274q\237\030\274\244\016\237\273~\374\220\273\272\242\202\274\341\336\205\274\240\005O\274\033\346_\274\266\364\004\274\227BU\273\000\377\204:$r!\271\367\262\372;Tbm<\331Wv<\335\272_<\013\346Q<\350\335\231<\201\223\231<\235\273\313<\241\020\321<\264\366\\<\000\243\270;\r\323z;/<\207:F\r1;\242\331\354\272cX\331\273L\260\353\271\003\023\240\272\341\304\317\273`\331\003\273\013K\304\273\226\270`\274Qo\204\274\332B\t;n\225\n<P\233/<E-\007<<\307}<\345\241\235<\262\004\317<\226\244\304<P\005\326<\211v\236<\207\\\245<\246U\262<\222\\\262<W\026\302<.p\233<F\351s<]dV<\226\316o<\216\3667<\035\026o<a\247\323;\362\276\032<\245\356K<\306V\031<\017\267G<D(\222<\n\361\246<\363)\216<\274\323Z<\016M\"<\025\201U<\017\276\203<\302\333\200<\253ok<X\326f<\346I^<\255\010#<\372\030\206;\356\370\036;\233\270\2519x\003\007<L\3660<tF\355;\034a\252\272\350:\334\273\005\334\321\273=\257\302\270\267$7\273\211\367\240;R\225\036<\343\230\024<!\273Z<G\025f<\r\253\213<\253\361\204<\373\231g<\251\236\201<s?\001<\365\216\325;\254\231\203;\3102\356;QM\327;hl\323;h9\351;\r\007\343\271\321BQ;\216y\030<\036\270\374;\371\277\222;\'\256\243;}\022\275;\336\237+\273\215[\207\274*\340\271\274\034\304\216\274\n\005\263\274v$H\2740\274\201\274\346Y\342\274\265c\332\274\030p\321\274A\r\\\274\260\304N\271\\\351P;9\223<<RCd<\313\340X<\261\n\230<=\243\232<J\025l<Ku^<\335\264l</\204\216<b\355o<\314\330Z<(\023g<\220g\210<S\271\001<\257\003\247<\353\313\242<\357\201\243<\316\354\223<\036\205j<5q?<\264?\343;)\342\365:.\316G\273\244>U;6\276\013<\'\033\221;k@\321;\244\327\253;B\007\376\272\032x\006:\r!\324\272!\026\344\273\237\211\247\272\271`i;)E\030<\016\325K<\022\2450<v\004v;m\355\021\274`\334\017\2748\241\3769RP\030\274\371\222\241\274}M{\274\020\250%\274\346\350\005;3\034\243;O\245\341;:\2506<\000g\020<\235\203\016<\302\264\374:\350\327\353:n>\345;\037\226\004<^,\017<\250\330\002<eL\242;\312-\260:\312\260\312:\261\n\224;\007r#;t\266#<z\031T<-\303\376;\302\027\235\272/\035\035\272\2603H; \204h\271o\260\234;\325}\366;\223\300\"<0\332p<\007\350]<\322/w<\360R\201<\003wq<rR[<\222\002Z<2\027\211<\375\317\253<\021\313\251<\255R\220<"
      }
    }
  }
}
node {
  name: "Const_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\237\031!\275\257a8\275\340\3721\275wX3\275\226\333$\275\364O\327\274\235)\217\274*P\246\274\200\254\320\274\277\311\222\274\267o\232\274\377\241\231\274z\037\257\274\3139\000\274L\214\366:\264\341\202;\201\"\203\273$\337\312\274%\236\364\274\271\357\010\275x\007\301\274\340\340\025\275\016j<\275\257\215^\275&\036\000\275\200\021\315\274\220,\002\275\207\277\025\275R\355M\275\336\375\177\274\330\355\245\274V~\254\274\343\300 ;h\202V;KZ`\273\336S\367\273\202f\201\274\010{{\274A\200A<\342X\235<\361?\222<\022\331\231<5\014\253<Fca<\336|\002<}6\375;]z\343\273\326\nL\274(\2648\274\352\033,<)\016d<\326\003\346<\374\222\310<\r\232\223<n\027\225<!\316\251<.\017\315<}\003\346<\363.\267<\007\357\247<\251\363\337<\374x\017=\337\013\362<\3471\372<\246\000\260<\351\354y<\207a,<-\217\212<\005\355\234<\022\272\300<\332\347\346<\335\226\360<\342\222\t=_o\262<\312%&<\003X\253;\033~{\273`\2407\273\344\r\r;7\275\006<A\006&<\355\264\335\270\201@\213\273\226\274\232\273j\250\374;^\344&\274\236R\203\274\2775\222\2748\360\332\274>\270\325\274\253*\216\274[\307T\274\232Z_\274\375|\300\274\345\036\275\274$\264\036\275\352\200\037\275w\n#\275\214\'\002\275y\020O\275lin\275\271\330[\275\204\001_\275I\326b\275\216\005t\275r=}\275@pX\275\255\330`\275\266El\275\020\"y\275\023N}\275i\013\227\275c\372l\275\033\305&\275\256\314\n\275B`\376\274\2659\310\274\2534?\274+\317\316\274\274\245\353\274\305\203\030\275\261?\342\274\326\370\017\274\010l@\274\031\221\232\274\324\305\317\274\200\262\030\274y\335\022:)\213\r\274*ii:\301\272v<5(\375;\276\344i9:w\216;Ac$<\261\352\213:\034\367E\274]\207!\274\274\261\344\273\203_};C\307\260\2739\325\023\274\005\353\263\272\022\255/<;\030\234;\0370\307:~\247\273\273\\(\320\274\362\007\n\275\032L=\274\020C\331\274\213\245\373\274\0311\315\274FJ\200\274\3169(\275\016OK\2750\241\204\275\231jp\275\034\300\304\273\364 \351\274#L=\275\003cJ\275\017\266\022\275\220\213\016\27561\250\275\224\332\227\275\031\341}\275N\377\246\275\224\344\254\275x\340\016\276S\344\030\276\310#/\276\0147Q\276\201\211t\276\342z\037\276\262^\371\275\347\314>\276S\026>\276\020\277\035\276j\260\373\275\332\023\376\275\320F(\276\002\200-\276\017\244A\276\314mE\276\021\246\r\276\271\331\321\275\2466\263\275\265\021\221\275\224\327\204\275\243@\"\275=\023g\275\301\233\320\275\276k\272\2759K\255\275]=\334\275\260\331\013\276\225&\352\275@W\336\275\340&\374\2750:\376\275\361\034\024\276\324\005E\276\336\3716\276\201\017\345\275\004\360\272\275>\341\214\275*\0305\275`\000\316\275y\262\273\275\001p\214\275\223Z\216\275\007&z\275\030`_\274\222?\202\274\026\233\177\274\240\234\357\274\'e\035\275\325\317\026\275Il\205\273\312\027\203:\214%f\274Y9\256\274\244&$\275\001[/\275} ,\275\217>\017\275/\177\030\275\373\367\217\274\377\304\313:\302\356\275<G\010\362<\366X\022=x\317\375;B\2620;\233I\230\274\263\244\365\274\347r\004\275\240\231p\275\251\204\200\275\220\035M\275NR\237\2750J\201\275B\035\201\275Wbz\275<\2330\275\022]\027\275\261h\227\273\254_\265\274\034\2300\275\331zZ\2751m\037\275wu\002\275o|:\275\306\035\300\272*\210\325;\316\232\316\274\301\204\010\275\215\333\030\275\201^\376\274\312Gx\275\304\215\225\275d}\225\275B\237\263\275\362\201\312\275\"\365\254\275-\327\236\275\353D\230\275j_\313\275\320\367\002\276\215%\013\276\212\354\357\275\366\324\n\2761\347\r\276rW\n\276\251\340\305\275\261+\231\275P\030Q\275a$\366\2747\016\255\274M\374,\274\334\323c<mQ\204<\331/2\274eY\006=\337$\n=\007x\375<!wB=f\363\022=\350\356\254\272Si2<\000uu<\001\353B=!\357Y=\225\233==\250\t\332<$\300\365<h\211\202=\203\221\203=\353\364L=\217\251C=\266q{=\345\204\212=A\237\026=\337\343\000=\350\010\032=\025\262\t=\025\020U=\026\3665=rt\025=,\341]=)\233f=W\024R=\361\226\234=\363\365\234= .\260=\002\240\241=.\\\262=\325%\220=\'\257v=\025p\027=A\260\034=\204\214\002=\306\366;=q_[=\366*M=>\377\304<X\266\307<\240g\022=\035n\007=-\202\006=\237jQ=\242\240\222=\355\257\222=E\302\\=\353\244m=R w=.8Q=\017\336[=\247\367E=l)^=\023T@=&\241\340<~\330\204<\263^\025<_\200_<0\007[<^h%\274C\006{\274\030\373\245\273\034\252\273;\025\2020<\211J\206<\346\017O<\241\272\214<\354\374\202\273\326 \204\2744a\305\274\177Q\367\274\321s\311\274\250\202\341\274L\243C\274\034\217v\271\010B\266<\2239\001=\356\255\020=\346{.=J\2227=\363\2407=\375ap=\234wz=\211\007~=\313\323e=n]Q=\214\235\201=,go=\005Z\212=\264\"\212=\302#\177=k\207j=\273y\205=\254Pm=\220\204<=@\245N=)\367X=\211o;=\251\343\256<[\201\316<~\213\356<rh!=*.d=\343\312o=\346\203n=X\362S=\246\253E=_\356L=yi\023= \202\276<\316\350,<\211\000b<Z\315\313<\227\263\020=G>&=A\361:={XD=\260$4=\374\210M=\n\213s=n\225x=\257\254W=\357\370==z\217L=\32557=_$\366<\360S\257<n,\003=\340E\n=\304\257\320<\235i\017<\274\244\211\273\342\314\317;\204\344\270<\242\276\272<>\237\370<\243\213\005=\217\274\031=B\324\003=-{1=\310\005A=\360.!=\034\2654=\337\320!=\361\313\n=\261l\001=\000\006\334<Q\021\220<\371Z\005<g\236\322\273\314\254e;\021v6\274t<U\274\351\332A\274\301\253$\273D\034\363;\226\2438<\210\243\366<\340R\006=\200\377\030=1\243\353<b5\342<\325\013%=}\231\034=\007\370\024=\233\351\321<\234|\225<\207\252\002=\330\314\340<\321C\371<\375(P<\317vI<\177\257\341<\317\320\341<\326{\266<o\377\272<\007\336\243<\260)\036<\240\263\001<\'\274\204<\303\253\222<\030\310\270<f\n\236<=c\245<\361T\t<\3425\200;\3028z<\360m\226< \355\230<\315\372\264<-\033\302<\335\304\272<\340o\236<\rs\\<\261\242\245<Je\312<J\270\326<\216\006\331<2\266\350<\250\332\371<\224\007\247<mA\311<\373!\343<\270c\226<\022X\277<\374_y<\307\272u;\014L\220\274a\245\223\274IG\236\274\300\377\243\274<\036\277\274\342\343\353\274\363\352\303\274\203t/\274?,(\274\302\303\004\275\253\230*\275\276\261\027\275|=\343\274M\342\355\274\0233\265\274s\333\253\274\\\202\313\273)<4;~;\364;(3\"<\370\2251<\016\207\312:\201\211\234;n\326A:l\312\256;0\202d<\315\252\230<.\036\231<\213\214\225<\327\312\360<a\303\377<YT\375<i\300\007=2\365\007=\354\351\017=\026\340\373<\014_\027=jK-=\313\346\"=\261R\002=\036\307\363<\0045\022=#$\364<<\261\004=\366\036\340<\254\364\364<\253\377\365<\016l\322<8o\365<\2576\017=\200\307\023=\215N\000=+ \357<\353\274\016=\204\016\027=\261\336\t=A\326*=/\3750=\002\201\355<\356\333\306<\013e\005=\376-\000=\264\216\346<\216\\\016=\025j\013=^\001m<_g@<\307\356\302<\204\316Z<\227\247\213<\357\313\375\272@\312\034\274\317\326Q\275&fM\275W\224A\274|.\'\274\265-\273\272\002%\272\273\317\332\321\274\035\276\360\274\034.\362\274\322Q(\275b\024\210\275\331\235\207\275\302\320x\275l\326\220\275hFm\275t\021\024\275\027\340\034\275\320\rD\275&\216\024\275\202\027\322\274FPH\275\334\016n\275R\217g\275\007_G\275\357\034\t\275\021X\275\274\251\322t\274\331M\035\273P\305\331:o\222\270:\032!\007:\340\266~:\316\365B\274\345\301\245\274J\215\001\275\353@\376\274,\216\363\274\342yN\275\0247w\275\007\026\213\275\337i\205\275f\352g\275\325_\022\275X\306\237\274U\0338\274@G\024\274\301\344\333;\365@\310;\340\314z;(\355N\274M\014}\274\\f\036\274\232\332\032\274\256\222\263;\234H=<9\332\257<o\342\310<\235\031\217<2\275K<\305\364\374;\302 \345<\206\347\317<\262U\346<\027\023\321<\\+\230<\277\342\315<\001\365\231<\246\254\204\273+\007u\274F\202_\274\362O\213\2748_\026\273I\234\312\272\323Xb\274Z\251\250\274-\230\223\274 \332\013\275#\345\010\275f\326\000\275a\220\322\274\371\033\327\274<E\366\274\315\271\257\273\330\313\274;\263d\225<|\0026<\034\037n<`5\244<\032o\255<\177\270\377<<\304\367<C\357\360<yt\352<\373\347\315<\022[\t=\351\250\017=-X\360<\306\323\246<\020\350\t=\352_\003=\347\332\354<\354\217\354<\244\367\342<\276\315\332<\300\372\243<w\234\n=:\275\r=D\330\002=\3208\014=\\\335\016=E\027\t=X\367-=\267\366\021=\273|\021=Jw\032=e\304\321<:\313\000=\341Q\010=X`\006=\006)\030=\010\240\373<\205\337\321<\020\337\341<\205\357\324<\332\023\335<\363^\001=\177\246\367<\211\3009=\301^T=\352zA=\nv\'=\021a\026=\241\001\006=\337}\275<\355\272\260<\202\354\236;\257\252^;\261d\206<S\205\203<\033\332[<\316w2;Lp`<xK\351;\313@\203;\367\204\263:\360J\243<\366*\360<\335T\004=\026s\000=n\364\007=\242d\366<\325\376\010=\226<\026=\322N\036=i\"\025=R\217\377<\245j\376<\323\n\336<\241\350\345<-\024\005=$\334\013=\t\006\001=;L\360<#X\365<\316f\370<\273\026\336<v\235\311<\211\201\003=\354u\375<F\250\005=p\021\003=?\037\340<\342\216\305<\315\247\340<\317\031\006=\274\324\002=\350\354\014=*\312\024=\035\240\346<\275\211\257<\306;\323<\366\277\331<\246\216\315</8\364<(t\366<6\330\225<\203\241\206<\311?\370<=!\367<M\257\343<\211y\361<<G\023=\013;\027=\244\014\013=R@\377<J\364\r=&\246\027=)\272\002=\227\027\025=\366\030\027=\037\340\033=\010]\273<\326k-< \007\347;v\033\210<\3175\267<\345\261V<\321\374\355;\223\337\261<\222o\205<<.\037<n\220K< \322F<T$/\273\016uV\272\332U\274\273\342%\224\274\367\277\343\274\366\233\226\274\216\024~\274\303\252G\273\363\277\216\273\026/\245\273\350\321\210;\271\256 <\226\316\017<S\345\026<\302\003\231<ew\213<x\035\247<{\311\237<u\234\233<\314\354\242<\211j\212<\370(g<\346\233/<\2409\301:\227 \352:\323\273A\272\0303\231;\030m\224\273\373\350\367\272\211\245V<nH\202<\203\215v<w<\261<\332\372\324<\360\306\354<S\204\367<v\004\362<\325\353\266<\213=\203<?\315\367;\315\364@<\022\345B<\t>\232<L\346.<\274e!<\371G\355;\2646\342:\317\r`\273y=\214;\031\"\n<\244\311U;\272\224\032\2746\210\022\274\341\323\374\273\0367\212\273\202\200\305:\227\246\030<\033uW\273\2662@\274\260\016\226\274\325\377\325\274\2452\323\274\303\335\361\274C\332\276\274\372\022\002\275i\245\003\275U\204\231\274R\341\362\274\323{\001\275\035\003\366\274\275]\335\274\224\214l\274]\"Z\274\034\375\265\274\210\217\307\274\034\262\245\2742\265\007\274\336\373\251:\334\261\"<\251i\257<O\322\303<\252\236\270<CE\006=\277\235\307<\234z\000<\010\252\217;\371\234\332;1\203\212:\'?a:YU\303\273\315\353\361;7\310%<e\322\230<;M\246<\247\203}<|\014C<$\201\231\273\216M\n\2748\207\223\274\\\272\227\274\277-\025\275\201g0\275\266\031\213\275eI\242\275ih\344\275\026.\325\275\177n\344\275U\362\260\275\367\310\211\275\245xK\275~\tT\275\300\235?\275\'h\231\275\217\261\264\275\274\324\257\275OD\214\275\376AE\275d#C\275\204\277F\275ok\233\274\342\306<\274\005\371\302\272\232!\320\273&\307\357\274?3C\275\334\226\224\274\347g\222\274XP \275lf6\275@;\367\274\337,\205\274\311k\247\272\013\2323;\236\035\365\273X\256\254\272\270\346\300\274&l\200\275B!f\275J&\033\275P>e\274\345\374\340\274\306\226\353\274\016\3430\275\250\326\177\275\273F\201\275H\036\032\275Xl\242\274s\363x\2747\247\031<)\262X<X\262\316<\035~\210<\025]\001=\307\303\244<\320|\324<\270\300\301<\204\250\232<?\001\030=7UA=\257\322\005=AS\004=\013\304\206=h\304\202=N\2259=\324\375,<]\350\252<\207E\010={\307\351<A\212\000=&l,=\033\350n<\205Mv<\232:\006=5\236\334<\003f\313<w\312y<\371vJ\273q\004\316\273Wp\320\274\252J\330\274BN!\275%\231/\275\303\246\231\274`\rQ\274e%P<\273n\311<\306s\326<)O\002=NR\375<\215\262\354<\310\246f<^\215\255<6\267\014<>:\240;\304\020\377\273\033\014\223\273\031p\006\274\241{\203\274\342\352\233\271\255\211\346;\025\016\203<\260}\302<\375\177\320<=\370\200<CX\222<\342\377\214<+}\001=\014\341\336<mu\335<\253\356\334<\343\266\331<\314\n\022=C\335\003=0\345\003=y\376\315< \'\000=rz\017=\037O(=\275\264)=\207\027!=\367\254\013=>\'\037=\340\223\033=\305\024\003=\363\021\315<\000\032\335<\006\334\014=\034M\007=7\3262=\264\036(=1\377%=\345\021*=\344\033)=D\r\004=p\221\032=s\211\t=\321$\002=\001\356\r=\\\305\036=\311&\034=\362D\010=\211\014\006=Y\277\021=(\223\007=?^\021=\331_\005=\242@\007=Ou\366<\211\355\304<\215\002\031<@{^<\227n\270<\341A\326<\354j\307<\237\367\026=\353$\036=\306\217#=0{\026=\211\243\034=\002\277\005=\304j\377<:\261\263<pg\264<v\266\014=\216\350\007=A\264\317<Mw\246<\301\234\305<\243\232\352<$\301\316<\373\321p<\243\265Y<\314\217\241;\3767\021\274\337\343\262\273Cw0;o\222\277\272\323a\217\273fA\310;\202\353\270;\304\223\3669\213\032\010;\2314\034\274\266\177\210\273\005\331\002<\217tS<\377\031\204</\345E<\002\016\214<\366\324F<\257\272\002<\223\230\241\273\326\213\033\274\314\372\177\274\242\000\224\274\004\375W\274g\230r\274\244\364\275\274\353\n\341\274>\344\352\274\220\365#\275\243\002@\275I\306\031\275\233\272\356\274i$\005\275#\307\325\274\312\200\314\274\016\327\232\274j\354\266\274qy\341\274RG)\275<AF\275\026*(\275\371\213\250\274|\235;\274H\",\274\020\034:\274W\025+\274\301*$\274\223S{\273(\016\237:\'\313X;M\027K<\226\234.<o4\036\273 \031\206\273d\374\212\274\376\246`\274\350\037\254\273\006{\014\274t\227\202<iB\230<_r\302<1)\261<\361\355\027<[V\370;\220\233i;\013\334\222\272_\034\256\273]\017\350;\262t\010<\227<7<\232\354\230<)\207\272<\331\023h<\3315\';BQ\237\273eK\271\273\234\252\023<\030n\271<\177\375\335<-L\254<\222\231\230<rE\013<\345\220\262<3\253\357<\260\364\003=\345:\364<\247\365\364<\207G\346<W\212\334<\266\r\342<HI\331<\346\274\370<7\013\003=m3\362<r`\353<\315\320\305<\360\206\217<\262\217\232<~\331\254<\237\t\226<\216/\224<\3724-<\364\213d<m)><\300\017C<\215x\321<#\365\001=\006\202\340<\030\360\334<W\020\344<C3\030=\340\2159=)L\037=;^\021=qU\017=\364\343\372<\326\306\337<\353\273\265<\362.\203<\304\215\313;\273^E<\362U\022<\364\301U<\224A6<\334xW<\347Q\241<|\320\254<_!\201<\000=\006<\305\017\3739\236X\311:U\347\036\273\250@\262:\354%A<\316\223\201<$El<\230>\237:2\257\230\273\375\362~\274{?\200\274\354\324f\274\337\314t\274\263UW\274A\036\252\273\316;\322\273\321\002#\274\224\034\261\272\252u\236\274\020\353\340\274\201c\354\274\361\346\342\274\306\216\343\274u\271\024\275\014\203%\275\374l\032\275__\245\274\240\327p\274S\3312\274\006\253\2249\351J%\271\3560\320\272\036\003\272\272l^\372;\265\256\376;\255\233\313;A\273\005;\354\352\004;\206\262\223;g\222\000<}U\022<\325\022}<\243S\207<D5 <yB\221;\371\310D<G\262\261<\304\226\236<w\342\230<\333\033\271;\322\"\311:\360\231\271\272\223h\320\273\354\3434\274\021<]\273C\223\310<\rj\307<\"5\323<H\261\263<O\034\227<u\205\251<\374\307\311<\356\354\313<\234\375\272<~\236\261<!\327\260<\355\036\327<\306N\330<\204\346\360<\224/\377<mp\000=\030\202\005=\025\367\375<\023\274\003=v\242\365<\216\253\322<R\303\001=\222\200\304<\361\376\347<\310B\334<\202Y\305<\221k\353<\337\365\341<\312\234\345<3s\343<\200H\324<p\342\310<\217!\351<\005\257\252<#f8<\356\332\202<\311\335\001<\222\233c;e\223e<s\305\215<zji<Q\032\232<Ge\355<5\230\361<\373<\361<} \376<\010\371\004=\223\243\370<\255L\360<X\260\004=\342\"\325<\315\315\241<\303\320\206<\220G\266<\334\265z<\\\031\226<\357Y\210<\302\355\247<Kl\230<\314\316\257<\361\004\234<\347\367\261<W\274a<\207\246W<g\350\331;b>I<\237\332\217<P3\326<\'\261\371<:\265\320<=\340\023<\202\320^<\273\025#;\360\343B\273\337A\263:\365P\305;-\230q<8j\221<6;\256<\211W\217<!\256\266<\252\376\267<\324\267\211<\257:\252<-\025\362<\275\327\004=4\033\014=\375~\026=\177\240\016=\301\264\n=\017H\t=)\214#=+d5=RT&=\253c5=JZ7=l\2370=\264\363\034=\2438\333<4\330\305<\327\312\007=b\354\270<I\004\324<\3737z<.\020@<\325\3123<\356\006\362\271}5&\272\200\227[<\275\023\203<\010\017\346;o%\307:\317V\300;\323\217\346;o 1<\263\314\211<\303*\025<Z\356L\274\343\024\272\274v)\001\275\245\261\247\274\245\rE\274rEq\273Z\316\375\273ic\205\272\307\0314\273*\n\205\273\231\210\212;\245\231B<OW\221<\355_\227<U\010\332<\007\037\364<P\346\000=\376]\340<\251\t\350<\212\237\376<\243\\\367<\352v\001=\006\371\361<\260\222\316<\265i\272<:a\256<\227\003\245<&N\241<\373\224\250<2}\343<Z,\341<\202>\326<\2350\251<\373cn<yZ\214<\3737r<\255\246<<`\335U<\212\3645<\006\211[\273\n\303\340\273\247\306/\274c\030\013\274\354\r>\274\217\222\317\273dO\025\273)\230\021\273*\247q\274\205\335\203\274\247\213V\274gLs\274D\320\036\274d\350\241\273\013)\r\272\004}\326\272C:\332;\233>k<7\033\201<Q\231w<V_t<\362\r\263<q3\272<\271\205\366<=\324\002=\224\021\246<7=J<\357g*<\241\256\357;\264\246\020<\t\247~;\023\037\324\272\222{\215;\010\007T;\270}\"\273$y\314:\243\315@\273\317\363=\274\234cv\274\327mX;\257E%<\302\341R<\227-0<\264\252\231<\257\030\300<\006\301\373<\207G\372<)\244\n=\375\037\343<\330\377\357<\017\272\001=\005\303\004=\t\007\020=\310\r\375<>%\335<g=\317<\363\313\335<\326\220\301<y\r\337<\221[\231<M\\\261<\360\352\312<\026\206\260<\310\213\310<\017\217\372<\362\343\t=\245:\375<\251\232\334<\377\347\276<\342H\331<\304o\364<\273\025\363<\317\246\350<\226\001\347<\355\024\343<m\303\303<\2049\217<\372\346y<\"\264L<\036\262\246<<\335\273<\002\252\234<\377\314 <\213\024_;\272];;\356l\017<\233\343\261;X\350U<\215d\223<\223\030\217<S\"\265<r\271\275<\226\261\332<\022o\327<\254~\310<\035~\331<\365\006\227<\351M\212<9Sf<\021?\215<\"[\206<\tE\204<\250\006\211<!\343\014<\240BD<JF\225<\227\366\207<\033AW<\0055]<\261Ch<\237\323\250;zE&\274\305\253\222\274H;b\274E\263\240\274\354\370/\274\317\304z\274\374y\352\274\220\350\355\274fS\357\274\343\315\220\274\235\307\214\273\016B\016\272\205\237\014<\363uC<\225\363E<\306\235\227<\344\376\242<\253\232\204<\252Q\203<\322 \220<\t\"\257<\216\240\235<\247P\227<0\336\241<U:\274<3\224j<\026\346\342<\020\337\344<\253\210\353<5\221\340<\246a\304<\371\t\260<\363\345\207<\017\3425<\3473\264;\341\035><\312\025\213<\305\204O<H\344n<\247\023Z<},\266;\004\240\373;\037\214\246;\201\377\204\272\363\343\215;\020J\025<\364\255w<\230\031\231<\234\320\215<\307\324%<\327\203`\2736\367\204\273\372\'\245;\001\006\265\273~R\215\274idb\274\004\371\026\274\234\330E;;\255\312;\014\367\t<\226\350X<\255\3658<K\006=<5u\232;\315\357\224;\275\375#<\303\365:<V\341J<\205\330B<*I\022<*\311\251;\227\362\254;\021e\010<%\206\314;\335\250g<gb\220<\221\366N<\363\275X;u+o;\365e\356;\026\203v;\317\003\021<\310\244A<\233\351n<\n\217\243<\271\037\236<\304o\257<\325\345\271<\0357\265<P3\255<\356z\257<>.\320<H[\371<\004\014\375<\333L\347<"
      }
    }
  }
}
node {
  name: "Const_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "\tL\206\275\315\241\222\275\016n\220\275\213\377\221\275\276\252\213\275=\273_\275\273\265;\275aGF\275\232\275Z\275\000\307;\275\324\264>\275\245\211=\275\363\177G\275\376\236\017\275\340\003\314\274\361\362\264\274\363q\360\27439K\275\3316`\275@xo\275+\014H\275\227U}\275\362\212\222\275\303\247\244\275\004\024n\275\201#U\275\035\247p\275\'f\202\275e\357\236\275\253\3342\275W\245D\275\364JG\275\327D\315\274\342\211\300\274\240\\\361\2747Z\007\275\032k\'\275\320\301$\275\366\354Q\274\200\245\222\273Zf\233\273/\0356\273\220\007\3009RV\274\273\344\374/\274-\353(\274\310c\310\274I\343\363\274\247L\351\274 \255\320\273\332\254\021\273A\352R<5\327)<\013\337\235;\222j\276;\276H\026<x\303k<\277\367\226<\014\351^<\010?M<\265\344\245<0\272\355<n\336\310<-\313\330<\374s\224<\n5K<\t\240\003<\010\214t<\3508\221<\370u\272<O\005\347<S9\367<\014\221\020=&\267\304<\332\315M<\231\323\374;\270E\311\272\223\334$\272Y\'\216;@q-<m>P<\242\335\033;\037}\377\272`\252*\273V\357#<\2679\007\274\231\300n\274v\\\212\274r\365\330\274\027C\331\274|S\225\274\255Sh\274l2x\274\004l\321\274s\177\322\274\031\370,\275\317p1\275\223\2418\275\204\262\032\275\037\263k\275_\001\210\275Y\036\201\275\\\372\204\275\034(\211\275\373\022\224\275\222\031\233\275\333\364\212\275V!\221\275y\336\230\275\373g\241\275\202\253\245\275\264K\300\275oZ\242\275\235\016\201\275\363\021h\275\247\257]\275\320\177C\275\275Q\017\275w\365E\2758\276T\275\274*x\275\326CR\275H\211\005\275\301;\020\275\221a,\275l\265F\275\2712\005\2751\213\266\274V\177\375\2742|\254\274\224\320\314\273)1P\274?1\240\274sHt\274\330\302\014\274M\210\212\274\265S\363\274\253\373\337\274\353\305\306\274n=V\274\033{\263\274\026R\317\274\332\252\216\274-D\236\273d\365&\274\275\244T\274g%\243\274\252N\"\275\372\330E\275Dx\330\274\377\353)\275\240\215<\275\001\305&\275\262\000\001\275\007\030j\275\247\007\210\275p\342\250\275Z\306\236\275\331a\321\274\325\350C\275c\003\207\275\330\366\216\2757\027i\275\n\204f\275\267\014\325\275\317\257\307\275\200X\261\275\300,\333\275~\313\343\275\001E+\276\021\2607\276#9P\276\217\216t\276\2272\215\276N\375K\276O\300,\276\310Tn\276l\223p\276\243qT\276 \0348\276F\305:\276-\231c\276\247\327j\276E\035\200\276\3517\203\276^\237T\276\031\2333\276\341\352%\276\3635\026\276Bk\020\276\337\256\357\275!J\007\276\234\3252\276\370\034)\276+e#\276}\3119\276\274\204V\276\205\234B\276G\001>\276\003\272L\276\221\306N\276\320mc\276\333*\211\276\305\333\203\276M\202J\276\033\2507\276\267y\"\276\371\271\n\276\240[?\276\244G7\276\"\214!\276\014\022\"\276p\264\031\276\304\327\327\275L\240\330\275\375\262\324\275\322\230\353\275\333\272\372\275R\256\365\275\376\226\264\275\033\016\247\275\033>\300\275\0206\313\275e\034\355\275\245\345\360\275\300\005\356\275\022\370\336\275\344\252\341\275x\333\271\275a\371\221\2758+H\275!\306%\275\324t\003\275\211hg\275+Xt\275o\031\241\275Q\266\265\275%\027\271\275\206*\354\275$T\364\275h\271\333\275m\036\t\276uu\366\275\263\264\366\275\320T\363\275\237\027\320\275GQ\303\275Et\202\275_\221\242\275T\204\312\275\221H\336\275\256\307\301\275\235\024\263\275(+\315\275\231\321j\275\356\313E\275i\032\237\275\377\005\256\275\2130\265\275\321&\250\2755)\342\275\261x\373\275:\240\374\275\n\201\r\276_~\031\276\265_\014\276\205[\006\276\312\316\003\276O\372\034\276\221::\276\203\301C\276\31253\276\202\236F\2768HK\276\240\247I\276\200\335%\276Sc\021\276\352\377\364\275qR\313\275\225\"\270\275\202B\241\275\360\010]\2750-L\275\257W\227\275\214t\372\274\210\237\337\274n}\342\274\330\004\031\2749}\223\274pDU\275G\236\037\275\024+\t\275ba\2058Q\310\003<!Dw;\032B[\274\246\335\010\274\217\034\334<\\$\366<\207\213\227<\315\220\226<\250~\013=\225\367.=}#h<\014\037*<\t\377\222<\026\275|<n\376\020=\035\033\362<\222(\275<\321\233-=N\332==\361W0=\3360\220=\003S\225=4\267\255=\025\326\243=\177\245\271=\3115\233=\207x\211==\2046=\256N?=\276\242\'=8\311e=\241C\205=\027T\200=\263\030\026=\257\333\030=\323\241J=\265\306A=\266\005C=\270\236\211=ox\267=\376\274\272=\213\324\227=\370\257\242=\005\333\251=\0379\230=8\177\237=\220\304\225=\354\355\243=\221\364\225=\0139Z=\330D*=M\320\n=\273\256\034=\371j\032=\236\274Q<\3613\324;\341;\205<*F\334<&1\002=\021G\031=&\305\010=\342t\033=\215\311\200<\375\241\037;\307\273\335\273tMh\274a\027\034\274\343\271^\274\230\320\312:K\375U<D\333\023=^\207<=\364\242N=\r\026p=w\262|=\333\006\200=\350M\237=\031\361\246=\214?\253=\010\372\240=\202A\230=P$\264=\257\014\254=\300\260\301=\246\357\303=~/\273=\004W\262=&,\305=\330\231\267=\017j\237=K\355\251=\332\210\260=P$\242=\211\000\\=\252\252k=\374\376{=\2615\224=\006\017\270=\304\225\277=\000f\300=\370\270\263=\374*\255=\330\324\261=\205&\224=\n\023q=\354\2518=;;D=qBr=\346b\217=t\363\232=\242[\246=`\n\254=\322;\244=HH\262=Pa\307=ns\313=\271Y\273=\376\227\256=V\352\266=`G\254=Q\256\214=\317\351r=w\304\217=\321L\223=\226\033\201=}?8=\037\026\372<k\263&=\356;j=|\nj=b\335\204=\016\237\211=\335P\224=\331\362\210=\332\037\241=(\361\251=d\314\231=\212z\244=\336\002\233=`\025\217=\027\027\212=\003J\177=\3634V=\363o+=B&\323<\263\204\020=\374P\234<\375T\203<\320\251\204<\253\255\314<\302\006\016=\224\223\034=Y@l=\016Lx=\216[\206=\223\322h=\374\026d=\321}\215=\266\307\211=s]\206=\212C_=s/?=\0070y=\337jf=-Us=\257\026\'=\260\301#=\001\nd=\3133d=\373sM=\361ZO=\307\302B=]h\025=k&\014=\311\367-=WQ4=\030\230G=8C9=o\206<=\244+\t=Nk\350<G\363\"=\240Z/=\203\0360=`[>=\373!E=\021UA=\266g2=g\254\030=\357\2754=S\304G=\374rN=\254\006P=\206\247X=[?b=P\2047=\022/I=\205\354V=\331\022/=\321\014D=\233\n!=A\263\335<Gw\210;\361\2342;\256\255\3039\241\316\261\272\267$\276\273\036\210M\274\233\032\r\274\203N\207;\261\376\200;No\241\274\342K\371\274~\020\335\274\236\007\230\274\010\276\252\274-\343o\274\313\377h\274&\210\2449\346d\027<+\200e<h\271\207<ut\220<\021\202\005<\010&:<\246Z\352;\343\230@<[\005\251<\243e\322<\035\201\325<&f\324<\357\240\032=\242\310$=\242\020&=)\3571=\354\3064=E\233?=v\245/=\273?L=\260\333e=\033\\^=J_?=\234\2238=\030\245S=\177\313<=h~I=\210\3215=\010\364A=\256\000D=@\3462=\256(F=\032\377\\=9\262c=\321PQ=\262\225I=\307\377b=\262tm=\217\216a=\321\321\202=a;\207=\271\320S=\214a@=\343Td=\226\016`=`\212S=\001\245p=\313\351n=\313\363\033=m[\017=\r\005B==I\025=\0043$=\2355\244<\210c;<9\277\006\275\374B\t\275\270t\233;S\237\272;\024\036h<cv\030<8\364C\274\354C\212\274x~\224\274T\344\376\274\210\013p\275\357\222v\275\227\306f\275H\254\213\275\202\360h\275\332~\023\275\322H \275B@L\275\274h \275\274\330\356\274W\001[\275\354\377\202\275\317W\202\275\344\376h\275w\351-\275K`\005\275\263\264\311\274Y\375D\274\177\344\374\273\214I\374\273_\270\010\274M\226\372\273\026\374\247\274\2414\356\274\023\304\'\275\347\247\'\275\252v$\275\370^|\275\002\316\224\275V\336\246\275\037\336\243\275\220\316\224\275\355\225W\275\025\230\026\275\207\214\351\274+e\326\274+\034%\274\332Z%\274A\001B\274EJ\345\274\334-\374\274(\213\314\274q\272\311\274=\371\031\274\370w3\273\370\213\002<\277BD<\246\240\275;\332}\273:\361\3034\273\000\360\225<\307{\210<\025\274\246<\362\332\230<\307\230K<\024\002\242<B!g<$E\r\274\212\322\241\274\035\t\231\274\005\010\267\274D=\372\273\270\317\336\273\034\220\235\274\226\376\327\274(\257\305\274\303l\'\275=H\'\275\324\317!\275\262S\014\275&w\020\275\225!\"\275R(v\274u\321l\273\376#\033<,\377>;\3116\342;\245\251V<p$u<>\224\324<\326u\324</\021\325<k\247\325<H@\277<E\344\005=\2501\020=O\345\367<~\233\262<\207z\023=\177C\020=\365)\006=\267\323\010=]\235\006=\236\360\004=\033\372\325<\376\025\'=Wa-=t*%=j\2221=\21207=~\0234=,\002]=v\177C=5\273E=\277\267Q=\311\360 =\206=;=\241\030E=M=E=\273\327Y=}\330@=>\307,=e<6=\237\3070=\216\0366=c\365J=x\316F=\257\201\204=A\375\223=\031\370\213=[\313\177=/8p=4\334`=\254\0029=O\2212=\031\264\325<N\333\305<Z\351\030=\330\004\027=4L\013=\010\210\271<4\002\n=\030u\332<\213@\275<\027\222\243<ns\037=\034\334G=\025\346U=\254ZS=\313\226\\=\021\304P=+b`=e\303o=\261\013z=Ehr=\275\256]=\037\'^=\330/N=\317\342R=\016\224f=\301\323n=\211\267d=\007X\\=7\260_=c\tb=\217\367T=?\231J=\215\375j=\027\344f=n\363n=\276)m=\375\000Z=?XL=#\217Z=\301\312q=R<o=A\244z=\300\371\201=\346\343a=g*E=\273\203W=\316\372Z=t\255T=d\376h=\033\243j={=8=\275o/=\017Gj=\344:j=D\200`=\257\001h=F2\202=O\326\204=g\005~=\365\316r=\2706\201=\n\304\206=J\221x=x<\206=\212\313\207=\361\324\212=- U=\033|\037=\000e\016=\266\2065=OAM=\265\325$=\2758\n=-\211F=`\271.=\311h\021=Dn\033=\220\334\030=3\237\257<\274\360\271<\201y\212<\303\315T;\202\357\001\274\235}5:oV3;\254\304s<\021\230T<,\316?<L\017\252<_\237\327<\352\205\315<\346\273\317<\226\240\017=\311\350\010=Q}\027=\256/\024=\333j\022=\274\223\026=\3028\n=$\321\374<\213q\337<0a\217<\037\007\217<\3536m<(x\241<\377\273!<\304\305F<\022\326\337< \244\367<\213\333\360<\205\254\024=c&(=\312\3345=\342\016==\336\343;=\032\246\036=\003t\004=\314\307\300<\330\026\343<bZ\343<f\355\016=O\005\331<\311\005\321<\376\242\271<\300\362\210<\240\2554<\0259\230<\223\220\271<\201d\214<\'\251p;U=l;\301\330\215;\3375\364;\254\311T<\204\275\252<S\366\374;\240)\267\272\251\357\017\274Z\367\217\274*Q\224\274\033\372\272\274U\347\215\274jw\333\274=Y\346\274\335\325y\274k\201\335\274\303\303\364\274\313j\356\274+\232\333\274\2402o\274\255ab\2742\247\276\274L\034\325\274\273;\267\274\240\335-\274\205\037|\272L\240\002<\202Q\244<\352A\276<A,\270<\362\263\t=\237\243\323<\357\363\032<&\350\306;\2321\013<=\374:;\214\215,;\320)\220\273vr\025<\350\tF<\030\307\254<\250A\276<\273c\231<\254\375{<\302D\301\272\333\250\265\273\254k\200\274\236\006\211\274\355\353\021\275\031\2601\275\241\035\217\275\017\024\252\275N\020\361\275\n\243\346\275\244\243\372\275Xv\313\275C\220\247\275\224\336\205\275%\357\213\275\276v\203\275\010\343\276\275C\r\335\275\267\205\333\275y!\273\275$\320\223\275M\005\224\275\265\010\227\275\350\2457\275A\220\030\275b2\334\274\357W\377\274\366\325[\275m\337\223\275\370X1\275<\251/\275\010\024\203\275\376\343\216\275\346$e\275\007\277,\275\332\t\335\274\007:\267\274)\277\002\275I\236\317\274\234\314@\275M\262\260\275aW\245\275\321\211\201\275\244\265\"\275u\313X\275\347l^\275\007\363\214\275kC\265\2755w\270\275-R\206\275\260\034E\275\276w1\275\204\232\227\274b\371`\274\337\2257\272a\301\002\274\315\326\003<\263\205\006\273QO\240;0Ly;\274>\3618\372\257\237<90\377<\267v\224<m\244\233<E8^=\237\317^=\252\226\031=\350\301c;\234\255l<(\023\344<\235\362\304<\245\014\344<\373\332\"=\222\365P<\345\253_<fD\004=\320\307\336<\340\375\322<N\221\207<\001\024\374\272XD\256\273\3560\316\274\334\243\333\274d\375&\275\310\2119\275V}\261\274u\240\202\274R{!<\212\331\267<\245\023\313<6F\000=\017\036\000=1\362\365<d\225~<\213\367\275<O\0200<,#\351;\224\211\277\273T\2031\273\353E\333\273n\310u\274\367S@:I\352\006<\0259\220<\210\253\324<(\342\347<\372\377\232<q\262\257<\211_\255<\334\002\025=\234g\005=<\"\007=.>\t=\244\344\t=\326\2242=\006\020\'=\314\312)=Hw\016=EV*=r\250<=\2318Y=w\r^=\307kX=\360\"E=P\305[=\255\334Z=\230\367C=X\035(=\273\2231=\326}R=\205\301N=\262\033~=\030\347u=\273Ov=P\024}=q\237~=0@Z=w=s=\353Wc=|\n]=\270\236j=\310\313}=\330\365|=\255\336i=\300\277h=\325)v=\365\337l=\212Dx=w\373l=V\356o=aGd=\\\340J=\354\213\013=28\034=\026\226A=^&Q=\265\241I=\251\235\177=\035N\204=\245\364\207=8\353\201=r\320\205=\217\361t=\300]o=\313\024H=\241\013H=\276\334|=\377\300x=\274\305W=Y\373A=\225\307Q=\370\024e=0\270V=\007/)=L\352!=02\371<\010S|<\355t\224<\320k\324<\255p\254<\250d\216<\005\350\342<\256\263\333<u!\254<)\266\265<\355\001\035<E\332l<\027\244\331<\200\316\000=\022\020\016=\013&\371<ct\021=\017]\370<-\251\323<\014\226F<0\337\336;\320\203\200\271\332\301j\273]\250-:\3336\341\272Eo6\274\240\372\206\27476\231\274\323\300\000\275+\277\"\275\372\333\000\275|\322\303\274\356_\347\274\210\376\270\274\034\247\265\274wk\210\274$\273\251\274Vr\332\274\320**\275\300\022L\275\327\0362\275\004\270\300\274\216\022p\274T\320c\274\"2u\274|4i\274\000\013e\274X\"\000\274\207_.\273\037\236\314\271\217\342\024<)\374\374;\355\315\255\273G\314\345\273R\233\245\274\253H\215\274\225E\021\274\302\257I\274\372\002O<\365\334\201<\200\275\261<\242\253\245<U\324\005<\303\257\333;Q!8;\236\300\366\2723\352\312\273\330\306\321;e3\001</\0055<\353\357\233<4\200\302<\204\260}<\341\360~;}\023r\273\321\331\230\2736\243\'<PJ\310<\301\213\362<\022\332\304<!\223\264<\351\370D<-\336\323<%o\013=\246\264\032=\252\215\023=E\232\026=\340\237\021=`\357\016=\275\362\023=\360\225\021=\260\343#=\2170-=|^%=\376\375#=\354\201\022=q\220\357<\253p\374<\366\215\010=P\204\373<\'\014\373<\006m\274<\265\346\330<\240i\305<\203\346\307<\213 \036=W\3279=\354\207)=%B)=Ww.=7\313W=h!}=\352\034e=\300&Y=m*Y=\034\200H=l\323;=\254\362&=\017\013\r=z\341\305<\312e\365<\340\246\331<\351\034\373<o\332\351<\025\374\371<\303\226\030=:\355\036=\027\231\010=\267A\320<\"\206\214<\341/\222<\014\237Z<r\316\211<\371\341\337<\236\316\000=\317\347\365<G\037\205<\037W <7\224\005\273\276\334<\273\374\n\002\273m\006h\273\372\024\032\273y\346\254;\321ml;\376\355\367\271g\360\001<\261\2053\274\342A\244\274\212`\267\274\316\366\264\274\213\230\274\274\345\252\005\275\003\022\033\275\270\037\024\275e\037\235\274\\\350f\274\212\307-\274\374D\034:Z\303\0259\230Q\257\272#\330\236\272\177\330\003<\3566\t<.9\344;\317\0169;\342v:;+\305\261;\010\261\022<\302\347\'<\313\200\214<M\224\230<U\342E<\303,\336;\345\315o<\331\245\313<\223\026\274<|\271\271<\2677\036<\266\035\263;\3677\033;\212\035;\273\"\340\001\274Fk\324\271\343_\346<B\327\351<\272\205\372<\034\266\336<\014\365\304<\271\336\332<\322\204\377<\000\352\002=\250[\370<\005\'\362<\272\177\364<E\230\017==5\022=\024\353 =J\222*=V\324-={o5=\361\0221=\35118=f,1=\276\360 =\370\314;=\235\013\035={\2570=\266,,=-\244!=\326\2136=*(3=Dp6=O\2636=\\\0340=\031@+=\353\376<=s\263\035=g^\352<7\307\010=\271\240\314<\314\276\244<\t\024\374<\006\347\013=\036\362\375<dK\022=.\022>=e\252A=\271\346B=>\004K=Q\266R=HLK=6LH=\215\242V=\332\317<=y\273\"=\347\262\024=\210C-=\010\327\017=\025d\034=j#\025=Gk%=\260|\035=\277\261)=\300\236\037=\036\036+=\230[\t=\033*\006=wT\323<\037\202\000=\002u\026=\200+;=\344\227N=\000s:=uW\351<\2376\007=\2751\256<\025\'x<$\312\234<{-\301<\021\267\004=}W\021=c} =\264\325\020=\"p%=\305\262&=\275\031\017=\205\t =l\367E=\250\241S=.\326\\=\331xi=\2579c=\006\331`=\'\357`=#\371}=\375n\211=\342\323\202=Z\314\213=\253\021\216=\201\303\213=\266\206\202=!\341T=B\365I=\027\304p=60D=\257DR=\370\303$=>\212\024=\324\005\020=\336\003\273<Q\216\264<}\"\024=\343`\036=J`\356<\026\016\274<(:\335<\247\026\344<>\322\000=\017\236\031=\024m\360<V\034\324;\177\225\243\273\303^y\274\024!\241\273\316HA;RE3<\315\260\314;r\327O<\335=,<09\017<\277\235\212<\302\003\312<\022\344\373<>\256\001=\212\002%=\211\0354=\220\023==:\243-=L\0343=\237l@=\024q>=\353\"F=@\017?=\237\024.=\236\213$=\271\365\036=\005\227\032=f\t\031=&)\035=\366V<=jO<=\245\2677=*\035!=\234P\007=\256\010\022=\242\355\007=_F\363<\030*\377<\024\225\355<>Xa<\311\323\034<\324\376\241;\2042\330;\216\2574;\331\367\367;\350\2308<$\3662<\022\223\"\273\341\314\225\273q\375\r\273}\307\226\273\200\204\3118v\010\224;\220\254\016<\260\376\357;e&\200<\201\014\301<2/\316<\2021\312<\022\332\311<v\007\003=\247\030\010=\024\321(=h\3362=\202\217\003=v\255\305<\245g\265<\377\375\232<\252\r\247<9\033y<\257\215\030<d1x<A0c<\206@\376;uh><\332\377\334;\r\'&\273?6\331\273\304X@<\225\252\230<\221\264\260<T\301\237<p3\344<\211!\007=g\251\'=?B)=\375\2169=\266\030\"=\257\241*=a\2676=\225\016<=\037\376I=\2429:=)\207+=\212\272%=(\211.=\2704!=>\2151=4\215\016=Ts\033=Dx)=\364\265\034=\027\341)=\315\353D=Q\254S=>\304I=\347=:=Z\305+=50:=7YI=\321\360I=\255\272E=\254\361E=u\352D=\305w5=\305y\032=&\270\020==x\004=dl%=\357\2450=\313\275 =:\260\361<r\315\270<\221\340\260<\251\013\340<\214\235\301<\327 \000=\"\307\024=\t\231\022=gz&=\ty+=\2718;=\220}:=,\2253=2(==\004H\033=\344\236\024=\374X\010=\006\204\025=\225\313\021=\373\177\020=\214\302\022=\230\232\337<q\201\372<2X\027=\267o\020=\010\201\001=[\221\002=\020\004\005=\362\033\274<\343\350\332;\2267\t\273nO\253:#~\263\273\355\030=;\375\264\"\273\211v\213\274Si\227\274I#\241\274\247\331\016\274\356\212\221;\344\363\002<\255\365\214<\344m\251<\251\203\253<\035\327\342<\226\314\360<a\267\323<z\357\323<1\261\342<\223O\002==\003\365<||\360<\000>\375<qR\r=\000\254\323<\343\037#=\246\366%=\2308+=\307Z\'=\263U\032=\324\371\020=\207\007\372<5\000\314<\320\323\233<:7\316<\341\271\373<\337\330\327<K\027\350<\317\231\335<\336\236\233<\010\027\254<\377\341\224<F\273><E\001\212<q\n\261<M\214\343<\233R\001=\002Y\370<\3538\274<\345\355\020<\207>\377;\340\327\211<\377\273\272;\016\252\341\273\215S\204\273\341_\0009.\272I<D\352|<\256\332\220<\177\250\271<\221\r\252<\323\251\254<\024\232f<o\352a<\366c\236<1\212\252<\320T\263<3\350\257<s]\227<\277\021o<\026\020o<C\232\220<8\236}<%E\301<\240\377\337<\337v\267<\355\033R<\271iU<\224R\210<*OT<\320>\224<\374q\255<\211\212\305<5x\364<O/\361<\254\244\002=VX\t=\353K\010=\230k\005=\260\277\007=\351\340\031=\024\3240=\241\3174=\363\216+="
      }
    }
  }
}
node {
  name: "Const_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1598
          }
        }
        tensor_content: "W\220\010\274\3577*\272.\356-\273~k\316:\244\244T<v\356\003<\270\242\201\273D\t\332\273\000e\335;W\346\376\272\237\204h\272D\234y\273k\035Y<\033Z <\265\257\027;c\003\007\274\325O\271\274\246\344\337\2739\360\262\273\304y\021<\352\212}\274\032\242I\274G\253?\274\376\315\265<*\007\247;\336\310\r\274@\346\341\273\221K\214\274\241\356\014=\246\367\275\273\245\252\374\2724&\301<\373\270\201:\346 \342\273\036@\225\273\212\n\027\274:t\271\271f\331\340<%Z\007<\312}\314\271\203\304\370:\341\247N;$[\316\273d|\256\273)\02049\253\031x\274w{\314\273O\227\035:\274\373\264<\013H\206;\220\204y<1&\021\2733\336\260\273F\360\224:\375\251i;\327\217\264;#_\221;vq\220\273\005\326B\272\312x\004<\027\264\027<\351lv\273\003\200(;b%\375\273S\237\256\273l>\207\273b\372\352;\200\031R;*P\264;\217\353\304;\177q0; n\277;NM*\274b\3663\274S\r\227\273\336t\030\274\371\233i:p\257\245;\014m\323;\265\305\036;\310\335\'\274\024\272\217\273\005\246=\272\236\264P<1\227\230\274\027p\336\273\"\3606\273\027\265,\274K><\2722\315\002<\032cu;@\340\263\272l\3729\274\236\023P\272wo\226\274\311\251\023\2732]D\273\313`\331;\262<\270\274<\2757\274\341\244\001;\\hq\273\000\r\200\273\013d\371\273X}\271\273\346\221\334;?\014\246\273\315\307\304\273H\314\326\273\217X\216\273\200\213\211\274\267cc<\213\"\201<?\225\255;T\344\251:z)\264;O\310I<\341>z\274\020\217\250\273\211\2050\274\323t\n<\342\351\227<\361\273l\273)X\007\274\2322\003\274\016\265\200<\230C\"<\017\216\037\274\334\300\034<x\200q<\345\t\341\273\315g\365\273\365\t\216;^\252\311;\017\320\021\274\337\245d\274\003\211\342:\265\014&;\315M4<8@\035\274\227\226\207\273\201\256\370;\3622M<H\021\272\273\224\003O\273v\304\370\273\003\240\260\274\200\332)\274\000\252\262<~\220\211\274\367\032\303\273~\245\223;\364\337\016<\025A\353\274T\331>\274\240\332\240\274\266\036];\207\346W=\360\341\311\274\305\317\254\274\353\250\303\273>\206H<\261hK\272\312\314e\2758\223\233;\177\272\037<\254\\\322\2749\024\371\273\023*\223\275lL\237\274\3020\021\275\320/Y\275\265mo\275!\\\272=2>\005={0\270\275\241\354\021\274\332\346\361<M\336\357<\245\357\000\274\316\205j\275]\240w\274%\033\r\275i\032r\274\t\001g=\372t\016=\016aB<\024\376i<\207\031D;\002\304\306<\265\241\252\274{Rf\275\246o\353;6\023);\346\373\000\275\'*(\275\311\251\235<\302\224O:\356\363\275\274J?\374\273\206!\002\275\025\027\217\275\371C\364;\\\373\216=\264\363\222<\274\345\250<A\022\300<R\343\213\275\253\351\245;a\037\256<\312\362\230\273q\023\276;P1B=\n\332M\273:\260\007\272\272\356\177\274J\321=\274{m\213\271]\325\005=\017\277\247;\371+\203\274\300X\013\274\312 \262\274\263\260\247\273\036\320\265\272\236\217\263;\344=\215\273\323z\234<W\036\235<\211\367\266<\306\016\375;\274t\000<N\014\340\274\022X\240\273\324\335\271\274\370\244Z\274\215~\207\273\200\326\377\274\316\373\370\273\264\0060<\006a\014\275l\333J<\374pS\273Qy\231\272\320\366\207<\010^\222;\246\026\004=\361|\234\274b\215\306\274\304y_\274?\270T<)\326\270;\232O\211\274\001r4=+\202\007<\234\370\n\275\202m&\274Eh\310\273\324\302\236;nc\016\275\231\221\215\274<\216y\273\251\212\252\274\264\277\220\274\244\207:<\2244`;\017#\343\271\346y\007\275\275\307\"\275\r\331\206\274P\317x<lV\352\274:\3650\274\362\223H\273\273\206\032=6\314\241<\001\177\267<\377\263\244<\377F\003<4\367%<C\202\313<\320{H;\313\251\344\274\211\3743=\303\366.;\033 \214\272\014x\225<@1\030\274\352\331\030\275h&O<l\330\235;/m\t=\257\014\005<\3568\210\273\262M\221\274\2260\237;\3548\017=\026\201|;\342\3451\274\203\217\2719H=\203<\201\337\031<\252\211\343\274\245\001d\273\200+\001<\270\205\010\273\022Q\245<\231\016\241\273\201|\273\273\303^\240<!\376\242;\272\246\006\273\264\277\337<\250\253\211;\315\035W<=\261\035\273x\260E<V\017B\274u\036\321\273\023g\247\274Y\263T;\203Y\223\273\365O\201<\252\030%<\177a,\272f\262\305\274\313\210\322:\277@R<]\207^\272\013\t\306:p0\244<\337\300\272<G\324x;\304Yd\274\224X\343;\273]\257;7\246\307\273\0041\255;\233\257&\273\264N\n<Wk\222\273\201\265\217\274\032\200&\274\020\265\326\273p\260\251;\254\272\3439^\242\306\2745v\310\273\017\221$<\211\2634<\221\023\266;5K\321;\207AG\273\035\306\257;\263\356\257\274\306\031X\274\326\253\032\274\001/\001\274\346\353\221;@\223\222\273\276Ux<O\241?<\237\216\275<\343\256.<\025\035\264;\007\323\026<\336\265\222;|\202\033;,0\204<\362=\265;\247\264\205;\367\t,\273\341T\006\273\210\212q<xg\302\272\036\204E<\3271b;j\302\314\272\220\362\342\272!\2111<\251\376v\273\003v\022\274\326\262\340;\262\212\251;\304o\222\273\222`\272\274d\252\246;\253\217\256;\362\313C<T%\226<kt\274;\037\2325;\313\231`\273\031\217K\272bu\215;\016\241>\274:\2267\274\017\270D\274It\200;1jF<\033\204C<uA\353;\211\262\354;\210F\232;K\025\300\272\254\272\013<\252RB<\027\220\216;\303\231\236\273\n\022h\273\345\375\304;\345\354+\273\310BO\274\020\031\360\273\026\370C<J b;\310g\334\273\203\364\203\274\203\314X\274m\0131<\305\225\213<\0252\272:\242\026\022<\260L\177;\354\033\334;\366\377c\273Q\375S<\331\266\307;!\262\260\273JU\341;(\350\031\273T\270n\273M\204\020\272\235iQ\273\245\373\005\274\"r\022\274\"\325u\274\346&%<\256S|\274I\263)\2730\302\026:\357\354\026<\360\333\'<\220\037\220;t\215\242<I\246\215;\374&\320;%\213\337\273\001\225\2579\017\013j<\322\225\3737\372\267\3738\013S\025\2747\254\315\273\235\353s<-c=\273BK\223;&\312\211\274\006\215\1779$N\205<\013/\300:3\357\202\273\374\377\343:at\340\272o\212\037\274\"2\253\2720v\023<\n.+;\353\315\273;Y\037\017\273\253`\376:\335\2058\274\270\032\213\273\312VD<~\005\203;d\365\247:\364\302\223;\235.8;\243\216\2529:k\033\273\351\362\246\273\331\343\373;\030\353\271;\365Y:;\327\245\332:\346\322[;\221\021n;1\225\020\274e\321\257;\374b\224;O\276\006\274F*\310; +\354\273b\3707\2749\351\271\274\276\363\262\272\223w\031\273\017\232\347\272rp\227\273\260V\352\273\374\210u;\213\234Q<i\245\276\270\364\320\311\274\035*B\274\017\357:;`\363\004<)\376;\273?\375\301;\177\005\2028.2n<\323\302\024<\340\304\245;\320\323@;\276x\304:\257\260\026\274`:c;\344\355\202\273l\353\236;\305\030\027<D\325\266;s\003\210:\223\322\013:&YJ<\306\243_;\301\236\257:(\314~;<[\353:\020\360s;\231\210,\273\033\311\001<\333\333\360;{N\263\271\256K\305\273\262\224\341\271n\014\371;\323\317\207\273\244\t\212;N}b\273\244\\\204;\373T\337:\355\202<\273{n\273;\312p\332;\251\321B;\337\214A\273\317+\014\272\346\355\356;\203R\177;\276O\257\272\261F\"<R/s;\364\tI\274J\267Y\273\341n\037<DR\3319\340\307\316\272\321x\006<\367\302\217:\301\256\227\274l\270\007\273\\&U<i+\035\274iE\224;]\253\234\274\356\226\006\274\177b?\275\000\365\303\272\336n\034=\025\025\217:\360\304\016<+\374\225\273\037\342\262\274\006,\262\273\271\255\343\272G\340h\274\017\343\373\274\345{T\273\277\222-;\030\204m\274\3706-<\010\337\251<\304v\213\273\035HN\274\023?&<\222\276\034<\016\357\335\274\343\346R\274\373\357\250\272\252n\273;\356>e<\251\017\032<\010<\366;\222\362K<N\272\207;z{;\271\225\306b\272n\336\004:j\320_\274\247\370\034\274\267b\\\274[\343\205\272\253@c\271\320\230\310\274\366\004b\2741\343?\274\211\346\356\271\317I\307;KY\242<\257\262~<\032\277\376;7\363\342:\226\031\203<\336\227\217\271\n\350\007\273\351\022\216\274l\316p\273i\221\256;q2\222\271d\366w<\314\206\330;\315V1<\242\345\213;\230\325\304\273\370W\215\273d\366\213\273v2\255<\t\247\233\272O\241\207;d0\233\27247\277\2731\252\374;\362D\253\273\021\254\275\274XqB\274\261\031!:S\221\215\273\362\242o<\\B/:\334\345W\274\203/\003\274\035K\333:4\277\227\274\376}\204\272\373\252\3069\017Y\225;\365\356\377\272\307\216\264\273\330,\311<[!:<\316BX<\252\261\323\273\307\230\207;\363l\323;\3257\021;T?:<\272\237*:\352\274A:|\230A:m\314\007\273\345\323!<p>Z;\017\252\203\273\356\304\374\273\363\207o<\305\246\0309\227\230\312\272\234\251\302:\216\340\2479\373\332\3449\245>\264\273\004\335w<\035\245\';\303\307i\272\257q\203;U\027!;,\265\3219\306\3141<zr\232\273eU\346:\332\036\206;W\t+\274\177_\357;\364 g;\2454\246:\203\371\310;\0372\227\273\243\335l\273\177y[;&\0321\271>k\034;\001F\310;\017D\22295\300\211<;\250\021<\026\353\371\272D\t\201\273\317|\010\273\255a\014\273\265[\005\274\222G\313\271K6\206\274\256>\246\272M\245_<\317\035\003:\301!\370\272\301b,\274\211\023=<\034\263\311\273\004i=\273\013\306\'\273\344\211\235<\336k.<\255x\226;\033.@:\350\202f;\036:\274\272\016P\244;\000>\245;U\262\200;\313,|\271\372/_\273\203\210\304:\361N\036\273<\355\035;\3349\304;\353\200^;\177\240l\272\334:\022\272np\016;vJ\000;\023I\336\272\377\203\225\272_u\022<\224\344\002:\365\262[;\231\230\214:\2618I\273t\037\370\272\316\243\230;\352\325\340;I>n:\333C\211;y{v;=\213\323\273A\207\262\273Vy\267;\353d\016;%\243\007\271\336Y\311;{0\362:\260\312-\274\t\316{\272\'Uv<\216\300\276:\232\017]\272\031\253P;rJ\005<C8<;\324#\216\272\335\373\212\272\203[\252;\344~\212;\322\303U\273\211C\314;\275\037\036;\321\302L;}2_\274n\365=\274\203\232M\273\371T(<\317\244\336;(\\\n\274\200l\261\273\".z<\325\250\222\273\331q\304\273\264\030Z;\346\373\2709X\230u\274\375\236\355:jl\254\2735\244]\274A\370;\274\'x\r<;0\n;o1J<$\202\312\272;\373y\272\t\361\031<\210\222\307;Yo\022\272\316fo:\003?(<\360\003?\272\035s\217;\034[\0359p\023\003:\274\321\373:e\\\006\273,Y\003\273\344\3006\2730\363\025\274|\227\3249\320,(\273A\234\270;\360p\033\274\333\267&;\304\226}<\225\201k;\006dQ\2704W\370;\302\377\267;\3208\216;\305{;;\001\361l:\272p\300\273\240\251\257\273\306\366\002\274\317\272\234;C\301B:\201;\377;\t\312\365\273m\316\233\271\220\301\020\273hl\261\273\326\025\257\273\036B\001<\226^\225;\267*\243\273\332?Z\274O\206\3237\254\022Z:\241\262W;v\344\275;\374\300\006<-\021R\274\212-\026\274\343\251\373\273c\005\032\274%\307\203\272\177\205\261\273\260\377\250;\226\302*\274/\344\010\273\373\315O<\204\nR\274\274(r\273\216\335[8as\333:\243\351D<VC\3469\346|(\274\305Kd\273D\nO;\366B><0\334\035<\263\213\024<\226qJ<\206\265q;\213\315\034\271\230\200><\217\305\342\273\017\343\202\274vlR\273;\335+;E\365\265\273e\201\037\271B.\353\273\227N_<\024LT;\202@\031<\025\232/;\225\364\200\273)\347=\273\365\227\212\274F\303\212\273\013O/\274RM\304\272\224*\250\274\0163\027\274r~\370\274\003P\207\274G\302-\275\317\330;;\205Qj\274e0\275<_\210\213<\267\266\202<H\276\241\273\204@6;\004*\r\2750N\236\274\020M\372\272:yw<v\250\232<\367\240\000\273\2439d\273\023\323\356<\274?\343;aa#<1j\253\273\353R\316\274\224\032\263\274X\261\356<\301^/\272/\221\306\274D\024\003\274\276\320X<\334\017Z<\341\246t<\364\000\210;\271</\274)\364\307;V\342\304\274559\275#7\202;\002\330\213<N\221\300<\017\372z\274\275\245:\273hk\216\274/\350\303\274\347\035\204\273\337=\311<\232^\214<\003\r\200;w`\313<\303)\223;\374[U<\206<\367\273\232\351\203<X\256&\274\217\213\346;!N\201\272q\211q\273\374\271\237<\240+F<W\360I\274\201\203\260:\245y\016=\252\274\310:\221\337z\274c~\n\275\260.7<\003\022a<\020\237J\2731W\220;\212]L<\332\261\327\274\005\364\241:\031\225\232<\210\241\213\273\353gB\272\232`\r\274\210\006\230\274\327\246h\273\3127\254\274\247\257\033\273S\306\177\274\322\252\301\273\322n\301<B+\261;vR\323<\343\000S<\003\250?;\326\211\351;\211\204H:41\353\271\201\016c\274\263-\004<\370!E\274\311L`\273\320\022X\2744\225I;r\n\211\273=\223\020\274z\365\200<0\246\372;\3313\036<]?\020<\354\356D;\304\343\016\274<\rF;\254\361\2129(\233\177<\027\345:\273\024e\244:\324\333\261:^A\205:j\030.<\242\265\330\272\372\030\337:\200\331\265\273a\307\370;\346\245\262;F\241\002<US$;N\202T8\352$U\273\277\262\330;\022\003\230:\026b\206\273AS\263\273\217\314Y;\212\245\022<\317\375\3379\236\037L<&:\266\271\213k\326:\244\246M;\013Y\377:\"\034\347\273\017Q\356;\"\\\023\273\351\210\233\270\037\271\226;\337I\304;\025i\266:\212\224@\273\362\025\235:\375\221\227;\027k,\272G\272\210;\335m\222\272S\357\016;\000`\245\272m\304\227\273irf\274\023g\240;\\g\"<\0355\241;7B\376\271\364$e<\013\203s;;\351\\;\205\204\225\272\256\233b;\206vq\273WE`9\332\034\001\274\216\014\243:_\232`<\363\266 :m\014\316\273\317\345|\273M\031\243;Z\005\301;\017\370\001\273ya\035\274?U5\272J\370\003\274$\305k\274\235\215M;\203\201\007<:\333\212\273`\364N\273v\375/<\253d0\271(\235\250\2730n\340:WaH\274\242\200\251;\313RL<\262O\265;N\213\203;\301<\\\273\024\001\277;\344\222\213\273f\236r\273\035\342X\274\311`\247\273\004+\347\273\306\204a\273I\214\213;2/\037\273\024\276 \274\004\346\277\2737$4\273\352\274d\274\301o\036\274\324\262\375;G\270\351;\037.\252\273\301\361\252;\005\211\036\2710\025\252;o\213\231\273\034\276\336\273z\010\210\2744\331#\274\026\304\264;\010\237\242<2m\r<\n\007\3239\025\205\277\272w\n\3069\335=\323\270\323\340\304;\020O\247;\0373\024;\244\251\035<\000\311\227\272@\312X\274g*\371\272}be\274\232\032);\253\324\006<\273:y\273Sc\314<G\037j;*\221\315;:rr\272Jp@\274\345\013\250\272\314\311y\273\342\241\233\273\016U\223\273a\260O<\351p\333:\\\205_;\tX\010<\271\210\252;\330a\375\273\252\220;\274\232\216\374\273/\212\217\272z\323u<)\203m<\373\351\274;\374/\236\273D\227\264\272Q \035\274\327\303g<\374\306\017<\223X\225;JHG\272\371\230\331:)\320\210\271\264\306\2109\002\n\n;\264\020\2729\032E\256;P\252U;\3008Q\272\306x8:\206\275Q\273\201\000\267\273\247\241\027;\r\347W;\372\273\347\272\007m?:db\341\273_\"\205;\\M\337\272\314\257q:\334\rp<\323\366\371;L\3064\273\353\202\202:\276h\027;/\3652<\303d&<\'\264\206\273X\324\270\272g\237\262:0\240+\273\324;\351\272F#|\273\377:\253\273\2120\032\274\016\221\321;om+\273@\204\233;\230Z\254\2720i0;\303\360\363;L\270\";N\262\220\273\351\312\347\273\376\324\373\273E\364\224:VM\206\273\277]|;\307\3572<\372 \235;\373\265!\272^\nW\274\347z\311\273G\377B\274\304(q\272hk^:=\233\330\272\212\\\224:p\007\375;\350\317\315\272\034,\206\273Q\350\013<V\312\236\274\354\212 \274\202*B\273[\364\212\271\273n\312\272\374\2420\274\037\361\321\273-\233Z:\002\343\211<\013G\235;\2533U;@\2577<\333\263\353\271\020\315\306\272\233\300\3068\375\326\031<\252v\r:\302\032\240\272\025\356\204\273\003\340\3058\270A1;\243*t;\364b\312:J\263\354;:1\374:k\306\311\273\220\262\246\273\026\366\004<\233\304-<2\017\246\272(\362\23495\025O\274\371\365\203\273\243\212F\273\217\021\256\27327\256\273\244<\366;k\013\351<\033\321\225:\233\3074;\230\303*\273\240\253 \273 \205W;$A\250;\233(\315:\321@V\272\003\242\2767>\274\210:=I\302;[\241\310:\371 \222;\177\030Z;\036\210\362:X\326>;%~\2728Xy8;\256\205\013\272i\2417\273R\276\363;\200\202\314\2735\263\272;\310s\2717,P\277\272\316]\305;\000\320\2549\366\034\372:\353\353\235:\266\316\345\271\277\342\211\270:O\256;^}\320\273\232l\021\274\300\234\263;\313\325\367\273Th\213\273\275>6<\362\330\207;\330f\024\273g\035\263;\336\242:<\177M\006;*\236\305:H\330N;\227eK;\222\301\353\271\210\333\021:K\336\230;_\204\236\273?\024\247\273\241v\033\273\202\341\337;\311\261\305\273_\263\200;\311\263J\272\r\376\236;\021\356e\272\212{\200;\245\000\263\272\262\230v;E\352\350\273\315\214\2638\302p\310\273\322g\313;\204\022\310;qw\037<\345\034\276;\333kg\273\n\234\201\274\3536\253;\367k3\274\244\255\270\273\345i\220;\026\355\241;&w\031<\241\215~;@k\225;~I6\273\3562\300;\177}\257:\\\344\230\273\201\030\243;\362\330$<\0169\223;\236\'f;\\b\217;\374l\253\267\010\360`:\001.\273:\266?\007<\330\300\324;\205\014\266\272\336y\277;-f8;+\3676:\tV*\273#\030!\274g\356\246\272.\026+<W\324\025\274q!\226;\251\344\035\274\257Y=\273\203\277*\271E\330;\274\312\344W\271\354Un< \236^;\257\375\013\274+]\261\273\315\314\227;DN\310:\247\361\214;\242\206\336;\324\302\352\273v\315\270\274D\351>\274\364\2400\274i\230\'<j\274\001<\273\027\006<u\237\223\273\266\360\332;\320m\366\272$\264\310\272\236\324\n<\343\006\006<Z<\333;\027+\336:\331\240\030<\341\221\230;7uV;P{%\273\026I\035;~\024\215;ij?:P\223F;k\\\355\271@\343<\273\017\007\236\272\323\326\245\271\204\350x\270jg\033:j\353\377:\334h\n<;\234\231:\250\337\2438p\302\214\273\247\335\253\273/\\a;Y2\311\272\243\374+\273\314\202\020;H\266\257\272\313\220p\274\326Q\177\273~\275\222\2731\206\355:\272]v\273\353\304\242;\306N\201;\345\016|\270\0275]\274\210Z\021\273#R\032;\255\016(\273X\376\231;\003\003\224;wj\217;\002r\233\272\232\270\014<\372\241\010<w\273\020;\210b%9L\366\032:\007\006\002<\021<\006;\363\341\016<\030Pc;\022\263)\274t,\353\273\336\'\264\272\347{/\273t\307\000;c\235\232\273\225t\267\273I\024\311;\257&n\272z\006\300\273W\326\206;I\r\231\273\320\177\031\274\212\237\214\273\307&\227<\307c\355;\372d`;IW\310\272\371\311\020<\320s\276;)\022\016<\177\347\273:O\252\242;\374\035\223\273D\366H;\204\354\201;8\301\036;\313\213\223;\303\240$\273\010\027\033\2731\306\250\271v\234N;\265\333\n\273q\235\241;\362\031\361\273s5\203;\335X\216;*#\004\273k\344\207;\001\215\366;\013}\233;\2011\210\272\276\350 \273\237\201\027\273^c\224;h\301\234;_\273\267:\370X\2079!\367\250:\3277\202:\001\367!\273~3\260\273\354\207\266\272\270Y\007\273\210\210\017<\253st;\345\2642\273\367\200\016\274\327p\313\273\354\366\315\2717\200\316;\313\365E\273\257\206\006<\317\306\275;\201\373\32396\322\272;\022\370\022;\022\277\236;\352\252\202:LZ\000\272>\333_;+\000\345\273\373\024\'\272z\361\005\273\2655\204;4\231\0308\340\037\035:r,\276:\361\033\371\273n\006\202;r&\350;\253\246=\272\022G2\273(\030\214:\321\363\270:M\234\016\274\024\022\203\274\267\362\020\274+\305`;\267-\344\273\033\324\t<\353o\262\273#\242y\274\367}\000\273\333\356\340\272\232a1<r\202X<\205Ct;~\223\033<\226\343\200;!\014N:-t\356;\226\313\035;\32087\273\360\2714:TK!;\030(\236;\271\311\215\272\262\333b9 \333\026;\341\222\216;P\330\376\2732\342l<Nd\337:\205\347\026;\022\221\0249\023>\t\273c\007\252\272\3301\201\273]\232\236\273\256\005\255\273\262\240\331;\027K\312;\2232k\273\023\343-;t\312\020\272\337\351\362\273tF$;\347\267\027\273\256\302\311\273!\320\265;\336\351\252;i\304\333;\"\003\223;\354\235\347\271\006\250\327\273\234\267a\274\202\\^\272\311\236\030<\240\3352\274\033\217R\274\211\2524;\177l\210;\tgJ<\270\177c;\245C.;H\214\262;\272\265\256\272\250o_:\225[\326\273)\003\2268\252p\302;\356$\002;+%\323:\333z\0249/\242!\273\357]b\273\036\363\3039\312\251b;\3038\344\272\361\260\013<]\210\216;c\255\213\273Ke\025\274\033\270\013:\024u\202;\333fX\273\217\177\264;\376\343h;\033\242d;\\5\317;s\273\2779\007PQ;\366\001 ;H\307\036:\"H#9\230q\267:\2137\253;\025\024\324;Q#\007;z\034\217\272\227\3407\273"
      }
    }
  }
}
node {
  name: "linear/linear/reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape"
  op: "Reshape"
  input: "Const_1"
  input: "linear/linear/reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Assign"
  op: "Assign"
  input: "linear/gdp_change/weight/part_0"
  input: "linear/gdp_change/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/read"
  op: "Identity"
  input: "linear/gdp_change/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/gdp_change/weight"
  op: "Identity"
  input: "linear/gdp_change/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/gdp_change/matmul"
  op: "MatMul"
  input: "linear/linear/reshape"
  input: "linear/gdp_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_1"
  op: "Reshape"
  input: "Const"
  input: "linear/linear/reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Assign"
  op: "Assign"
  input: "linear/gdp_high/weight/part_0"
  input: "linear/gdp_high/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/read"
  op: "Identity"
  input: "linear/gdp_high/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/gdp_high/weight"
  op: "Identity"
  input: "linear/gdp_high/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/gdp_high/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_1"
  input: "linear/gdp_high/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_2/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_2"
  op: "Reshape"
  input: "Const_5"
  input: "linear/linear/reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Assign"
  op: "Assign"
  input: "linear/manufacture_durable_orders_change/weight/part_0"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/read"
  op: "Identity"
  input: "linear/manufacture_durable_orders_change/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight"
  op: "Identity"
  input: "linear/manufacture_durable_orders_change/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/manufacture_durable_orders_change/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_2"
  input: "linear/manufacture_durable_orders_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_3/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_3"
  op: "Reshape"
  input: "Const_4"
  input: "linear/linear/reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Assign"
  op: "Assign"
  input: "linear/manufacture_durable_orders_high/weight/part_0"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/read"
  op: "Identity"
  input: "linear/manufacture_durable_orders_high/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight"
  op: "Identity"
  input: "linear/manufacture_durable_orders_high/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/manufacture_durable_orders_high/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_3"
  input: "linear/manufacture_durable_orders_high/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_4/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_4"
  op: "Reshape"
  input: "Const_3"
  input: "linear/linear/reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Assign"
  op: "Assign"
  input: "linear/manufacture_orders_change/weight/part_0"
  input: "linear/manufacture_orders_change/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/read"
  op: "Identity"
  input: "linear/manufacture_orders_change/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight"
  op: "Identity"
  input: "linear/manufacture_orders_change/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/manufacture_orders_change/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_4"
  input: "linear/manufacture_orders_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_5/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_5"
  op: "Reshape"
  input: "Const_2"
  input: "linear/linear/reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Assign"
  op: "Assign"
  input: "linear/manufacture_orders_high/weight/part_0"
  input: "linear/manufacture_orders_high/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/read"
  op: "Identity"
  input: "linear/manufacture_orders_high/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight"
  op: "Identity"
  input: "linear/manufacture_orders_high/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/manufacture_orders_high/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_5"
  input: "linear/manufacture_orders_high/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_6/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_6"
  op: "Reshape"
  input: "Const_10"
  input: "linear/linear/reshape_6/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_average_10/weight/part_0"
  input: "linear/spy_average_10/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_average_10/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_10/weight"
  op: "Identity"
  input: "linear/spy_average_10/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_average_10/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_6"
  input: "linear/spy_average_10/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_7/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_7"
  op: "Reshape"
  input: "Const_11"
  input: "linear/linear/reshape_7/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_average_20/weight/part_0"
  input: "linear/spy_average_20/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_average_20/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_20/weight"
  op: "Identity"
  input: "linear/spy_average_20/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_average_20/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_7"
  input: "linear/spy_average_20/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_8/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_8"
  op: "Reshape"
  input: "Const_12"
  input: "linear/linear/reshape_8/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_average_40/weight/part_0"
  input: "linear/spy_average_40/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_average_40/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_40/weight"
  op: "Identity"
  input: "linear/spy_average_40/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_average_40/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_8"
  input: "linear/spy_average_40/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_9/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_9"
  op: "Reshape"
  input: "Const_13"
  input: "linear/linear/reshape_9/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_average_80/weight/part_0"
  input: "linear/spy_average_80/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_average_80/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_average_80/weight"
  op: "Identity"
  input: "linear/spy_average_80/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_average_80/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_9"
  input: "linear/spy_average_80/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_10/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_10"
  op: "Reshape"
  input: "Const_6"
  input: "linear/linear/reshape_10/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_change/weight/part_0"
  input: "linear/spy_change/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_change/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_change/weight"
  op: "Identity"
  input: "linear/spy_change/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_change/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_10"
  input: "linear/spy_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_11/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_11"
  op: "Reshape"
  input: "Const_8"
  input: "linear/linear/reshape_11/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_rsi_10/weight/part_0"
  input: "linear/spy_rsi_10/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_rsi_10/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight"
  op: "Identity"
  input: "linear/spy_rsi_10/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_rsi_10/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_11"
  input: "linear/spy_rsi_10/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_12/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_12"
  op: "Reshape"
  input: "Const_9"
  input: "linear/linear/reshape_12/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_rsi_14/weight/part_0"
  input: "linear/spy_rsi_14/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_rsi_14/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight"
  op: "Identity"
  input: "linear/spy_rsi_14/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_rsi_14/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_12"
  input: "linear/spy_rsi_14/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/reshape_13/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear/reshape_13"
  op: "Reshape"
  input: "Const_7"
  input: "linear/linear/reshape_13/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Assign"
  op: "Assign"
  input: "linear/spy_rsi_3/weight/part_0"
  input: "linear/spy_rsi_3/weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/read"
  op: "Identity"
  input: "linear/spy_rsi_3/weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight"
  op: "Identity"
  input: "linear/spy_rsi_3/weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/spy_rsi_3/matmul"
  op: "MatMul"
  input: "linear/linear/reshape_13"
  input: "linear/spy_rsi_3/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear/AddN"
  op: "AddN"
  input: "linear/linear/gdp_change/matmul"
  input: "linear/linear/gdp_high/matmul"
  input: "linear/linear/manufacture_durable_orders_change/matmul"
  input: "linear/linear/manufacture_durable_orders_high/matmul"
  input: "linear/linear/manufacture_orders_change/matmul"
  input: "linear/linear/manufacture_orders_high/matmul"
  input: "linear/linear/spy_average_10/matmul"
  input: "linear/linear/spy_average_20/matmul"
  input: "linear/linear/spy_average_40/matmul"
  input: "linear/linear/spy_average_80/matmul"
  input: "linear/linear/spy_change/matmul"
  input: "linear/linear/spy_rsi_10/matmul"
  input: "linear/linear/spy_rsi_14/matmul"
  input: "linear/linear/spy_rsi_3/matmul"
  attr {
    key: "N"
    value {
      i: 14
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/bias_weight/part_0"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Assign"
  op: "Assign"
  input: "linear/bias_weight/part_0"
  input: "linear/bias_weight/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/bias_weight/part_0/read"
  op: "Identity"
  input: "linear/bias_weight/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/bias_weight"
  op: "Identity"
  input: "linear/bias_weight/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear/BiasAdd"
  op: "BiasAdd"
  input: "linear/linear/AddN"
  input: "linear/bias_weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "centered_bias_weight"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "centered_bias_weight/Assign"
  op: "Assign"
  input: "centered_bias_weight"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "centered_bias_weight/read"
  op: "Identity"
  input: "centered_bias_weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "centered_bias_weight/read"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "centered_bias_0"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "BiasAdd"
  op: "BiasAdd"
  input: "linear/linear/BiasAdd"
  input: "centered_bias_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1598
      }
    }
  }
}
node {
  name: "strided_slice/pack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/pack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/pack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/pack"
  input: "strided_slice/pack_1"
  input: "strided_slice/pack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Tile/multiples"
  op: "Pack"
  input: "strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Tile"
  op: "Tile"
  input: "centered_bias_weight/read"
  input: "Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Pack"
  input: "strided_slice"
  input: "Reshape_1/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "Tile"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "centered_bias/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "centered_bias/ExpandDims"
  op: "ExpandDims"
  input: "Const_14"
  input: "centered_bias/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "centered_bias/sub"
  op: "Sub"
  input: "Reshape_1"
  input: "centered_bias/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "centered_bias/Square"
  op: "Square"
  input: "centered_bias/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "centered_bias/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "centered_bias/training_loss"
  op: "Mean"
  input: "centered_bias/Square"
  input: "centered_bias/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/centered_bias/training_loss_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Tile"
  op: "Tile"
  input: "gradients/centered_bias/training_loss_grad/Reshape"
  input: "gradients/centered_bias/training_loss_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Prod"
  op: "Prod"
  input: "gradients/centered_bias/training_loss_grad/Shape"
  input: "gradients/centered_bias/training_loss_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/centered_bias/training_loss_grad/Shape_1"
  input: "gradients/centered_bias/training_loss_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Maximum"
  op: "Maximum"
  input: "gradients/centered_bias/training_loss_grad/Prod_1"
  input: "gradients/centered_bias/training_loss_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/floordiv"
  op: "Div"
  input: "gradients/centered_bias/training_loss_grad/Prod"
  input: "gradients/centered_bias/training_loss_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/Cast"
  op: "Cast"
  input: "gradients/centered_bias/training_loss_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/training_loss_grad/truediv"
  op: "Div"
  input: "gradients/centered_bias/training_loss_grad/Tile"
  input: "gradients/centered_bias/training_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/centered_bias/training_loss_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/centered_bias/Square_grad/mul"
  op: "Mul"
  input: "gradients/centered_bias/Square_grad/mul/x"
  input: "centered_bias/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/centered_bias/training_loss_grad/truediv"
  input: "gradients/centered_bias/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Shape"
  op: "Shape"
  input: "Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/centered_bias/sub_grad/Shape"
  input: "gradients/centered_bias/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Sum"
  op: "Sum"
  input: "gradients/centered_bias/Square_grad/mul_1"
  input: "gradients/centered_bias/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/centered_bias/sub_grad/Sum"
  input: "gradients/centered_bias/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/centered_bias/Square_grad/mul_1"
  input: "gradients/centered_bias/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Neg"
  op: "Neg"
  input: "gradients/centered_bias/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/centered_bias/sub_grad/Neg"
  input: "gradients/centered_bias/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/centered_bias/sub_grad/Reshape"
  input: "^gradients/centered_bias/sub_grad/Reshape_1"
}
node {
  name: "gradients/centered_bias/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/centered_bias/sub_grad/Reshape"
  input: "^gradients/centered_bias/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/centered_bias/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/centered_bias/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/centered_bias/sub_grad/Reshape_1"
  input: "^gradients/centered_bias/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/centered_bias/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Reshape_1_grad/Shape"
  op: "Shape"
  input: "Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/centered_bias/sub_grad/tuple/control_dependency"
  input: "gradients/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/pack"
  op: "Pack"
  input: "Tile/multiples"
  input: "gradients/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "gradients/Tile_grad/pack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/sub"
  op: "Sub"
  input: "gradients/Tile_grad/transpose/Rank"
  input: "gradients/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/Range"
  op: "Range"
  input: "gradients/Tile_grad/transpose/Range/start"
  input: "gradients/Tile_grad/transpose/Rank"
  input: "gradients/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "gradients/Tile_grad/transpose/sub"
  input: "gradients/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose"
  op: "Transpose"
  input: "gradients/Tile_grad/pack"
  input: "gradients/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Reshape"
  op: "Reshape"
  input: "gradients/Tile_grad/transpose"
  input: "gradients/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/range"
  op: "Range"
  input: "gradients/Tile_grad/range/start"
  input: "gradients/Tile_grad/Size"
  input: "gradients/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Reshape_1_grad/Reshape"
  input: "gradients/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Sum"
  op: "Sum"
  input: "gradients/Tile_grad/Reshape_1"
  input: "gradients/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_15"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "centered_bias_weight/Adagrad"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "centered_bias_weight/Adagrad/Assign"
  op: "Assign"
  input: "centered_bias_weight/Adagrad"
  input: "Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "centered_bias_weight/Adagrad/read"
  op: "Identity"
  input: "centered_bias_weight/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Adagrad/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Adagrad/update_centered_bias_weight/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "centered_bias_weight"
  input: "centered_bias_weight/Adagrad"
  input: "Adagrad/learning_rate"
  input: "gradients/Tile_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Adagrad"
  op: "NoOp"
  input: "^Adagrad/update_centered_bias_weight/ApplyAdagrad"
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  input: "^Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "Const_14"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "BiasAdd"
  input: "ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Square"
  op: "Square"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_16"
  op: "Const"
  input: "^Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training_loss"
  op: "Mean"
  input: "Square"
  input: "Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ExpandDims_1/dim"
  op: "Const"
  input: "^Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ExpandDims_1"
  op: "ExpandDims"
  input: "Const_14"
  input: "ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sub_1"
  op: "Sub"
  input: "BiasAdd"
  input: "ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Square_1"
  op: "Square"
  input: "sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_17"
  op: "Const"
  input: "^Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss"
  op: "Mean"
  input: "Square_1"
  input: "Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients_1/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients_1/Fill"
  op: "Fill"
  input: "gradients_1/Shape"
  input: "gradients_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/Fill"
  input: "gradients_1/training_loss_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Tile"
  op: "Tile"
  input: "gradients_1/training_loss_grad/Reshape"
  input: "gradients_1/training_loss_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Prod"
  op: "Prod"
  input: "gradients_1/training_loss_grad/Shape"
  input: "gradients_1/training_loss_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients_1/training_loss_grad/Shape_1"
  input: "gradients_1/training_loss_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Maximum"
  op: "Maximum"
  input: "gradients_1/training_loss_grad/Prod_1"
  input: "gradients_1/training_loss_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/floordiv"
  op: "Div"
  input: "gradients_1/training_loss_grad/Prod"
  input: "gradients_1/training_loss_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/Cast"
  op: "Cast"
  input: "gradients_1/training_loss_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients_1/training_loss_grad/truediv"
  op: "Div"
  input: "gradients_1/training_loss_grad/Tile"
  input: "gradients_1/training_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/Square_grad/mul/x"
  op: "Const"
  input: "^gradients_1/training_loss_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients_1/Square_grad/mul"
  op: "Mul"
  input: "gradients_1/Square_grad/mul/x"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/Square_grad/mul_1"
  op: "Mul"
  input: "gradients_1/training_loss_grad/truediv"
  input: "gradients_1/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/sub_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ">\006\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/sub_grad/Shape"
  input: "gradients_1/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/sub_grad/Sum"
  op: "Sum"
  input: "gradients_1/Square_grad/mul_1"
  input: "gradients_1/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/sub_grad/Sum"
  input: "gradients_1/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/Square_grad/mul_1"
  input: "gradients_1/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/sub_grad/Neg"
  op: "Neg"
  input: "gradients_1/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients_1/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/sub_grad/Neg"
  input: "gradients_1/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients_1/linear/linear/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients_1/linear/linear/gdp_change/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/gdp_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/gdp_change/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/gdp_high/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/gdp_high/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/gdp_high/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_1"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_durable_orders_change/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/manufacture_durable_orders_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_durable_orders_change/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_2"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_durable_orders_high/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/manufacture_durable_orders_high/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_durable_orders_high/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_3"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_orders_change/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/manufacture_orders_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_orders_change/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_4"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_orders_high/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/manufacture_orders_high/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/manufacture_orders_high/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_5"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_10/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_average_10/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_10/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_6"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_20/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_average_20/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_20/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_7"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_40/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_average_40/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_40/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_8"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_80/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_average_80/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_average_80/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_9"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_change/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_change/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_change/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_10"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_rsi_10/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_rsi_10/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_rsi_10/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_11"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_rsi_14/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_rsi_14/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_rsi_14/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_12"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_rsi_3/matmul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/sub_grad/Reshape"
  input: "linear/spy_rsi_3/weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1598
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/linear/linear/spy_rsi_3/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear/reshape_13"
  input: "gradients_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Const_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/gdp_change/weight/part_0/Ftrl"
  input: "Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/gdp_change/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/gdp_change/weight/part_0/Ftrl_1"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/gdp_change/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/gdp_change/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/gdp_high/weight/part_0/Ftrl"
  input: "Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/gdp_high/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/gdp_high/weight/part_0/Ftrl_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/gdp_high/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/gdp_high/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
  input: "Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_21"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
  input: "Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_22"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl"
  input: "Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_orders_change/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_23"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl"
  input: "Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/manufacture_orders_high/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_24"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_average_10/weight/part_0/Ftrl"
  input: "Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_average_10/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_average_10/weight/part_0/Ftrl_1"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_10/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_average_10/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_25"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_average_20/weight/part_0/Ftrl"
  input: "Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_average_20/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_average_20/weight/part_0/Ftrl_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_20/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_average_20/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_26"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_average_40/weight/part_0/Ftrl"
  input: "Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_average_40/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_average_40/weight/part_0/Ftrl_1"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_40/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_average_40/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_27"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_average_80/weight/part_0/Ftrl"
  input: "Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_average_80/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_average_80/weight/part_0/Ftrl_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_average_80/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_average_80/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_28"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_change/weight/part_0/Ftrl"
  input: "Const_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_change/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_change/weight/part_0/Ftrl_1"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_change/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_change/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_29"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl"
  input: "Const_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_10/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_30"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl"
  input: "Const_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
  input: "zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_14/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_31"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl"
  input: "Const_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
  input: "zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/spy_rsi_3/weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_32"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Ftrl"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Ftrl/Assign"
  op: "Assign"
  input: "linear/bias_weight/part_0/Ftrl"
  input: "Const_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Ftrl/read"
  op: "Identity"
  input: "linear/bias_weight/part_0/Ftrl"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Ftrl_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Ftrl_1/Assign"
  op: "Assign"
  input: "linear/bias_weight/part_0/Ftrl_1"
  input: "zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear/bias_weight/part_0/Ftrl_1/read"
  op: "Identity"
  input: "linear/bias_weight/part_0/Ftrl_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Ftrl/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Ftrl/l1_regularization_strength"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Ftrl/l2_regularization_strength"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Ftrl/learning_rate_power"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "Ftrl/update_linear/gdp_change/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/gdp_change/weight/part_0"
  input: "linear/gdp_change/weight/part_0/Ftrl"
  input: "linear/gdp_change/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/gdp_change/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/gdp_high/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/gdp_high/weight/part_0"
  input: "linear/gdp_high/weight/part_0/Ftrl"
  input: "linear/gdp_high/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/gdp_high/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/manufacture_durable_orders_change/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/manufacture_durable_orders_change/weight/part_0"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/manufacture_durable_orders_change/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/manufacture_durable_orders_high/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/manufacture_durable_orders_high/weight/part_0"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/manufacture_durable_orders_high/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/manufacture_orders_change/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/manufacture_orders_change/weight/part_0"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/manufacture_orders_change/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/manufacture_orders_high/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/manufacture_orders_high/weight/part_0"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/manufacture_orders_high/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_average_10/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_average_10/weight/part_0"
  input: "linear/spy_average_10/weight/part_0/Ftrl"
  input: "linear/spy_average_10/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_average_10/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_average_20/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_average_20/weight/part_0"
  input: "linear/spy_average_20/weight/part_0/Ftrl"
  input: "linear/spy_average_20/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_average_20/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_average_40/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_average_40/weight/part_0"
  input: "linear/spy_average_40/weight/part_0/Ftrl"
  input: "linear/spy_average_40/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_average_40/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_average_80/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_average_80/weight/part_0"
  input: "linear/spy_average_80/weight/part_0/Ftrl"
  input: "linear/spy_average_80/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_average_80/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_change/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_change/weight/part_0"
  input: "linear/spy_change/weight/part_0/Ftrl"
  input: "linear/spy_change/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_change/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_rsi_10/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_rsi_10/weight/part_0"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_rsi_10/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_rsi_14/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_rsi_14/weight/part_0"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_rsi_14/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/spy_rsi_3/weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/spy_rsi_3/weight/part_0"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/spy_rsi_3/matmul_grad/MatMul_1"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl/update_linear/bias_weight/part_0/ApplyFtrl"
  op: "ApplyFtrl"
  input: "linear/bias_weight/part_0"
  input: "linear/bias_weight/part_0/Ftrl"
  input: "linear/bias_weight/part_0/Ftrl_1"
  input: "gradients_1/linear/linear/BiasAdd_grad/BiasAddGrad"
  input: "Ftrl/learning_rate"
  input: "Ftrl/l1_regularization_strength"
  input: "Ftrl/l2_regularization_strength"
  input: "Ftrl/learning_rate_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Ftrl"
  op: "NoOp"
  input: "^Ftrl/update_linear/gdp_change/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/gdp_high/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/manufacture_durable_orders_change/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/manufacture_durable_orders_high/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/manufacture_orders_change/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/manufacture_orders_high/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_average_10/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_average_20/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_average_40/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_average_80/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_change/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_rsi_10/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_rsi_14/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/spy_rsi_3/weight/part_0/ApplyFtrl"
  input: "^Ftrl/update_linear/bias_weight/part_0/ApplyFtrl"
}
node {
  name: "AssignAdd/value"
  op: "Const"
  input: "^Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "AssignAdd"
  op: "AssignAdd"
  input: "global_step"
  input: "AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^linear/gdp_change/weight/part_0/Assign"
  input: "^linear/gdp_high/weight/part_0/Assign"
  input: "^linear/manufacture_durable_orders_change/weight/part_0/Assign"
  input: "^linear/manufacture_durable_orders_high/weight/part_0/Assign"
  input: "^linear/manufacture_orders_change/weight/part_0/Assign"
  input: "^linear/manufacture_orders_high/weight/part_0/Assign"
  input: "^linear/spy_average_10/weight/part_0/Assign"
  input: "^linear/spy_average_20/weight/part_0/Assign"
  input: "^linear/spy_average_40/weight/part_0/Assign"
  input: "^linear/spy_average_80/weight/part_0/Assign"
  input: "^linear/spy_change/weight/part_0/Assign"
  input: "^linear/spy_rsi_10/weight/part_0/Assign"
  input: "^linear/spy_rsi_14/weight/part_0/Assign"
  input: "^linear/spy_rsi_3/weight/part_0/Assign"
  input: "^linear/bias_weight/part_0/Assign"
  input: "^centered_bias_weight/Assign"
  input: "^centered_bias_weight/Adagrad/Assign"
  input: "^linear/gdp_change/weight/part_0/Ftrl/Assign"
  input: "^linear/gdp_change/weight/part_0/Ftrl_1/Assign"
  input: "^linear/gdp_high/weight/part_0/Ftrl/Assign"
  input: "^linear/gdp_high/weight/part_0/Ftrl_1/Assign"
  input: "^linear/manufacture_durable_orders_change/weight/part_0/Ftrl/Assign"
  input: "^linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1/Assign"
  input: "^linear/manufacture_durable_orders_high/weight/part_0/Ftrl/Assign"
  input: "^linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1/Assign"
  input: "^linear/manufacture_orders_change/weight/part_0/Ftrl/Assign"
  input: "^linear/manufacture_orders_change/weight/part_0/Ftrl_1/Assign"
  input: "^linear/manufacture_orders_high/weight/part_0/Ftrl/Assign"
  input: "^linear/manufacture_orders_high/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_average_10/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_average_10/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_average_20/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_average_20/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_average_40/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_average_40/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_average_80/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_average_80/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_change/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_change/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_rsi_10/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_rsi_10/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_rsi_14/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_rsi_14/weight/part_0/Ftrl_1/Assign"
  input: "^linear/spy_rsi_3/weight/part_0/Ftrl/Assign"
  input: "^linear/spy_rsi_3/weight/part_0/Ftrl_1/Assign"
  input: "^linear/bias_weight/part_0/Ftrl/Assign"
  input: "^linear/bias_weight/part_0/Ftrl_1/Assign"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "linear/gdp_change/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "linear/gdp_high/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "linear/manufacture_durable_orders_change/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "linear/manufacture_durable_orders_high/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "linear/manufacture_orders_change/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "linear/manufacture_orders_high/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "linear/spy_average_10/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "linear/spy_average_20/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "linear/spy_average_40/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "linear/spy_average_80/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "linear/spy_change/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_10/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_14/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_3/weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "linear/bias_weight/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "centered_bias_weight"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "centered_bias_weight/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "linear/gdp_change/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "linear/gdp_change/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "linear/gdp_high/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "linear/gdp_high/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "linear/spy_average_10/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "linear/spy_average_10/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "linear/spy_average_20/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "linear/spy_average_20/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "linear/spy_average_40/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "linear/spy_average_40/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "linear/spy_average_80/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "linear/spy_average_80/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "linear/spy_change/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "linear/spy_change/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "linear/bias_weight/part_0/Ftrl"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "linear/bias_weight/part_0/Ftrl_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/pack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  attr {
    key: "N"
    value {
      i: 48
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/pack"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: "global_step"
        string_val: "linear/gdp_change/weight/part_0"
        string_val: "linear/gdp_high/weight/part_0"
        string_val: "linear/manufacture_durable_orders_change/weight/part_0"
        string_val: "linear/manufacture_durable_orders_high/weight/part_0"
        string_val: "linear/manufacture_orders_change/weight/part_0"
        string_val: "linear/manufacture_orders_high/weight/part_0"
        string_val: "linear/spy_average_10/weight/part_0"
        string_val: "linear/spy_average_20/weight/part_0"
        string_val: "linear/spy_average_40/weight/part_0"
        string_val: "linear/spy_average_80/weight/part_0"
        string_val: "linear/spy_change/weight/part_0"
        string_val: "linear/spy_rsi_10/weight/part_0"
        string_val: "linear/spy_rsi_14/weight/part_0"
        string_val: "linear/spy_rsi_3/weight/part_0"
        string_val: "linear/bias_weight/part_0"
        string_val: "centered_bias_weight"
        string_val: "centered_bias_weight/Adagrad"
        string_val: "linear/gdp_change/weight/part_0/Ftrl"
        string_val: "linear/gdp_change/weight/part_0/Ftrl_1"
        string_val: "linear/gdp_high/weight/part_0/Ftrl"
        string_val: "linear/gdp_high/weight/part_0/Ftrl_1"
        string_val: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
        string_val: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
        string_val: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
        string_val: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
        string_val: "linear/manufacture_orders_change/weight/part_0/Ftrl"
        string_val: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
        string_val: "linear/manufacture_orders_high/weight/part_0/Ftrl"
        string_val: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
        string_val: "linear/spy_average_10/weight/part_0/Ftrl"
        string_val: "linear/spy_average_10/weight/part_0/Ftrl_1"
        string_val: "linear/spy_average_20/weight/part_0/Ftrl"
        string_val: "linear/spy_average_20/weight/part_0/Ftrl_1"
        string_val: "linear/spy_average_40/weight/part_0/Ftrl"
        string_val: "linear/spy_average_40/weight/part_0/Ftrl_1"
        string_val: "linear/spy_average_80/weight/part_0/Ftrl"
        string_val: "linear/spy_average_80/weight/part_0/Ftrl_1"
        string_val: "linear/spy_change/weight/part_0/Ftrl"
        string_val: "linear/spy_change/weight/part_0/Ftrl_1"
        string_val: "linear/spy_rsi_10/weight/part_0/Ftrl"
        string_val: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
        string_val: "linear/spy_rsi_14/weight/part_0/Ftrl"
        string_val: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
        string_val: "linear/spy_rsi_3/weight/part_0/Ftrl"
        string_val: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
        string_val: "linear/bias_weight/part_0/Ftrl"
        string_val: "linear/bias_weight/part_0/Ftrl_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/pack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/pack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/pack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/pack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/pack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/pack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "Concat"
  input: "report_uninitialized_variables/boolean_mask/concat/concat_dim"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init_1"
  input: "^init_all_tables"
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "ScalarSummary"
  input: "ScalarSummary_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/Const"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: "centered_bias_weight"
        string_val: "centered_bias_weight/Adagrad"
        string_val: "global_step"
        string_val: "linear/bias_weight"
        string_val: "linear/bias_weight/Ftrl"
        string_val: "linear/bias_weight/Ftrl_1"
        string_val: "linear/gdp_change/weight"
        string_val: "linear/gdp_change/weight/Ftrl"
        string_val: "linear/gdp_change/weight/Ftrl_1"
        string_val: "linear/gdp_high/weight"
        string_val: "linear/gdp_high/weight/Ftrl"
        string_val: "linear/gdp_high/weight/Ftrl_1"
        string_val: "linear/manufacture_durable_orders_change/weight"
        string_val: "linear/manufacture_durable_orders_change/weight/Ftrl"
        string_val: "linear/manufacture_durable_orders_change/weight/Ftrl_1"
        string_val: "linear/manufacture_durable_orders_high/weight"
        string_val: "linear/manufacture_durable_orders_high/weight/Ftrl"
        string_val: "linear/manufacture_durable_orders_high/weight/Ftrl_1"
        string_val: "linear/manufacture_orders_change/weight"
        string_val: "linear/manufacture_orders_change/weight/Ftrl"
        string_val: "linear/manufacture_orders_change/weight/Ftrl_1"
        string_val: "linear/manufacture_orders_high/weight"
        string_val: "linear/manufacture_orders_high/weight/Ftrl"
        string_val: "linear/manufacture_orders_high/weight/Ftrl_1"
        string_val: "linear/spy_average_10/weight"
        string_val: "linear/spy_average_10/weight/Ftrl"
        string_val: "linear/spy_average_10/weight/Ftrl_1"
        string_val: "linear/spy_average_20/weight"
        string_val: "linear/spy_average_20/weight/Ftrl"
        string_val: "linear/spy_average_20/weight/Ftrl_1"
        string_val: "linear/spy_average_40/weight"
        string_val: "linear/spy_average_40/weight/Ftrl"
        string_val: "linear/spy_average_40/weight/Ftrl_1"
        string_val: "linear/spy_average_80/weight"
        string_val: "linear/spy_average_80/weight/Ftrl"
        string_val: "linear/spy_average_80/weight/Ftrl_1"
        string_val: "linear/spy_change/weight"
        string_val: "linear/spy_change/weight/Ftrl"
        string_val: "linear/spy_change/weight/Ftrl_1"
        string_val: "linear/spy_rsi_10/weight"
        string_val: "linear/spy_rsi_10/weight/Ftrl"
        string_val: "linear/spy_rsi_10/weight/Ftrl_1"
        string_val: "linear/spy_rsi_14/weight"
        string_val: "linear/spy_rsi_14/weight/Ftrl"
        string_val: "linear/spy_rsi_14/weight/Ftrl_1"
        string_val: "linear/spy_rsi_3/weight"
        string_val: "linear/spy_rsi_3/weight/Ftrl"
        string_val: "linear/spy_rsi_3/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/ShardedFilename"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "centered_bias_weight"
  input: "centered_bias_weight/Adagrad"
  input: "global_step"
  input: "linear/bias_weight/part_0/read"
  input: "linear/bias_weight/part_0/Ftrl/read"
  input: "linear/bias_weight/part_0/Ftrl_1/read"
  input: "linear/gdp_change/weight/part_0/read"
  input: "linear/gdp_change/weight/part_0/Ftrl/read"
  input: "linear/gdp_change/weight/part_0/Ftrl_1/read"
  input: "linear/gdp_high/weight/part_0/read"
  input: "linear/gdp_high/weight/part_0/Ftrl/read"
  input: "linear/gdp_high/weight/part_0/Ftrl_1/read"
  input: "linear/manufacture_durable_orders_change/weight/part_0/read"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl/read"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1/read"
  input: "linear/manufacture_durable_orders_high/weight/part_0/read"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl/read"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1/read"
  input: "linear/manufacture_orders_change/weight/part_0/read"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl/read"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl_1/read"
  input: "linear/manufacture_orders_high/weight/part_0/read"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl/read"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl_1/read"
  input: "linear/spy_average_10/weight/part_0/read"
  input: "linear/spy_average_10/weight/part_0/Ftrl/read"
  input: "linear/spy_average_10/weight/part_0/Ftrl_1/read"
  input: "linear/spy_average_20/weight/part_0/read"
  input: "linear/spy_average_20/weight/part_0/Ftrl/read"
  input: "linear/spy_average_20/weight/part_0/Ftrl_1/read"
  input: "linear/spy_average_40/weight/part_0/read"
  input: "linear/spy_average_40/weight/part_0/Ftrl/read"
  input: "linear/spy_average_40/weight/part_0/Ftrl_1/read"
  input: "linear/spy_average_80/weight/part_0/read"
  input: "linear/spy_average_80/weight/part_0/Ftrl/read"
  input: "linear/spy_average_80/weight/part_0/Ftrl_1/read"
  input: "linear/spy_change/weight/part_0/read"
  input: "linear/spy_change/weight/part_0/Ftrl/read"
  input: "linear/spy_change/weight/part_0/Ftrl_1/read"
  input: "linear/spy_rsi_10/weight/part_0/read"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl/read"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl_1/read"
  input: "linear/spy_rsi_14/weight/part_0/read"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl/read"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl_1/read"
  input: "linear/spy_rsi_3/weight/part_0/read"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl/read"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl_1/read"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/ShardedFilespec"
  op: "ShardedFilespec"
  input: "save/Const"
  input: "save/num_shards"
  input: "^save/control_dependency"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "centered_bias_weight"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "centered_bias_weight"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "centered_bias_weight/Adagrad"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "centered_bias_weight/Adagrad"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@centered_bias_weight"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/bias_weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "linear/bias_weight/part_0"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/bias_weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "linear/bias_weight/part_0/Ftrl"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/bias_weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "linear/bias_weight/part_0/Ftrl_1"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/bias_weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/gdp_change/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "linear/gdp_change/weight/part_0"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/gdp_change/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "linear/gdp_change/weight/part_0/Ftrl"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/gdp_change/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "linear/gdp_change/weight/part_0/Ftrl_1"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/gdp_high/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "linear/gdp_high/weight/part_0"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/gdp_high/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "linear/gdp_high/weight/part_0/Ftrl"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/gdp_high/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "linear/gdp_high/weight/part_0/Ftrl_1"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/gdp_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_durable_orders_change/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "linear/manufacture_durable_orders_change/weight/part_0"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_durable_orders_change/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_durable_orders_change/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "linear/manufacture_durable_orders_change/weight/part_0/Ftrl_1"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_durable_orders_high/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "linear/manufacture_durable_orders_high/weight/part_0"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_durable_orders_high/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_durable_orders_high/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear/manufacture_durable_orders_high/weight/part_0/Ftrl_1"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_durable_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_orders_change/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear/manufacture_orders_change/weight/part_0"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_orders_change/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_orders_change/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear/manufacture_orders_change/weight/part_0/Ftrl_1"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_orders_high/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear/manufacture_orders_high/weight/part_0"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_orders_high/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_23/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/manufacture_orders_high/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_23/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_23"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_23/tensor_name"
  input: "save/restore_slice_23/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "linear/manufacture_orders_high/weight/part_0/Ftrl_1"
  input: "save/restore_slice_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/manufacture_orders_high/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_24/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_10/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_24/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_24"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_24/tensor_name"
  input: "save/restore_slice_24/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "linear/spy_average_10/weight/part_0"
  input: "save/restore_slice_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_25/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_10/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_25/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_25"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_25/tensor_name"
  input: "save/restore_slice_25/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "linear/spy_average_10/weight/part_0/Ftrl"
  input: "save/restore_slice_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_26/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_10/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_26/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_26"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_26/tensor_name"
  input: "save/restore_slice_26/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "linear/spy_average_10/weight/part_0/Ftrl_1"
  input: "save/restore_slice_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_27/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_20/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_27/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_27"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_27/tensor_name"
  input: "save/restore_slice_27/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "linear/spy_average_20/weight/part_0"
  input: "save/restore_slice_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_28/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_20/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_28/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_28"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_28/tensor_name"
  input: "save/restore_slice_28/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "linear/spy_average_20/weight/part_0/Ftrl"
  input: "save/restore_slice_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_29/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_20/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_29/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_29"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_29/tensor_name"
  input: "save/restore_slice_29/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "linear/spy_average_20/weight/part_0/Ftrl_1"
  input: "save/restore_slice_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_20/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_30/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_40/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_30/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_30"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_30/tensor_name"
  input: "save/restore_slice_30/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "linear/spy_average_40/weight/part_0"
  input: "save/restore_slice_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_31/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_40/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_31/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_31"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_31/tensor_name"
  input: "save/restore_slice_31/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "linear/spy_average_40/weight/part_0/Ftrl"
  input: "save/restore_slice_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_32/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_40/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_32/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_32"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_32/tensor_name"
  input: "save/restore_slice_32/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "linear/spy_average_40/weight/part_0/Ftrl_1"
  input: "save/restore_slice_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_40/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_33/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_80/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_33/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_33"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_33/tensor_name"
  input: "save/restore_slice_33/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "linear/spy_average_80/weight/part_0"
  input: "save/restore_slice_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_34/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_80/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_34/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_34"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_34/tensor_name"
  input: "save/restore_slice_34/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "linear/spy_average_80/weight/part_0/Ftrl"
  input: "save/restore_slice_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_35/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_average_80/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_35/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_35"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_35/tensor_name"
  input: "save/restore_slice_35/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "linear/spy_average_80/weight/part_0/Ftrl_1"
  input: "save/restore_slice_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_average_80/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_36/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_change/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_36/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_36"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_36/tensor_name"
  input: "save/restore_slice_36/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "linear/spy_change/weight/part_0"
  input: "save/restore_slice_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_37/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_change/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_37/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_37"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_37/tensor_name"
  input: "save/restore_slice_37/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "linear/spy_change/weight/part_0/Ftrl"
  input: "save/restore_slice_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_38/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_change/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_38/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_38"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_38/tensor_name"
  input: "save/restore_slice_38/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "linear/spy_change/weight/part_0/Ftrl_1"
  input: "save/restore_slice_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_change/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_39/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_10/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_39/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_39"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_39/tensor_name"
  input: "save/restore_slice_39/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "linear/spy_rsi_10/weight/part_0"
  input: "save/restore_slice_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_40/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_10/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_40/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_40"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_40/tensor_name"
  input: "save/restore_slice_40/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl"
  input: "save/restore_slice_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_41/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_10/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_41/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_41"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_41/tensor_name"
  input: "save/restore_slice_41/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "linear/spy_rsi_10/weight/part_0/Ftrl_1"
  input: "save/restore_slice_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_10/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_42/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_14/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_42/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_42"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_42/tensor_name"
  input: "save/restore_slice_42/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "linear/spy_rsi_14/weight/part_0"
  input: "save/restore_slice_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_43/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_14/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_43/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_43"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_43/tensor_name"
  input: "save/restore_slice_43/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl"
  input: "save/restore_slice_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_44/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_14/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_44/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_44"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_44/tensor_name"
  input: "save/restore_slice_44/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "linear/spy_rsi_14/weight/part_0/Ftrl_1"
  input: "save/restore_slice_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_14/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_45/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_3/weight"
      }
    }
  }
}
node {
  name: "save/restore_slice_45/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_45"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_45/tensor_name"
  input: "save/restore_slice_45/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "linear/spy_rsi_3/weight/part_0"
  input: "save/restore_slice_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_46/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_3/weight/Ftrl"
      }
    }
  }
}
node {
  name: "save/restore_slice_46/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_46"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_46/tensor_name"
  input: "save/restore_slice_46/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl"
  input: "save/restore_slice_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_47/tensor_name"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear/spy_rsi_3/weight/Ftrl_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_47/shape_and_slice"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1 1 0,1:0,1"
      }
    }
  }
}
node {
  name: "save/restore_slice_47"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_47/tensor_name"
  input: "save/restore_slice_47/shape_and_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: 0
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "linear/spy_rsi_3/weight/part_0/Ftrl_1"
  input: "save/restore_slice_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/spy_rsi_3/weight/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 15
}
